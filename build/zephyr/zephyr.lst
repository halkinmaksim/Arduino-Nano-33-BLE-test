
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_table>:
   10000:	80 18 00 20 79 17 01 00 9d 48 01 00 4d 17 01 00     ... y....H..M...
   10010:	4d 17 01 00 4d 17 01 00 4d 17 01 00 00 00 00 00     M...M...M.......
	...
   1002c:	b5 13 01 00 4d 17 01 00 00 00 00 00 61 13 01 00     ....M.......a...
   1003c:	4d 17 01 00                                         M...

00010040 <_irq_vector_table>:
   10040:	65 14 01 00 65 14 01 00 65 14 01 00 65 14 01 00     e...e...e...e...
   10050:	65 14 01 00 65 14 01 00 65 14 01 00 65 14 01 00     e...e...e...e...
   10060:	65 14 01 00 65 14 01 00 65 14 01 00 65 14 01 00     e...e...e...e...
   10070:	65 14 01 00 65 14 01 00 65 14 01 00 65 14 01 00     e...e...e...e...
   10080:	65 14 01 00 65 14 01 00 65 14 01 00 65 14 01 00     e...e...e...e...
   10090:	65 14 01 00 65 14 01 00 65 14 01 00 65 14 01 00     e...e...e...e...
   100a0:	65 14 01 00 65 14 01 00 65 14 01 00 65 14 01 00     e...e...e...e...
   100b0:	65 14 01 00 65 14 01 00 65 14 01 00 65 14 01 00     e...e...e...e...
   100c0:	65 14 01 00 65 14 01 00 65 14 01 00 65 14 01 00     e...e...e...e...
   100d0:	65 14 01 00 65 14 01 00 65 14 01 00 65 14 01 00     e...e...e...e...
   100e0:	65 14 01 00 65 14 01 00 65 14 01 00 65 14 01 00     e...e...e...e...
   100f0:	65 14 01 00 65 14 01 00 65 14 01 00 65 14 01 00     e...e...e...e...

Disassembly of section text:

00010100 <__aeabi_uldivmod>:
   10100:	b953      	cbnz	r3, 10118 <__aeabi_uldivmod+0x18>
   10102:	b94a      	cbnz	r2, 10118 <__aeabi_uldivmod+0x18>
   10104:	2900      	cmp	r1, #0
   10106:	bf08      	it	eq
   10108:	2800      	cmpeq	r0, #0
   1010a:	bf1c      	itt	ne
   1010c:	f04f 31ff 	movne.w	r1, #4294967295
   10110:	f04f 30ff 	movne.w	r0, #4294967295
   10114:	f000 b80c 	b.w	10130 <__aeabi_idiv0>
   10118:	f1ad 0c08 	sub.w	ip, sp, #8
   1011c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10120:	f000 f808 	bl	10134 <__udivmoddi4>
   10124:	f8dd e004 	ldr.w	lr, [sp, #4]
   10128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1012c:	b004      	add	sp, #16
   1012e:	4770      	bx	lr

00010130 <__aeabi_idiv0>:
   10130:	4770      	bx	lr
   10132:	bf00      	nop

00010134 <__udivmoddi4>:
   10134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10138:	4686      	mov	lr, r0
   1013a:	468c      	mov	ip, r1
   1013c:	4608      	mov	r0, r1
   1013e:	9e08      	ldr	r6, [sp, #32]
   10140:	4615      	mov	r5, r2
   10142:	4674      	mov	r4, lr
   10144:	4619      	mov	r1, r3
   10146:	2b00      	cmp	r3, #0
   10148:	f040 80c2 	bne.w	102d0 <__udivmoddi4+0x19c>
   1014c:	4285      	cmp	r5, r0
   1014e:	fab2 f282 	clz	r2, r2
   10152:	d945      	bls.n	101e0 <__udivmoddi4+0xac>
   10154:	b14a      	cbz	r2, 1016a <__udivmoddi4+0x36>
   10156:	f1c2 0320 	rsb	r3, r2, #32
   1015a:	fa00 fc02 	lsl.w	ip, r0, r2
   1015e:	fa2e f303 	lsr.w	r3, lr, r3
   10162:	4095      	lsls	r5, r2
   10164:	ea43 0c0c 	orr.w	ip, r3, ip
   10168:	4094      	lsls	r4, r2
   1016a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1016e:	b2a8      	uxth	r0, r5
   10170:	fbbc f8fe 	udiv	r8, ip, lr
   10174:	0c23      	lsrs	r3, r4, #16
   10176:	fb0e cc18 	mls	ip, lr, r8, ip
   1017a:	fb08 f900 	mul.w	r9, r8, r0
   1017e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   10182:	4599      	cmp	r9, r3
   10184:	d928      	bls.n	101d8 <__udivmoddi4+0xa4>
   10186:	18eb      	adds	r3, r5, r3
   10188:	f108 37ff 	add.w	r7, r8, #4294967295
   1018c:	d204      	bcs.n	10198 <__udivmoddi4+0x64>
   1018e:	4599      	cmp	r9, r3
   10190:	d902      	bls.n	10198 <__udivmoddi4+0x64>
   10192:	f1a8 0702 	sub.w	r7, r8, #2
   10196:	442b      	add	r3, r5
   10198:	eba3 0309 	sub.w	r3, r3, r9
   1019c:	b2a4      	uxth	r4, r4
   1019e:	fbb3 fcfe 	udiv	ip, r3, lr
   101a2:	fb0e 331c 	mls	r3, lr, ip, r3
   101a6:	fb0c f000 	mul.w	r0, ip, r0
   101aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   101ae:	42a0      	cmp	r0, r4
   101b0:	d914      	bls.n	101dc <__udivmoddi4+0xa8>
   101b2:	192c      	adds	r4, r5, r4
   101b4:	f10c 33ff 	add.w	r3, ip, #4294967295
   101b8:	d204      	bcs.n	101c4 <__udivmoddi4+0x90>
   101ba:	42a0      	cmp	r0, r4
   101bc:	d902      	bls.n	101c4 <__udivmoddi4+0x90>
   101be:	f1ac 0302 	sub.w	r3, ip, #2
   101c2:	442c      	add	r4, r5
   101c4:	1a24      	subs	r4, r4, r0
   101c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   101ca:	b11e      	cbz	r6, 101d4 <__udivmoddi4+0xa0>
   101cc:	40d4      	lsrs	r4, r2
   101ce:	2300      	movs	r3, #0
   101d0:	6034      	str	r4, [r6, #0]
   101d2:	6073      	str	r3, [r6, #4]
   101d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   101d8:	4647      	mov	r7, r8
   101da:	e7dd      	b.n	10198 <__udivmoddi4+0x64>
   101dc:	4663      	mov	r3, ip
   101de:	e7f1      	b.n	101c4 <__udivmoddi4+0x90>
   101e0:	bb92      	cbnz	r2, 10248 <__udivmoddi4+0x114>
   101e2:	1b43      	subs	r3, r0, r5
   101e4:	2101      	movs	r1, #1
   101e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   101ea:	b2af      	uxth	r7, r5
   101ec:	fbb3 fcfe 	udiv	ip, r3, lr
   101f0:	0c20      	lsrs	r0, r4, #16
   101f2:	fb0e 331c 	mls	r3, lr, ip, r3
   101f6:	fb0c f807 	mul.w	r8, ip, r7
   101fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   101fe:	4598      	cmp	r8, r3
   10200:	d962      	bls.n	102c8 <__udivmoddi4+0x194>
   10202:	18eb      	adds	r3, r5, r3
   10204:	f10c 30ff 	add.w	r0, ip, #4294967295
   10208:	d204      	bcs.n	10214 <__udivmoddi4+0xe0>
   1020a:	4598      	cmp	r8, r3
   1020c:	d902      	bls.n	10214 <__udivmoddi4+0xe0>
   1020e:	f1ac 0002 	sub.w	r0, ip, #2
   10212:	442b      	add	r3, r5
   10214:	eba3 0308 	sub.w	r3, r3, r8
   10218:	b2a4      	uxth	r4, r4
   1021a:	fbb3 fcfe 	udiv	ip, r3, lr
   1021e:	fb0e 331c 	mls	r3, lr, ip, r3
   10222:	fb0c f707 	mul.w	r7, ip, r7
   10226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1022a:	42a7      	cmp	r7, r4
   1022c:	d94e      	bls.n	102cc <__udivmoddi4+0x198>
   1022e:	192c      	adds	r4, r5, r4
   10230:	f10c 33ff 	add.w	r3, ip, #4294967295
   10234:	d204      	bcs.n	10240 <__udivmoddi4+0x10c>
   10236:	42a7      	cmp	r7, r4
   10238:	d902      	bls.n	10240 <__udivmoddi4+0x10c>
   1023a:	f1ac 0302 	sub.w	r3, ip, #2
   1023e:	442c      	add	r4, r5
   10240:	1be4      	subs	r4, r4, r7
   10242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   10246:	e7c0      	b.n	101ca <__udivmoddi4+0x96>
   10248:	f1c2 0320 	rsb	r3, r2, #32
   1024c:	fa20 f103 	lsr.w	r1, r0, r3
   10250:	4095      	lsls	r5, r2
   10252:	4090      	lsls	r0, r2
   10254:	fa2e f303 	lsr.w	r3, lr, r3
   10258:	4303      	orrs	r3, r0
   1025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1025e:	b2af      	uxth	r7, r5
   10260:	fbb1 fcfe 	udiv	ip, r1, lr
   10264:	fb0e 101c 	mls	r0, lr, ip, r1
   10268:	0c19      	lsrs	r1, r3, #16
   1026a:	fb0c f807 	mul.w	r8, ip, r7
   1026e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   10272:	4588      	cmp	r8, r1
   10274:	fa04 f402 	lsl.w	r4, r4, r2
   10278:	d922      	bls.n	102c0 <__udivmoddi4+0x18c>
   1027a:	1869      	adds	r1, r5, r1
   1027c:	f10c 30ff 	add.w	r0, ip, #4294967295
   10280:	d204      	bcs.n	1028c <__udivmoddi4+0x158>
   10282:	4588      	cmp	r8, r1
   10284:	d902      	bls.n	1028c <__udivmoddi4+0x158>
   10286:	f1ac 0002 	sub.w	r0, ip, #2
   1028a:	4429      	add	r1, r5
   1028c:	eba1 0108 	sub.w	r1, r1, r8
   10290:	b29b      	uxth	r3, r3
   10292:	fbb1 fcfe 	udiv	ip, r1, lr
   10296:	fb0e 111c 	mls	r1, lr, ip, r1
   1029a:	fb0c f707 	mul.w	r7, ip, r7
   1029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   102a2:	429f      	cmp	r7, r3
   102a4:	d90e      	bls.n	102c4 <__udivmoddi4+0x190>
   102a6:	18eb      	adds	r3, r5, r3
   102a8:	f10c 31ff 	add.w	r1, ip, #4294967295
   102ac:	d204      	bcs.n	102b8 <__udivmoddi4+0x184>
   102ae:	429f      	cmp	r7, r3
   102b0:	d902      	bls.n	102b8 <__udivmoddi4+0x184>
   102b2:	f1ac 0102 	sub.w	r1, ip, #2
   102b6:	442b      	add	r3, r5
   102b8:	1bdb      	subs	r3, r3, r7
   102ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   102be:	e792      	b.n	101e6 <__udivmoddi4+0xb2>
   102c0:	4660      	mov	r0, ip
   102c2:	e7e3      	b.n	1028c <__udivmoddi4+0x158>
   102c4:	4661      	mov	r1, ip
   102c6:	e7f7      	b.n	102b8 <__udivmoddi4+0x184>
   102c8:	4660      	mov	r0, ip
   102ca:	e7a3      	b.n	10214 <__udivmoddi4+0xe0>
   102cc:	4663      	mov	r3, ip
   102ce:	e7b7      	b.n	10240 <__udivmoddi4+0x10c>
   102d0:	4283      	cmp	r3, r0
   102d2:	d906      	bls.n	102e2 <__udivmoddi4+0x1ae>
   102d4:	b916      	cbnz	r6, 102dc <__udivmoddi4+0x1a8>
   102d6:	2100      	movs	r1, #0
   102d8:	4608      	mov	r0, r1
   102da:	e77b      	b.n	101d4 <__udivmoddi4+0xa0>
   102dc:	e9c6 e000 	strd	lr, r0, [r6]
   102e0:	e7f9      	b.n	102d6 <__udivmoddi4+0x1a2>
   102e2:	fab3 f783 	clz	r7, r3
   102e6:	b98f      	cbnz	r7, 1030c <__udivmoddi4+0x1d8>
   102e8:	4283      	cmp	r3, r0
   102ea:	d301      	bcc.n	102f0 <__udivmoddi4+0x1bc>
   102ec:	4572      	cmp	r2, lr
   102ee:	d808      	bhi.n	10302 <__udivmoddi4+0x1ce>
   102f0:	ebbe 0402 	subs.w	r4, lr, r2
   102f4:	eb60 0303 	sbc.w	r3, r0, r3
   102f8:	2001      	movs	r0, #1
   102fa:	469c      	mov	ip, r3
   102fc:	b91e      	cbnz	r6, 10306 <__udivmoddi4+0x1d2>
   102fe:	2100      	movs	r1, #0
   10300:	e768      	b.n	101d4 <__udivmoddi4+0xa0>
   10302:	4638      	mov	r0, r7
   10304:	e7fa      	b.n	102fc <__udivmoddi4+0x1c8>
   10306:	e9c6 4c00 	strd	r4, ip, [r6]
   1030a:	e7f8      	b.n	102fe <__udivmoddi4+0x1ca>
   1030c:	f1c7 0c20 	rsb	ip, r7, #32
   10310:	40bb      	lsls	r3, r7
   10312:	fa22 f40c 	lsr.w	r4, r2, ip
   10316:	431c      	orrs	r4, r3
   10318:	fa2e f10c 	lsr.w	r1, lr, ip
   1031c:	fa20 f30c 	lsr.w	r3, r0, ip
   10320:	40b8      	lsls	r0, r7
   10322:	4301      	orrs	r1, r0
   10324:	ea4f 4914 	mov.w	r9, r4, lsr #16
   10328:	fa0e f507 	lsl.w	r5, lr, r7
   1032c:	fbb3 f8f9 	udiv	r8, r3, r9
   10330:	fa1f fe84 	uxth.w	lr, r4
   10334:	fb09 3018 	mls	r0, r9, r8, r3
   10338:	0c0b      	lsrs	r3, r1, #16
   1033a:	fb08 fa0e 	mul.w	sl, r8, lr
   1033e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   10342:	459a      	cmp	sl, r3
   10344:	fa02 f207 	lsl.w	r2, r2, r7
   10348:	d940      	bls.n	103cc <__udivmoddi4+0x298>
   1034a:	18e3      	adds	r3, r4, r3
   1034c:	f108 30ff 	add.w	r0, r8, #4294967295
   10350:	d204      	bcs.n	1035c <__udivmoddi4+0x228>
   10352:	459a      	cmp	sl, r3
   10354:	d902      	bls.n	1035c <__udivmoddi4+0x228>
   10356:	f1a8 0002 	sub.w	r0, r8, #2
   1035a:	4423      	add	r3, r4
   1035c:	eba3 030a 	sub.w	r3, r3, sl
   10360:	b289      	uxth	r1, r1
   10362:	fbb3 f8f9 	udiv	r8, r3, r9
   10366:	fb09 3318 	mls	r3, r9, r8, r3
   1036a:	fb08 fe0e 	mul.w	lr, r8, lr
   1036e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   10372:	458e      	cmp	lr, r1
   10374:	d92c      	bls.n	103d0 <__udivmoddi4+0x29c>
   10376:	1861      	adds	r1, r4, r1
   10378:	f108 33ff 	add.w	r3, r8, #4294967295
   1037c:	d204      	bcs.n	10388 <__udivmoddi4+0x254>
   1037e:	458e      	cmp	lr, r1
   10380:	d902      	bls.n	10388 <__udivmoddi4+0x254>
   10382:	f1a8 0302 	sub.w	r3, r8, #2
   10386:	4421      	add	r1, r4
   10388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1038c:	fba0 9802 	umull	r9, r8, r0, r2
   10390:	eba1 010e 	sub.w	r1, r1, lr
   10394:	4541      	cmp	r1, r8
   10396:	46ce      	mov	lr, r9
   10398:	4643      	mov	r3, r8
   1039a:	d302      	bcc.n	103a2 <__udivmoddi4+0x26e>
   1039c:	d106      	bne.n	103ac <__udivmoddi4+0x278>
   1039e:	454d      	cmp	r5, r9
   103a0:	d204      	bcs.n	103ac <__udivmoddi4+0x278>
   103a2:	ebb9 0e02 	subs.w	lr, r9, r2
   103a6:	eb68 0304 	sbc.w	r3, r8, r4
   103aa:	3801      	subs	r0, #1
   103ac:	2e00      	cmp	r6, #0
   103ae:	d0a6      	beq.n	102fe <__udivmoddi4+0x1ca>
   103b0:	ebb5 020e 	subs.w	r2, r5, lr
   103b4:	eb61 0103 	sbc.w	r1, r1, r3
   103b8:	fa01 fc0c 	lsl.w	ip, r1, ip
   103bc:	fa22 f307 	lsr.w	r3, r2, r7
   103c0:	ea4c 0303 	orr.w	r3, ip, r3
   103c4:	40f9      	lsrs	r1, r7
   103c6:	e9c6 3100 	strd	r3, r1, [r6]
   103ca:	e798      	b.n	102fe <__udivmoddi4+0x1ca>
   103cc:	4640      	mov	r0, r8
   103ce:	e7c5      	b.n	1035c <__udivmoddi4+0x228>
   103d0:	4643      	mov	r3, r8
   103d2:	e7d9      	b.n	10388 <__udivmoddi4+0x254>

000103d4 <main>:
 */

#include <zephyr/kernel.h>

int main(void)
{
   103d4:	b508      	push	{r3, lr}
	printk("Hello World! %s\n", CONFIG_BOARD);
   103d6:	4903      	ldr	r1, [pc, #12]	; (103e4 <main+0x10>)
   103d8:	4803      	ldr	r0, [pc, #12]	; (103e8 <main+0x14>)
   103da:	f004 f903 	bl	145e4 <printk>
	return 0;
}
   103de:	2000      	movs	r0, #0
   103e0:	bd08      	pop	{r3, pc}
   103e2:	bf00      	nop
   103e4:	00015414 	.word	0x00015414
   103e8:	00015428 	.word	0x00015428

000103ec <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   103ec:	4b01      	ldr	r3, [pc, #4]	; (103f4 <char_out+0x8>)
   103ee:	681b      	ldr	r3, [r3, #0]
   103f0:	4718      	bx	r3
   103f2:	bf00      	nop
   103f4:	20000000 	.word	0x20000000

000103f8 <__printk_hook_install>:
	_char_out = fn;
   103f8:	4b01      	ldr	r3, [pc, #4]	; (10400 <__printk_hook_install+0x8>)
   103fa:	6018      	str	r0, [r3, #0]
}
   103fc:	4770      	bx	lr
   103fe:	bf00      	nop
   10400:	20000000 	.word	0x20000000

00010404 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   10404:	b507      	push	{r0, r1, r2, lr}
   10406:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   10408:	2100      	movs	r1, #0
   1040a:	4602      	mov	r2, r0
   1040c:	9100      	str	r1, [sp, #0]
   1040e:	4803      	ldr	r0, [pc, #12]	; (1041c <vprintk+0x18>)
   10410:	f000 f914 	bl	1063c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   10414:	b003      	add	sp, #12
   10416:	f85d fb04 	ldr.w	pc, [sp], #4
   1041a:	bf00      	nop
   1041c:	000103ed 	.word	0x000103ed

00010420 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10424:	8b05      	ldrh	r5, [r0, #24]
{
   10426:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10428:	0728      	lsls	r0, r5, #28
{
   1042a:	4690      	mov	r8, r2
	if (processing) {
   1042c:	d411      	bmi.n	10452 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   1042e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10430:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   10434:	f040 80cd 	bne.w	105d2 <process_event+0x1b2>
			evt = process_recheck(mgr);
   10438:	4620      	mov	r0, r4
   1043a:	f004 f8ea 	bl	14612 <process_recheck>
		}

		if (evt == EVT_NOP) {
   1043e:	b178      	cbz	r0, 10460 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   10440:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10442:	8b21      	ldrh	r1, [r4, #24]
   10444:	2804      	cmp	r0, #4
   10446:	d811      	bhi.n	1046c <process_event+0x4c>
   10448:	e8df f000 	tbb	[pc, r0]
   1044c:	856d10c3 	.word	0x856d10c3
   10450:	95          	.byte	0x95
   10451:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   10452:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10454:	bf0c      	ite	eq
   10456:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1045a:	f045 0520 	orrne.w	r5, r5, #32
   1045e:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10460:	f388 8811 	msr	BASEPRI, r8
   10464:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   10468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1046c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10470:	45aa      	cmp	sl, r5
   10472:	f000 80a6 	beq.w	105c2 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   10476:	2700      	movs	r7, #0
   10478:	46b9      	mov	r9, r7
   1047a:	463e      	mov	r6, r7
   1047c:	68a3      	ldr	r3, [r4, #8]
   1047e:	2b00      	cmp	r3, #0
   10480:	f000 80bd 	beq.w	105fe <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10484:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   10488:	8321      	strh	r1, [r4, #24]
   1048a:	f388 8811 	msr	BASEPRI, r8
   1048e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10492:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10494:	2900      	cmp	r1, #0
   10496:	f000 80bb 	beq.w	10610 <process_event+0x1f0>
	return node->next;
   1049a:	680d      	ldr	r5, [r1, #0]
   1049c:	2900      	cmp	r1, #0
   1049e:	f000 80b7 	beq.w	10610 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   104a2:	f8d1 8004 	ldr.w	r8, [r1, #4]
   104a6:	4633      	mov	r3, r6
   104a8:	4652      	mov	r2, sl
   104aa:	4620      	mov	r0, r4
   104ac:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   104ae:	2d00      	cmp	r5, #0
   104b0:	d076      	beq.n	105a0 <process_event+0x180>
   104b2:	682b      	ldr	r3, [r5, #0]
   104b4:	4629      	mov	r1, r5
   104b6:	461d      	mov	r5, r3
   104b8:	e7f0      	b.n	1049c <process_event+0x7c>
   104ba:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   104be:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   104c0:	2a01      	cmp	r2, #1
   104c2:	d81b      	bhi.n	104fc <process_event+0xdc>
	list->head = NULL;
   104c4:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   104c6:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   104ca:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   104cc:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   104ce:	b289      	uxth	r1, r1
	list->tail = NULL;
   104d0:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   104d4:	d109      	bne.n	104ea <process_event+0xca>
   104d6:	463b      	mov	r3, r7
   104d8:	e003      	b.n	104e2 <process_event+0xc2>
				mgr->refs += 1U;
   104da:	8b62      	ldrh	r2, [r4, #26]
   104dc:	3201      	adds	r2, #1
   104de:	8362      	strh	r2, [r4, #26]
	return node->next;
   104e0:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   104e2:	2b00      	cmp	r3, #0
   104e4:	d1f9      	bne.n	104da <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   104e6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   104ea:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   104ec:	4620      	mov	r0, r4
   104ee:	f004 f890 	bl	14612 <process_recheck>
   104f2:	2800      	cmp	r0, #0
   104f4:	d07b      	beq.n	105ee <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   104f6:	f041 0120 	orr.w	r1, r1, #32
   104fa:	e077      	b.n	105ec <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   104fc:	2b04      	cmp	r3, #4
   104fe:	d10a      	bne.n	10516 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10500:	f021 0107 	bic.w	r1, r1, #7
   10504:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10506:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10508:	4620      	mov	r0, r4
   1050a:	f004 f882 	bl	14612 <process_recheck>
   1050e:	b110      	cbz	r0, 10516 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10510:	f041 0120 	orr.w	r1, r1, #32
   10514:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10516:	8b21      	ldrh	r1, [r4, #24]
   10518:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1051c:	45aa      	cmp	sl, r5
   1051e:	d050      	beq.n	105c2 <process_event+0x1a2>
   10520:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   10522:	46b9      	mov	r9, r7
   10524:	e7aa      	b.n	1047c <process_event+0x5c>
			transit = mgr->transitions->start;
   10526:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10528:	f021 0107 	bic.w	r1, r1, #7
   1052c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   10530:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   10532:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   10536:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   10538:	d12d      	bne.n	10596 <process_event+0x176>
		    || (transit != NULL)) {
   1053a:	f1b9 0f00 	cmp.w	r9, #0
   1053e:	d040      	beq.n	105c2 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10540:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   10544:	8321      	strh	r1, [r4, #24]
   10546:	f388 8811 	msr	BASEPRI, r8
   1054a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   1054e:	493a      	ldr	r1, [pc, #232]	; (10638 <process_event+0x218>)
   10550:	4620      	mov	r0, r4
   10552:	47c8      	blx	r9
   10554:	e029      	b.n	105aa <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10556:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   1055a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1055c:	f041 0104 	orr.w	r1, r1, #4
   10560:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   10562:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   10564:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   10568:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   1056a:	d0e6      	beq.n	1053a <process_event+0x11a>
   1056c:	2700      	movs	r7, #0
		res = 0;
   1056e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10570:	f04f 0a04 	mov.w	sl, #4
   10574:	e782      	b.n	1047c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10576:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   1057a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1057c:	f041 0105 	orr.w	r1, r1, #5
   10580:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   10582:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   10584:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   10588:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   1058a:	d0d6      	beq.n	1053a <process_event+0x11a>
   1058c:	2700      	movs	r7, #0
		res = 0;
   1058e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10590:	f04f 0a05 	mov.w	sl, #5
   10594:	e772      	b.n	1047c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   10596:	2700      	movs	r7, #0
		res = 0;
   10598:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1059a:	f04f 0a06 	mov.w	sl, #6
   1059e:	e76d      	b.n	1047c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   105a0:	462b      	mov	r3, r5
   105a2:	e787      	b.n	104b4 <process_event+0x94>
			if (transit != NULL) {
   105a4:	f1b9 0f00 	cmp.w	r9, #0
   105a8:	d1d1      	bne.n	1054e <process_event+0x12e>
	__asm__ volatile(
   105aa:	f04f 0320 	mov.w	r3, #32
   105ae:	f3ef 8811 	mrs	r8, BASEPRI
   105b2:	f383 8812 	msr	BASEPRI_MAX, r3
   105b6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   105ba:	8b23      	ldrh	r3, [r4, #24]
   105bc:	f023 0308 	bic.w	r3, r3, #8
   105c0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   105c2:	8b25      	ldrh	r5, [r4, #24]
   105c4:	06ea      	lsls	r2, r5, #27
   105c6:	d52e      	bpl.n	10626 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   105c8:	f025 0310 	bic.w	r3, r5, #16
   105cc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   105ce:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   105d2:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   105d4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   105d6:	2e00      	cmp	r6, #0
   105d8:	f6bf af6f 	bge.w	104ba <process_event+0x9a>
	list->head = NULL;
   105dc:	2300      	movs	r3, #0
		*clients = mgr->clients;
   105de:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   105e0:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   105e4:	f021 0107 	bic.w	r1, r1, #7
   105e8:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   105ec:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   105ee:	8b21      	ldrh	r1, [r4, #24]
   105f0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   105f4:	45aa      	cmp	sl, r5
   105f6:	f04f 0900 	mov.w	r9, #0
   105fa:	f47f af3f 	bne.w	1047c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   105fe:	2f00      	cmp	r7, #0
   10600:	d09b      	beq.n	1053a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10602:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   10606:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   10608:	f388 8811 	msr	BASEPRI, r8
   1060c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   10610:	2f00      	cmp	r7, #0
   10612:	d0c7      	beq.n	105a4 <process_event+0x184>
	return node->next;
   10614:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   10616:	4639      	mov	r1, r7
   10618:	4633      	mov	r3, r6
   1061a:	4652      	mov	r2, sl
   1061c:	4620      	mov	r0, r4
   1061e:	f004 f824 	bl	1466a <notify_one>
	list->head = node;
   10622:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   10624:	e7f4      	b.n	10610 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10626:	06ab      	lsls	r3, r5, #26
   10628:	f57f af1a 	bpl.w	10460 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1062c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10630:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   10632:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   10636:	e6ff      	b.n	10438 <process_event+0x18>
   10638:	00014697 	.word	0x00014697

0001063c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   1063c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10640:	4681      	mov	r9, r0
   10642:	b095      	sub	sp, #84	; 0x54
   10644:	468b      	mov	fp, r1
   10646:	4617      	mov	r7, r2
   10648:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1064a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1064c:	7838      	ldrb	r0, [r7, #0]
   1064e:	b908      	cbnz	r0, 10654 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10650:	4628      	mov	r0, r5
   10652:	e358      	b.n	10d06 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   10654:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   10656:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   10658:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   1065a:	d006      	beq.n	1066a <z_cbvprintf_impl+0x2e>
			OUTC('%');
   1065c:	4659      	mov	r1, fp
   1065e:	47c8      	blx	r9
   10660:	2800      	cmp	r0, #0
   10662:	f2c0 8350 	blt.w	10d06 <z_cbvprintf_impl+0x6ca>
   10666:	3501      	adds	r5, #1
		if (bps == NULL) {
   10668:	e1fb      	b.n	10a62 <z_cbvprintf_impl+0x426>
		} state = {
   1066a:	2218      	movs	r2, #24
   1066c:	2100      	movs	r1, #0
   1066e:	a80e      	add	r0, sp, #56	; 0x38
   10670:	f004 f936 	bl	148e0 <memset>
	if (*sp == '%') {
   10674:	787b      	ldrb	r3, [r7, #1]
   10676:	2b25      	cmp	r3, #37	; 0x25
   10678:	d07d      	beq.n	10776 <z_cbvprintf_impl+0x13a>
   1067a:	2300      	movs	r3, #0
   1067c:	1c78      	adds	r0, r7, #1
   1067e:	4698      	mov	r8, r3
   10680:	469e      	mov	lr, r3
   10682:	469c      	mov	ip, r3
   10684:	461e      	mov	r6, r3
   10686:	4601      	mov	r1, r0
		switch (*sp) {
   10688:	f810 2b01 	ldrb.w	r2, [r0], #1
   1068c:	2a2b      	cmp	r2, #43	; 0x2b
   1068e:	f000 80a1 	beq.w	107d4 <z_cbvprintf_impl+0x198>
   10692:	f200 8098 	bhi.w	107c6 <z_cbvprintf_impl+0x18a>
   10696:	2a20      	cmp	r2, #32
   10698:	f000 809f 	beq.w	107da <z_cbvprintf_impl+0x19e>
   1069c:	2a23      	cmp	r2, #35	; 0x23
   1069e:	f000 809f 	beq.w	107e0 <z_cbvprintf_impl+0x1a4>
   106a2:	b12b      	cbz	r3, 106b0 <z_cbvprintf_impl+0x74>
   106a4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   106a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   106ac:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   106b0:	f1b8 0f00 	cmp.w	r8, #0
   106b4:	d005      	beq.n	106c2 <z_cbvprintf_impl+0x86>
   106b6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   106ba:	f043 0320 	orr.w	r3, r3, #32
   106be:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   106c2:	f1be 0f00 	cmp.w	lr, #0
   106c6:	d005      	beq.n	106d4 <z_cbvprintf_impl+0x98>
   106c8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   106cc:	f043 0310 	orr.w	r3, r3, #16
   106d0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   106d4:	f1bc 0f00 	cmp.w	ip, #0
   106d8:	d005      	beq.n	106e6 <z_cbvprintf_impl+0xaa>
   106da:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   106de:	f043 0308 	orr.w	r3, r3, #8
   106e2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   106e6:	b12e      	cbz	r6, 106f4 <z_cbvprintf_impl+0xb8>
   106e8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   106ec:	f043 0304 	orr.w	r3, r3, #4
   106f0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   106f4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   106f8:	f003 0044 	and.w	r0, r3, #68	; 0x44
   106fc:	2844      	cmp	r0, #68	; 0x44
   106fe:	d103      	bne.n	10708 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   10700:	f36f 1386 	bfc	r3, #6, #1
   10704:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   10708:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   1070c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   1070e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10712:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   10716:	d17f      	bne.n	10818 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   10718:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1071c:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   10720:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   10722:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   10726:	781a      	ldrb	r2, [r3, #0]
   10728:	2a2e      	cmp	r2, #46	; 0x2e
   1072a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1072e:	bf0c      	ite	eq
   10730:	2101      	moveq	r1, #1
   10732:	2100      	movne	r1, #0
   10734:	f361 0241 	bfi	r2, r1, #1, #1
   10738:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   1073c:	d178      	bne.n	10830 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   1073e:	785a      	ldrb	r2, [r3, #1]
   10740:	2a2a      	cmp	r2, #42	; 0x2a
   10742:	d06e      	beq.n	10822 <z_cbvprintf_impl+0x1e6>
	++sp;
   10744:	3301      	adds	r3, #1
	size_t val = 0;
   10746:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   10748:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1074c:	4619      	mov	r1, r3
   1074e:	f811 0b01 	ldrb.w	r0, [r1], #1
   10752:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   10756:	2e09      	cmp	r6, #9
   10758:	f240 8095 	bls.w	10886 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   1075c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   10760:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   10762:	f3c1 0040 	ubfx	r0, r1, #1, #1
   10766:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   1076a:	460a      	mov	r2, r1
   1076c:	f360 0241 	bfi	r2, r0, #1, #1
   10770:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   10774:	e05c      	b.n	10830 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   10776:	1cba      	adds	r2, r7, #2
   10778:	9203      	str	r2, [sp, #12]
   1077a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   1077e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   10782:	07da      	lsls	r2, r3, #31
   10784:	f140 812e 	bpl.w	109e4 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   10788:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   1078c:	f1b8 0f00 	cmp.w	r8, #0
   10790:	da07      	bge.n	107a2 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   10792:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   10796:	f042 0204 	orr.w	r2, r2, #4
   1079a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   1079e:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   107a2:	075e      	lsls	r6, r3, #29
   107a4:	f140 8127 	bpl.w	109f6 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   107a8:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   107ac:	f1ba 0f00 	cmp.w	sl, #0
   107b0:	f280 8126 	bge.w	10a00 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   107b4:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   107b8:	f36f 0341 	bfc	r3, #1, #1
   107bc:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   107c0:	f04f 3aff 	mov.w	sl, #4294967295
   107c4:	e11c      	b.n	10a00 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   107c6:	2a2d      	cmp	r2, #45	; 0x2d
   107c8:	d00d      	beq.n	107e6 <z_cbvprintf_impl+0x1aa>
   107ca:	2a30      	cmp	r2, #48	; 0x30
   107cc:	f47f af69 	bne.w	106a2 <z_cbvprintf_impl+0x66>
   107d0:	2301      	movs	r3, #1
	} while (loop);
   107d2:	e758      	b.n	10686 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   107d4:	f04f 0c01 	mov.w	ip, #1
   107d8:	e755      	b.n	10686 <z_cbvprintf_impl+0x4a>
   107da:	f04f 0e01 	mov.w	lr, #1
   107de:	e752      	b.n	10686 <z_cbvprintf_impl+0x4a>
   107e0:	f04f 0801 	mov.w	r8, #1
   107e4:	e74f      	b.n	10686 <z_cbvprintf_impl+0x4a>
   107e6:	2601      	movs	r6, #1
   107e8:	e74d      	b.n	10686 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   107ea:	fb0e 6202 	mla	r2, lr, r2, r6
   107ee:	3a30      	subs	r2, #48	; 0x30
   107f0:	4603      	mov	r3, r0
   107f2:	4618      	mov	r0, r3
   107f4:	f810 6b01 	ldrb.w	r6, [r0], #1
   107f8:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   107fc:	f1bc 0f09 	cmp.w	ip, #9
   10800:	d9f3      	bls.n	107ea <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   10802:	4299      	cmp	r1, r3
   10804:	d08f      	beq.n	10726 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   10806:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   1080a:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   1080c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   1080e:	f362 0141 	bfi	r1, r2, #1, #1
   10812:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   10816:	e786      	b.n	10726 <z_cbvprintf_impl+0xea>
   10818:	460b      	mov	r3, r1
	size_t val = 0;
   1081a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   1081c:	f04f 0e0a 	mov.w	lr, #10
   10820:	e7e7      	b.n	107f2 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   10822:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   10826:	f042 0204 	orr.w	r2, r2, #4
   1082a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   1082e:	3302      	adds	r3, #2
	switch (*sp) {
   10830:	781a      	ldrb	r2, [r3, #0]
   10832:	2a6c      	cmp	r2, #108	; 0x6c
   10834:	d047      	beq.n	108c6 <z_cbvprintf_impl+0x28a>
   10836:	d82b      	bhi.n	10890 <z_cbvprintf_impl+0x254>
   10838:	2a68      	cmp	r2, #104	; 0x68
   1083a:	d031      	beq.n	108a0 <z_cbvprintf_impl+0x264>
   1083c:	2a6a      	cmp	r2, #106	; 0x6a
   1083e:	d04b      	beq.n	108d8 <z_cbvprintf_impl+0x29c>
   10840:	2a4c      	cmp	r2, #76	; 0x4c
   10842:	d051      	beq.n	108e8 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   10844:	461a      	mov	r2, r3
   10846:	f812 3b01 	ldrb.w	r3, [r2], #1
   1084a:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   1084c:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   1084e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   10852:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   10856:	f200 80be 	bhi.w	109d6 <z_cbvprintf_impl+0x39a>
   1085a:	2b6d      	cmp	r3, #109	; 0x6d
   1085c:	d851      	bhi.n	10902 <z_cbvprintf_impl+0x2c6>
   1085e:	2b69      	cmp	r3, #105	; 0x69
   10860:	f200 80b9 	bhi.w	109d6 <z_cbvprintf_impl+0x39a>
   10864:	2b57      	cmp	r3, #87	; 0x57
   10866:	d867      	bhi.n	10938 <z_cbvprintf_impl+0x2fc>
   10868:	2b41      	cmp	r3, #65	; 0x41
   1086a:	d003      	beq.n	10874 <z_cbvprintf_impl+0x238>
   1086c:	3b45      	subs	r3, #69	; 0x45
   1086e:	2b02      	cmp	r3, #2
   10870:	f200 80b1 	bhi.w	109d6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   10874:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   10878:	2204      	movs	r2, #4
   1087a:	f362 0302 	bfi	r3, r2, #0, #3
   1087e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   10882:	2301      	movs	r3, #1
			break;
   10884:	e073      	b.n	1096e <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   10886:	fb0c 0202 	mla	r2, ip, r2, r0
   1088a:	3a30      	subs	r2, #48	; 0x30
   1088c:	460b      	mov	r3, r1
   1088e:	e75d      	b.n	1074c <z_cbvprintf_impl+0x110>
	switch (*sp) {
   10890:	2a74      	cmp	r2, #116	; 0x74
   10892:	d025      	beq.n	108e0 <z_cbvprintf_impl+0x2a4>
   10894:	2a7a      	cmp	r2, #122	; 0x7a
   10896:	d1d5      	bne.n	10844 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   10898:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1089c:	2106      	movs	r1, #6
   1089e:	e00c      	b.n	108ba <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   108a0:	785a      	ldrb	r2, [r3, #1]
   108a2:	2a68      	cmp	r2, #104	; 0x68
   108a4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   108a8:	d106      	bne.n	108b8 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   108aa:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   108ac:	f361 02c6 	bfi	r2, r1, #3, #4
   108b0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   108b4:	3302      	adds	r3, #2
   108b6:	e7c5      	b.n	10844 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   108b8:	2102      	movs	r1, #2
   108ba:	f361 02c6 	bfi	r2, r1, #3, #4
   108be:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   108c2:	3301      	adds	r3, #1
   108c4:	e7be      	b.n	10844 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   108c6:	785a      	ldrb	r2, [r3, #1]
   108c8:	2a6c      	cmp	r2, #108	; 0x6c
   108ca:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   108ce:	d101      	bne.n	108d4 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   108d0:	2104      	movs	r1, #4
   108d2:	e7eb      	b.n	108ac <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   108d4:	2103      	movs	r1, #3
   108d6:	e7f0      	b.n	108ba <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   108d8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   108dc:	2105      	movs	r1, #5
   108de:	e7ec      	b.n	108ba <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   108e0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   108e4:	2107      	movs	r1, #7
   108e6:	e7e8      	b.n	108ba <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   108e8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   108ec:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   108f0:	f022 0202 	bic.w	r2, r2, #2
   108f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   108f8:	f042 0202 	orr.w	r2, r2, #2
   108fc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   10900:	e7df      	b.n	108c2 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   10902:	3b6e      	subs	r3, #110	; 0x6e
   10904:	b2d9      	uxtb	r1, r3
   10906:	2301      	movs	r3, #1
   10908:	408b      	lsls	r3, r1
   1090a:	f240 4182 	movw	r1, #1154	; 0x482
   1090e:	420b      	tst	r3, r1
   10910:	d137      	bne.n	10982 <z_cbvprintf_impl+0x346>
   10912:	f013 0f24 	tst.w	r3, #36	; 0x24
   10916:	d151      	bne.n	109bc <z_cbvprintf_impl+0x380>
   10918:	07d8      	lsls	r0, r3, #31
   1091a:	d55c      	bpl.n	109d6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   1091c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   10920:	2103      	movs	r1, #3
   10922:	f361 0302 	bfi	r3, r1, #0, #3
   10926:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   1092a:	f002 0378 	and.w	r3, r2, #120	; 0x78
   1092e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   10932:	424b      	negs	r3, r1
   10934:	414b      	adcs	r3, r1
   10936:	e01a      	b.n	1096e <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   10938:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   1093c:	b2c9      	uxtb	r1, r1
   1093e:	2001      	movs	r0, #1
   10940:	fa00 f101 	lsl.w	r1, r0, r1
   10944:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   10948:	d194      	bne.n	10874 <z_cbvprintf_impl+0x238>
   1094a:	f640 0601 	movw	r6, #2049	; 0x801
   1094e:	4231      	tst	r1, r6
   10950:	d11d      	bne.n	1098e <z_cbvprintf_impl+0x352>
   10952:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   10956:	d03e      	beq.n	109d6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   10958:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1095c:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10960:	f002 0278 	and.w	r2, r2, #120	; 0x78
   10964:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   10966:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   1096a:	d034      	beq.n	109d6 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   1096c:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   1096e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   10972:	f3c2 0140 	ubfx	r1, r2, #1, #1
   10976:	430b      	orrs	r3, r1
   10978:	f363 0241 	bfi	r2, r3, #1, #1
   1097c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   10980:	e6fd      	b.n	1077e <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   10982:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   10986:	2102      	movs	r1, #2
   10988:	f361 0302 	bfi	r3, r1, #0, #3
   1098c:	e7e8      	b.n	10960 <z_cbvprintf_impl+0x324>
   1098e:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   10992:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   10994:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   10998:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1099c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   1099e:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   109a2:	bf02      	ittt	eq
   109a4:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   109a8:	f041 0101 	orreq.w	r1, r1, #1
   109ac:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   109b0:	2b63      	cmp	r3, #99	; 0x63
   109b2:	d1db      	bne.n	1096c <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   109b4:	1e13      	subs	r3, r2, #0
   109b6:	bf18      	it	ne
   109b8:	2301      	movne	r3, #1
   109ba:	e7d8      	b.n	1096e <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   109bc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   109c0:	2103      	movs	r1, #3
   109c2:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   109c6:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   109ca:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   109ce:	bf14      	ite	ne
   109d0:	2301      	movne	r3, #1
   109d2:	2300      	moveq	r3, #0
   109d4:	e7cb      	b.n	1096e <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   109d6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   109da:	f043 0301 	orr.w	r3, r3, #1
   109de:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   109e2:	e7c3      	b.n	1096c <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   109e4:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   109e8:	2a00      	cmp	r2, #0
			width = conv->width_value;
   109ea:	bfb4      	ite	lt
   109ec:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   109f0:	f04f 38ff 	movge.w	r8, #4294967295
   109f4:	e6d5      	b.n	107a2 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   109f6:	0798      	lsls	r0, r3, #30
   109f8:	f57f aee2 	bpl.w	107c0 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   109fc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   10a00:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   10a04:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   10a06:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   10a0a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   10a0e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   10a12:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   10a14:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   10a18:	d133      	bne.n	10a82 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   10a1a:	1ecb      	subs	r3, r1, #3
   10a1c:	2b04      	cmp	r3, #4
   10a1e:	d804      	bhi.n	10a2a <z_cbvprintf_impl+0x3ee>
   10a20:	e8df f003 	tbb	[pc, r3]
   10a24:	21464621 	.word	0x21464621
   10a28:	21          	.byte	0x21
   10a29:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   10a2a:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   10a2c:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   10a2e:	ea4f 72e3 	mov.w	r2, r3, asr #31
   10a32:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   10a36:	d11c      	bne.n	10a72 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   10a38:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   10a3c:	17da      	asrs	r2, r3, #31
   10a3e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   10a42:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   10a44:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   10a48:	f013 0603 	ands.w	r6, r3, #3
   10a4c:	d050      	beq.n	10af0 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   10a4e:	9b03      	ldr	r3, [sp, #12]
   10a50:	463a      	mov	r2, r7
   10a52:	4659      	mov	r1, fp
   10a54:	4648      	mov	r0, r9
   10a56:	f003 fefb 	bl	14850 <outs>
   10a5a:	2800      	cmp	r0, #0
   10a5c:	f2c0 8153 	blt.w	10d06 <z_cbvprintf_impl+0x6ca>
   10a60:	4405      	add	r5, r0
			continue;
   10a62:	9f03      	ldr	r7, [sp, #12]
   10a64:	e5f2      	b.n	1064c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10a66:	f854 3b04 	ldr.w	r3, [r4], #4
   10a6a:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   10a6c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   10a70:	e7e8      	b.n	10a44 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   10a72:	2902      	cmp	r1, #2
   10a74:	d1e5      	bne.n	10a42 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   10a76:	b21a      	sxth	r2, r3
   10a78:	f343 33c0 	sbfx	r3, r3, #15, #1
   10a7c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   10a80:	e7df      	b.n	10a42 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   10a82:	2b02      	cmp	r3, #2
   10a84:	d124      	bne.n	10ad0 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   10a86:	1ecb      	subs	r3, r1, #3
   10a88:	2b04      	cmp	r3, #4
   10a8a:	d804      	bhi.n	10a96 <z_cbvprintf_impl+0x45a>
   10a8c:	e8df f003 	tbb	[pc, r3]
   10a90:	18101018 	.word	0x18101018
   10a94:	18          	.byte	0x18
   10a95:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   10a96:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   10a98:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   10a9c:	f04f 0200 	mov.w	r2, #0
   10aa0:	d014      	beq.n	10acc <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   10aa2:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   10aa4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   10aa8:	d1cc      	bne.n	10a44 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   10aaa:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   10aac:	930e      	str	r3, [sp, #56]	; 0x38
   10aae:	e7c9      	b.n	10a44 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   10ab0:	3407      	adds	r4, #7
   10ab2:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   10ab6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   10aba:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   10abe:	e7c1      	b.n	10a44 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   10ac0:	f854 3b04 	ldr.w	r3, [r4], #4
   10ac4:	930e      	str	r3, [sp, #56]	; 0x38
   10ac6:	2300      	movs	r3, #0
   10ac8:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   10aca:	e7bb      	b.n	10a44 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   10acc:	b2db      	uxtb	r3, r3
   10ace:	e7cd      	b.n	10a6c <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   10ad0:	2b04      	cmp	r3, #4
   10ad2:	d108      	bne.n	10ae6 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   10ad4:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   10ad6:	f024 0407 	bic.w	r4, r4, #7
   10ada:	e9d4 2300 	ldrd	r2, r3, [r4]
   10ade:	3408      	adds	r4, #8
   10ae0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   10ae4:	e7ae      	b.n	10a44 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   10ae6:	2b03      	cmp	r3, #3
   10ae8:	d1ac      	bne.n	10a44 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   10aea:	f854 3b04 	ldr.w	r3, [r4], #4
   10aee:	e7dd      	b.n	10aac <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   10af0:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   10af4:	2878      	cmp	r0, #120	; 0x78
   10af6:	d8b4      	bhi.n	10a62 <z_cbvprintf_impl+0x426>
   10af8:	2862      	cmp	r0, #98	; 0x62
   10afa:	d81c      	bhi.n	10b36 <z_cbvprintf_impl+0x4fa>
   10afc:	2825      	cmp	r0, #37	; 0x25
   10afe:	f43f adad 	beq.w	1065c <z_cbvprintf_impl+0x20>
   10b02:	2858      	cmp	r0, #88	; 0x58
   10b04:	d1ad      	bne.n	10a62 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   10b06:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   10b0a:	9300      	str	r3, [sp, #0]
   10b0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   10b10:	ab08      	add	r3, sp, #32
   10b12:	aa10      	add	r2, sp, #64	; 0x40
   10b14:	f003 fe56 	bl	147c4 <encode_uint>
			if (precision >= 0) {
   10b18:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   10b1c:	4607      	mov	r7, r0
			if (precision >= 0) {
   10b1e:	f280 809a 	bge.w	10c56 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   10b22:	2f00      	cmp	r7, #0
   10b24:	d09d      	beq.n	10a62 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   10b26:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   10b2a:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   10b2c:	2e00      	cmp	r6, #0
   10b2e:	f000 80c1 	beq.w	10cb4 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   10b32:	3001      	adds	r0, #1
   10b34:	e0be      	b.n	10cb4 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   10b36:	3863      	subs	r0, #99	; 0x63
   10b38:	2815      	cmp	r0, #21
   10b3a:	d892      	bhi.n	10a62 <z_cbvprintf_impl+0x426>
   10b3c:	a201      	add	r2, pc, #4	; (adr r2, 10b44 <z_cbvprintf_impl+0x508>)
   10b3e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   10b42:	bf00      	nop
   10b44:	00010c19 	.word	0x00010c19
   10b48:	00010c2b 	.word	0x00010c2b
   10b4c:	00010a63 	.word	0x00010a63
   10b50:	00010a63 	.word	0x00010a63
   10b54:	00010a63 	.word	0x00010a63
   10b58:	00010a63 	.word	0x00010a63
   10b5c:	00010c2b 	.word	0x00010c2b
   10b60:	00010a63 	.word	0x00010a63
   10b64:	00010a63 	.word	0x00010a63
   10b68:	00010a63 	.word	0x00010a63
   10b6c:	00010a63 	.word	0x00010a63
   10b70:	00010cb9 	.word	0x00010cb9
   10b74:	00010c51 	.word	0x00010c51
   10b78:	00010c77 	.word	0x00010c77
   10b7c:	00010a63 	.word	0x00010a63
   10b80:	00010a63 	.word	0x00010a63
   10b84:	00010b9d 	.word	0x00010b9d
   10b88:	00010a63 	.word	0x00010a63
   10b8c:	00010c51 	.word	0x00010c51
   10b90:	00010a63 	.word	0x00010a63
   10b94:	00010a63 	.word	0x00010a63
   10b98:	00010c51 	.word	0x00010c51
			if (precision >= 0) {
   10b9c:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   10ba0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   10ba2:	db35      	blt.n	10c10 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   10ba4:	4651      	mov	r1, sl
   10ba6:	4638      	mov	r0, r7
   10ba8:	f003 fe86 	bl	148b8 <strnlen>
			bpe = bps + len;
   10bac:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   10bb0:	2f00      	cmp	r7, #0
   10bb2:	f43f af56 	beq.w	10a62 <z_cbvprintf_impl+0x426>
		char sign = 0;
   10bb6:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   10bb8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   10bbc:	f013 0210 	ands.w	r2, r3, #16
   10bc0:	9205      	str	r2, [sp, #20]
   10bc2:	f000 8093 	beq.w	10cec <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   10bc6:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   10bc8:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   10bca:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   10bcc:	bf48      	it	mi
   10bce:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   10bd0:	9204      	str	r2, [sp, #16]
   10bd2:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   10bd4:	bf48      	it	mi
   10bd6:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   10bd8:	f1b8 0f00 	cmp.w	r8, #0
   10bdc:	f340 80a0 	ble.w	10d20 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   10be0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   10be4:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   10be8:	f3c2 0380 	ubfx	r3, r2, #2, #1
   10bec:	0750      	lsls	r0, r2, #29
   10bee:	9306      	str	r3, [sp, #24]
   10bf0:	f100 8096 	bmi.w	10d20 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   10bf4:	0651      	lsls	r1, r2, #25
   10bf6:	f140 8089 	bpl.w	10d0c <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   10bfa:	b13e      	cbz	r6, 10c0c <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   10bfc:	4659      	mov	r1, fp
   10bfe:	4630      	mov	r0, r6
   10c00:	47c8      	blx	r9
   10c02:	2800      	cmp	r0, #0
   10c04:	db7f      	blt.n	10d06 <z_cbvprintf_impl+0x6ca>
   10c06:	9b06      	ldr	r3, [sp, #24]
   10c08:	3501      	adds	r5, #1
   10c0a:	461e      	mov	r6, r3
					pad = '0';
   10c0c:	2230      	movs	r2, #48	; 0x30
   10c0e:	e07e      	b.n	10d0e <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   10c10:	4638      	mov	r0, r7
   10c12:	f003 fe4a 	bl	148aa <strlen>
   10c16:	e7c9      	b.n	10bac <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   10c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10c1a:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   10c1e:	2600      	movs	r6, #0
			bps = buf;
   10c20:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   10c22:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   10c26:	2001      	movs	r0, #1
   10c28:	e7c6      	b.n	10bb8 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   10c2a:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   10c2c:	bf5c      	itt	pl
   10c2e:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   10c32:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   10c34:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   10c38:	bf48      	it	mi
   10c3a:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   10c3c:	2b00      	cmp	r3, #0
   10c3e:	f6bf af62 	bge.w	10b06 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   10c42:	4252      	negs	r2, r2
   10c44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10c48:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   10c4c:	262d      	movs	r6, #45	; 0x2d
   10c4e:	e75a      	b.n	10b06 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   10c50:	2600      	movs	r6, #0
   10c52:	e758      	b.n	10b06 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   10c54:	2600      	movs	r6, #0
				conv->flag_zero = false;
   10c56:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   10c5a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   10c5e:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   10c60:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   10c64:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   10c66:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   10c6a:	f67f af5a 	bls.w	10b22 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   10c6e:	ebaa 0303 	sub.w	r3, sl, r3
   10c72:	9311      	str	r3, [sp, #68]	; 0x44
   10c74:	e755      	b.n	10b22 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   10c76:	980e      	ldr	r0, [sp, #56]	; 0x38
   10c78:	b390      	cbz	r0, 10ce0 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10c7a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   10c7e:	9300      	str	r3, [sp, #0]
   10c80:	aa10      	add	r2, sp, #64	; 0x40
   10c82:	ab08      	add	r3, sp, #32
   10c84:	2100      	movs	r1, #0
   10c86:	f003 fd9d 	bl	147c4 <encode_uint>
				conv->altform_0c = true;
   10c8a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   10c8e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   10c92:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   10c96:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   10c9a:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10c9e:	4607      	mov	r7, r0
				conv->altform_0c = true;
   10ca0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   10ca4:	dad6      	bge.n	10c54 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   10ca6:	2800      	cmp	r0, #0
   10ca8:	f43f aedb 	beq.w	10a62 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   10cac:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   10cb0:	1a18      	subs	r0, r3, r0
		char sign = 0;
   10cb2:	2600      	movs	r6, #0
   10cb4:	469a      	mov	sl, r3
   10cb6:	e77f      	b.n	10bb8 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   10cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   10cba:	2907      	cmp	r1, #7
   10cbc:	f63f aed1 	bhi.w	10a62 <z_cbvprintf_impl+0x426>
   10cc0:	e8df f001 	tbb	[pc, r1]
   10cc4:	0c06040c 	.word	0x0c06040c
   10cc8:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   10ccc:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   10cce:	e6c8      	b.n	10a62 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   10cd0:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   10cd2:	e6c6      	b.n	10a62 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   10cd4:	17ea      	asrs	r2, r5, #31
   10cd6:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   10cda:	e6c2      	b.n	10a62 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   10cdc:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   10cde:	e6c0      	b.n	10a62 <z_cbvprintf_impl+0x426>
   10ce0:	4f2e      	ldr	r7, [pc, #184]	; (10d9c <z_cbvprintf_impl+0x760>)
		char sign = 0;
   10ce2:	4606      	mov	r6, r0
			bpe = bps + 5;
   10ce4:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   10ce8:	2005      	movs	r0, #5
   10cea:	e765      	b.n	10bb8 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   10cec:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   10cee:	bf48      	it	mi
   10cf0:	3001      	addmi	r0, #1
   10cf2:	e769      	b.n	10bc8 <z_cbvprintf_impl+0x58c>
   10cf4:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   10cf6:	4610      	mov	r0, r2
   10cf8:	9206      	str	r2, [sp, #24]
   10cfa:	4659      	mov	r1, fp
   10cfc:	47c8      	blx	r9
   10cfe:	2800      	cmp	r0, #0
   10d00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10d04:	da04      	bge.n	10d10 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   10d06:	b015      	add	sp, #84	; 0x54
   10d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   10d0c:	2220      	movs	r2, #32
					pad = '0';
   10d0e:	4643      	mov	r3, r8
				while (width-- > 0) {
   10d10:	4619      	mov	r1, r3
   10d12:	2900      	cmp	r1, #0
   10d14:	f103 33ff 	add.w	r3, r3, #4294967295
   10d18:	dcec      	bgt.n	10cf4 <z_cbvprintf_impl+0x6b8>
   10d1a:	4445      	add	r5, r8
   10d1c:	1a6d      	subs	r5, r5, r1
   10d1e:	4698      	mov	r8, r3
		if (sign != 0) {
   10d20:	b12e      	cbz	r6, 10d2e <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   10d22:	4659      	mov	r1, fp
   10d24:	4630      	mov	r0, r6
   10d26:	47c8      	blx	r9
   10d28:	2800      	cmp	r0, #0
   10d2a:	dbec      	blt.n	10d06 <z_cbvprintf_impl+0x6ca>
   10d2c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   10d2e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   10d32:	06da      	lsls	r2, r3, #27
   10d34:	d401      	bmi.n	10d3a <z_cbvprintf_impl+0x6fe>
   10d36:	071b      	lsls	r3, r3, #28
   10d38:	d505      	bpl.n	10d46 <z_cbvprintf_impl+0x70a>
				OUTC('0');
   10d3a:	4659      	mov	r1, fp
   10d3c:	2030      	movs	r0, #48	; 0x30
   10d3e:	47c8      	blx	r9
   10d40:	2800      	cmp	r0, #0
   10d42:	dbe0      	blt.n	10d06 <z_cbvprintf_impl+0x6ca>
   10d44:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   10d46:	9b05      	ldr	r3, [sp, #20]
   10d48:	b133      	cbz	r3, 10d58 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   10d4a:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   10d4e:	4659      	mov	r1, fp
   10d50:	47c8      	blx	r9
   10d52:	2800      	cmp	r0, #0
   10d54:	dbd7      	blt.n	10d06 <z_cbvprintf_impl+0x6ca>
   10d56:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   10d58:	9e04      	ldr	r6, [sp, #16]
   10d5a:	442e      	add	r6, r5
   10d5c:	e005      	b.n	10d6a <z_cbvprintf_impl+0x72e>
				OUTC('0');
   10d5e:	4659      	mov	r1, fp
   10d60:	2030      	movs	r0, #48	; 0x30
   10d62:	47c8      	blx	r9
   10d64:	2800      	cmp	r0, #0
   10d66:	dbce      	blt.n	10d06 <z_cbvprintf_impl+0x6ca>
   10d68:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   10d6a:	1b73      	subs	r3, r6, r5
   10d6c:	2b00      	cmp	r3, #0
   10d6e:	dcf6      	bgt.n	10d5e <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   10d70:	4653      	mov	r3, sl
   10d72:	463a      	mov	r2, r7
   10d74:	4659      	mov	r1, fp
   10d76:	4648      	mov	r0, r9
   10d78:	f003 fd6a 	bl	14850 <outs>
   10d7c:	2800      	cmp	r0, #0
   10d7e:	dbc2      	blt.n	10d06 <z_cbvprintf_impl+0x6ca>
   10d80:	4405      	add	r5, r0
		while (width > 0) {
   10d82:	44a8      	add	r8, r5
   10d84:	eba8 0305 	sub.w	r3, r8, r5
   10d88:	2b00      	cmp	r3, #0
   10d8a:	f77f ae6a 	ble.w	10a62 <z_cbvprintf_impl+0x426>
			OUTC(' ');
   10d8e:	4659      	mov	r1, fp
   10d90:	2020      	movs	r0, #32
   10d92:	47c8      	blx	r9
   10d94:	2800      	cmp	r0, #0
   10d96:	dbb6      	blt.n	10d06 <z_cbvprintf_impl+0x6ca>
   10d98:	3501      	adds	r5, #1
			--width;
   10d9a:	e7f3      	b.n	10d84 <z_cbvprintf_impl+0x748>
   10d9c:	0001544a 	.word	0x0001544a

00010da0 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   10da0:	b508      	push	{r3, lr}
   10da2:	4604      	mov	r4, r0
	__asm__ volatile(
   10da4:	f04f 0220 	mov.w	r2, #32
   10da8:	f3ef 8311 	mrs	r3, BASEPRI
   10dac:	f382 8812 	msr	BASEPRI_MAX, r2
   10db0:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
   10db4:	f001 fd4a 	bl	1284c <sys_clock_disable>
	}

	sys_arch_reboot(type);
   10db8:	4620      	mov	r0, r4
   10dba:	f000 fe43 	bl	11a44 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   10dbe:	4803      	ldr	r0, [pc, #12]	; (10dcc <sys_reboot+0x2c>)
   10dc0:	f003 fc10 	bl	145e4 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   10dc4:	f000 fa30 	bl	11228 <arch_cpu_idle>
   10dc8:	e7fc      	b.n	10dc4 <sys_reboot+0x24>
   10dca:	bf00      	nop
   10dcc:	00015450 	.word	0x00015450

00010dd0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   10dd0:	f001 bd6e 	b.w	128b0 <SystemInit>

00010dd4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10dd8:	4605      	mov	r5, r0
   10dda:	f04f 0320 	mov.w	r3, #32
   10dde:	f3ef 8611 	mrs	r6, BASEPRI
   10de2:	f383 8812 	msr	BASEPRI_MAX, r3
   10de6:	f3bf 8f6f 	isb	sy
	return list->head;
   10dea:	4b0e      	ldr	r3, [pc, #56]	; (10e24 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10dec:	4f0e      	ldr	r7, [pc, #56]	; (10e28 <pm_state_notify+0x54>)
   10dee:	681c      	ldr	r4, [r3, #0]
   10df0:	f8df 8038 	ldr.w	r8, [pc, #56]	; 10e2c <pm_state_notify+0x58>
   10df4:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10df8:	b92c      	cbnz	r4, 10e06 <pm_state_notify+0x32>
	__asm__ volatile(
   10dfa:	f386 8811 	msr	BASEPRI, r6
   10dfe:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   10e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   10e06:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   10e0a:	2d00      	cmp	r5, #0
   10e0c:	bf18      	it	ne
   10e0e:	4613      	movne	r3, r2
		if (callback) {
   10e10:	b12b      	cbz	r3, 10e1e <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10e12:	f898 2010 	ldrb.w	r2, [r8, #16]
   10e16:	fb09 f202 	mul.w	r2, r9, r2
   10e1a:	5cb8      	ldrb	r0, [r7, r2]
   10e1c:	4798      	blx	r3
	return node->next;
   10e1e:	6824      	ldr	r4, [r4, #0]
   10e20:	e7ea      	b.n	10df8 <pm_state_notify+0x24>
   10e22:	bf00      	nop
   10e24:	200002c8 	.word	0x200002c8
   10e28:	200002bc 	.word	0x200002bc
   10e2c:	20000894 	.word	0x20000894

00010e30 <pm_system_resume>:

void pm_system_resume(void)
{
   10e30:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   10e32:	4b19      	ldr	r3, [pc, #100]	; (10e98 <pm_system_resume+0x68>)
   10e34:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10e36:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   10e3a:	f004 031f 	and.w	r3, r4, #31
   10e3e:	2201      	movs	r2, #1
   10e40:	409a      	lsls	r2, r3
   10e42:	4b16      	ldr	r3, [pc, #88]	; (10e9c <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10e44:	0961      	lsrs	r1, r4, #5
   10e46:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10e4a:	43d0      	mvns	r0, r2
   10e4c:	e853 1f00 	ldrex	r1, [r3]
   10e50:	ea01 0500 	and.w	r5, r1, r0
   10e54:	e843 5600 	strex	r6, r5, [r3]
   10e58:	2e00      	cmp	r6, #0
   10e5a:	d1f7      	bne.n	10e4c <pm_system_resume+0x1c>
   10e5c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   10e60:	420a      	tst	r2, r1
   10e62:	d013      	beq.n	10e8c <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   10e64:	4b0e      	ldr	r3, [pc, #56]	; (10ea0 <pm_system_resume+0x70>)
   10e66:	4d0f      	ldr	r5, [pc, #60]	; (10ea4 <pm_system_resume+0x74>)
   10e68:	b18b      	cbz	r3, 10e8e <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   10e6a:	230c      	movs	r3, #12
   10e6c:	4363      	muls	r3, r4
   10e6e:	18ea      	adds	r2, r5, r3
   10e70:	5ce8      	ldrb	r0, [r5, r3]
   10e72:	7851      	ldrb	r1, [r2, #1]
   10e74:	f003 fd4c 	bl	14910 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   10e78:	2000      	movs	r0, #0
   10e7a:	f7ff ffab 	bl	10dd4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   10e7e:	230c      	movs	r3, #12
   10e80:	435c      	muls	r4, r3
   10e82:	192a      	adds	r2, r5, r4
   10e84:	2300      	movs	r3, #0
   10e86:	512b      	str	r3, [r5, r4]
   10e88:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   10e8c:	bd70      	pop	{r4, r5, r6, pc}
   10e8e:	f383 8811 	msr	BASEPRI, r3
   10e92:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10e96:	e7ef      	b.n	10e78 <pm_system_resume+0x48>
   10e98:	20000894 	.word	0x20000894
   10e9c:	200002d0 	.word	0x200002d0
   10ea0:	00014911 	.word	0x00014911
   10ea4:	200002bc 	.word	0x200002bc

00010ea8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   10ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   10eac:	4b35      	ldr	r3, [pc, #212]	; (10f84 <pm_system_suspend+0xdc>)
{
   10eae:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   10eb0:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   10eb2:	f04f 0320 	mov.w	r3, #32
   10eb6:	f3ef 8811 	mrs	r8, BASEPRI
   10eba:	f383 8812 	msr	BASEPRI_MAX, r3
   10ebe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   10ec2:	240c      	movs	r4, #12
   10ec4:	4b30      	ldr	r3, [pc, #192]	; (10f88 <pm_system_suspend+0xe0>)
   10ec6:	4e31      	ldr	r6, [pc, #196]	; (10f8c <pm_system_suspend+0xe4>)
   10ec8:	436c      	muls	r4, r5
   10eca:	191a      	adds	r2, r3, r4
   10ecc:	5d19      	ldrb	r1, [r3, r4]
   10ece:	2900      	cmp	r1, #0
   10ed0:	d04c      	beq.n	10f6c <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   10ed2:	ca07      	ldmia	r2, {r0, r1, r2}
   10ed4:	eb06 0c04 	add.w	ip, r6, r4
   10ed8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   10edc:	2200      	movs	r2, #0
   10ede:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   10ee0:	f388 8811 	msr	BASEPRI, r8
   10ee4:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   10ee8:	230c      	movs	r3, #12
   10eea:	436b      	muls	r3, r5
   10eec:	18f2      	adds	r2, r6, r3
   10eee:	5cf0      	ldrb	r0, [r6, r3]
   10ef0:	2800      	cmp	r0, #0
   10ef2:	d039      	beq.n	10f68 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   10ef4:	1c7b      	adds	r3, r7, #1
   10ef6:	d010      	beq.n	10f1a <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   10ef8:	f8d2 c008 	ldr.w	ip, [r2, #8]
   10efc:	4c24      	ldr	r4, [pc, #144]	; (10f90 <pm_system_suspend+0xe8>)
   10efe:	4a25      	ldr	r2, [pc, #148]	; (10f94 <pm_system_suspend+0xec>)
   10f00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10f04:	2100      	movs	r1, #0
   10f06:	fbec 4100 	umlal	r4, r1, ip, r0
   10f0a:	2300      	movs	r3, #0
   10f0c:	4620      	mov	r0, r4
   10f0e:	f7ff f8f7 	bl	10100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   10f12:	2101      	movs	r1, #1
   10f14:	1a38      	subs	r0, r7, r0
   10f16:	f001 fc5d 	bl	127d4 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10f1a:	f002 fed7 	bl	13ccc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   10f1e:	2001      	movs	r0, #1
   10f20:	f7ff ff58 	bl	10dd4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10f24:	f3bf 8f5b 	dmb	ish
   10f28:	4b1b      	ldr	r3, [pc, #108]	; (10f98 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10f2a:	096a      	lsrs	r2, r5, #5
   10f2c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   10f30:	f005 011f 	and.w	r1, r5, #31
   10f34:	2201      	movs	r2, #1
   10f36:	408a      	lsls	r2, r1
   10f38:	e853 0f00 	ldrex	r0, [r3]
   10f3c:	4310      	orrs	r0, r2
   10f3e:	e843 0100 	strex	r1, r0, [r3]
   10f42:	2900      	cmp	r1, #0
   10f44:	d1f8      	bne.n	10f38 <pm_system_suspend+0x90>
   10f46:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   10f4a:	4b14      	ldr	r3, [pc, #80]	; (10f9c <pm_system_suspend+0xf4>)
   10f4c:	b13b      	cbz	r3, 10f5e <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   10f4e:	230c      	movs	r3, #12
   10f50:	fb03 f005 	mul.w	r0, r3, r5
   10f54:	1833      	adds	r3, r6, r0
   10f56:	5c30      	ldrb	r0, [r6, r0]
   10f58:	7859      	ldrb	r1, [r3, #1]
   10f5a:	f003 fccd 	bl	148f8 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   10f5e:	f7ff ff67 	bl	10e30 <pm_system_resume>
	k_sched_unlock();
   10f62:	f002 fec7 	bl	13cf4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   10f66:	2001      	movs	r0, #1
}
   10f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   10f6c:	4601      	mov	r1, r0
   10f6e:	4628      	mov	r0, r5
   10f70:	f000 f816 	bl	10fa0 <pm_policy_next_state>
		if (info != NULL) {
   10f74:	2800      	cmp	r0, #0
   10f76:	d0b3      	beq.n	10ee0 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   10f78:	c807      	ldmia	r0, {r0, r1, r2}
   10f7a:	4434      	add	r4, r6
   10f7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   10f80:	e7ae      	b.n	10ee0 <pm_system_suspend+0x38>
   10f82:	bf00      	nop
   10f84:	20000894 	.word	0x20000894
   10f88:	200002b0 	.word	0x200002b0
   10f8c:	200002bc 	.word	0x200002bc
   10f90:	000f423f 	.word	0x000f423f
   10f94:	000f4240 	.word	0x000f4240
   10f98:	200002d0 	.word	0x200002d0
   10f9c:	000148f9 	.word	0x000148f9

00010fa0 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   10fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fa4:	b085      	sub	sp, #20
   10fa6:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   10fa8:	a903      	add	r1, sp, #12
   10faa:	f000 f843 	bl	11034 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10fae:	4b1e      	ldr	r3, [pc, #120]	; (11028 <pm_policy_next_state+0x88>)
   10fb0:	9d03      	ldr	r5, [sp, #12]
   10fb2:	f8d3 a000 	ldr.w	sl, [r3]
   10fb6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1102c <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10fba:	1e43      	subs	r3, r0, #1
   10fbc:	b21b      	sxth	r3, r3
   10fbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   10fc2:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10fc4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10fc8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   10fcc:	f04f 0b00 	mov.w	fp, #0
   10fd0:	b924      	cbnz	r4, 10fdc <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   10fd2:	46a1      	mov	r9, r4
}
   10fd4:	4648      	mov	r0, r9
   10fd6:	b005      	add	sp, #20
   10fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fdc:	6868      	ldr	r0, [r5, #4]
   10fde:	4a14      	ldr	r2, [pc, #80]	; (11030 <pm_policy_next_state+0x90>)
   10fe0:	46c4      	mov	ip, r8
   10fe2:	4659      	mov	r1, fp
   10fe4:	fbe0 c107 	umlal	ip, r1, r0, r7
   10fe8:	2300      	movs	r3, #0
   10fea:	4660      	mov	r0, ip
   10fec:	f7ff f888 	bl	10100 <__aeabi_uldivmod>
   10ff0:	9001      	str	r0, [sp, #4]
   10ff2:	68a8      	ldr	r0, [r5, #8]
   10ff4:	4a0e      	ldr	r2, [pc, #56]	; (11030 <pm_policy_next_state+0x90>)
   10ff6:	46c4      	mov	ip, r8
   10ff8:	4659      	mov	r1, fp
   10ffa:	fbe0 c107 	umlal	ip, r1, r0, r7
   10ffe:	2300      	movs	r3, #0
   11000:	4660      	mov	r0, ip
   11002:	f7ff f87d 	bl	10100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   11006:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   1100a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1100c:	d001      	beq.n	11012 <pm_policy_next_state+0x72>
   1100e:	4582      	cmp	sl, r0
   11010:	d905      	bls.n	1101e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   11012:	1c73      	adds	r3, r6, #1
   11014:	d0de      	beq.n	10fd4 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   11016:	9b01      	ldr	r3, [sp, #4]
   11018:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1101a:	42b0      	cmp	r0, r6
   1101c:	d9da      	bls.n	10fd4 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1101e:	3c01      	subs	r4, #1
   11020:	b2a4      	uxth	r4, r4
   11022:	3d0c      	subs	r5, #12
   11024:	e7d4      	b.n	10fd0 <pm_policy_next_state+0x30>
   11026:	bf00      	nop
   11028:	20000004 	.word	0x20000004
   1102c:	000f423f 	.word	0x000f423f
   11030:	000f4240 	.word	0x000f4240

00011034 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   11034:	b908      	cbnz	r0, 1103a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   11036:	4b02      	ldr	r3, [pc, #8]	; (11040 <pm_state_cpu_get_all+0xc>)
   11038:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1103a:	2000      	movs	r0, #0
   1103c:	4770      	bx	lr
   1103e:	bf00      	nop
   11040:	00015258 	.word	0x00015258

00011044 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   11044:	4801      	ldr	r0, [pc, #4]	; (1104c <nrf_cc3xx_platform_abort_init+0x8>)
   11046:	f003 b923 	b.w	14290 <nrf_cc3xx_platform_set_abort>
   1104a:	bf00      	nop
   1104c:	00015258 	.word	0x00015258

00011050 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   11050:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   11052:	4604      	mov	r4, r0
   11054:	b918      	cbnz	r0, 1105e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   11056:	4b0f      	ldr	r3, [pc, #60]	; (11094 <mutex_free_platform+0x44>)
   11058:	480f      	ldr	r0, [pc, #60]	; (11098 <mutex_free_platform+0x48>)
   1105a:	685b      	ldr	r3, [r3, #4]
   1105c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1105e:	6861      	ldr	r1, [r4, #4]
   11060:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   11064:	d00f      	beq.n	11086 <mutex_free_platform+0x36>
   11066:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   1106a:	d00c      	beq.n	11086 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1106c:	4d0b      	ldr	r5, [pc, #44]	; (1109c <mutex_free_platform+0x4c>)
   1106e:	42a9      	cmp	r1, r5
   11070:	d009      	beq.n	11086 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   11072:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   11076:	d007      	beq.n	11088 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   11078:	4809      	ldr	r0, [pc, #36]	; (110a0 <mutex_free_platform+0x50>)
   1107a:	4621      	mov	r1, r4
   1107c:	f003 fe7f 	bl	14d7e <k_mem_slab_free>
        mutex->mutex = NULL;
   11080:	2300      	movs	r3, #0
   11082:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   11084:	6065      	str	r5, [r4, #4]
}
   11086:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   11088:	6820      	ldr	r0, [r4, #0]
   1108a:	2214      	movs	r2, #20
   1108c:	f003 fc28 	bl	148e0 <memset>
   11090:	e7f8      	b.n	11084 <mutex_free_platform+0x34>
   11092:	bf00      	nop
   11094:	200000b8 	.word	0x200000b8
   11098:	0001547c 	.word	0x0001547c
   1109c:	a95c5f2c 	.word	0xa95c5f2c
   110a0:	200007d4 	.word	0x200007d4

000110a4 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   110a4:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   110a6:	b320      	cbz	r0, 110f2 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   110a8:	6843      	ldr	r3, [r0, #4]
   110aa:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   110ae:	d110      	bne.n	110d2 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   110b0:	2201      	movs	r2, #1
   110b2:	6803      	ldr	r3, [r0, #0]
   110b4:	f3bf 8f5b 	dmb	ish
   110b8:	e853 1f00 	ldrex	r1, [r3]
   110bc:	2900      	cmp	r1, #0
   110be:	d103      	bne.n	110c8 <mutex_lock_platform+0x24>
   110c0:	e843 2000 	strex	r0, r2, [r3]
   110c4:	2800      	cmp	r0, #0
   110c6:	d1f7      	bne.n	110b8 <mutex_lock_platform+0x14>
   110c8:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   110cc:	d10d      	bne.n	110ea <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   110ce:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   110d0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   110d2:	4a09      	ldr	r2, [pc, #36]	; (110f8 <mutex_lock_platform+0x54>)
   110d4:	4293      	cmp	r3, r2
   110d6:	d00a      	beq.n	110ee <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   110d8:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   110da:	f04f 32ff 	mov.w	r2, #4294967295
   110de:	f04f 33ff 	mov.w	r3, #4294967295
   110e2:	f002 faed 	bl	136c0 <z_impl_k_mutex_lock>
        if (ret == 0) {
   110e6:	2800      	cmp	r0, #0
   110e8:	d0f1      	beq.n	110ce <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   110ea:	4804      	ldr	r0, [pc, #16]	; (110fc <mutex_lock_platform+0x58>)
   110ec:	e7f0      	b.n	110d0 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   110ee:	4804      	ldr	r0, [pc, #16]	; (11100 <mutex_lock_platform+0x5c>)
   110f0:	e7ee      	b.n	110d0 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   110f2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   110f6:	e7eb      	b.n	110d0 <mutex_lock_platform+0x2c>
   110f8:	a95c5f2c 	.word	0xa95c5f2c
   110fc:	ffff8fe9 	.word	0xffff8fe9
   11100:	ffff8fea 	.word	0xffff8fea

00011104 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   11104:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   11106:	b1d8      	cbz	r0, 11140 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   11108:	6843      	ldr	r3, [r0, #4]
   1110a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   1110e:	d110      	bne.n	11132 <mutex_unlock_platform+0x2e>
   11110:	2200      	movs	r2, #0
   11112:	6803      	ldr	r3, [r0, #0]
   11114:	f3bf 8f5b 	dmb	ish
   11118:	e853 1f00 	ldrex	r1, [r3]
   1111c:	2901      	cmp	r1, #1
   1111e:	d103      	bne.n	11128 <mutex_unlock_platform+0x24>
   11120:	e843 2000 	strex	r0, r2, [r3]
   11124:	2800      	cmp	r0, #0
   11126:	d1f7      	bne.n	11118 <mutex_unlock_platform+0x14>
   11128:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1112c:	d10b      	bne.n	11146 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   1112e:	2000      	movs	r0, #0
    }
}
   11130:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   11132:	4a07      	ldr	r2, [pc, #28]	; (11150 <mutex_unlock_platform+0x4c>)
   11134:	4293      	cmp	r3, r2
   11136:	d008      	beq.n	1114a <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   11138:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   1113a:	f002 fb3b 	bl	137b4 <z_impl_k_mutex_unlock>
   1113e:	e7f6      	b.n	1112e <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   11140:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   11144:	e7f4      	b.n	11130 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   11146:	4803      	ldr	r0, [pc, #12]	; (11154 <mutex_unlock_platform+0x50>)
   11148:	e7f2      	b.n	11130 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   1114a:	4803      	ldr	r0, [pc, #12]	; (11158 <mutex_unlock_platform+0x54>)
   1114c:	e7f0      	b.n	11130 <mutex_unlock_platform+0x2c>
   1114e:	bf00      	nop
   11150:	a95c5f2c 	.word	0xa95c5f2c
   11154:	ffff8fe9 	.word	0xffff8fe9
   11158:	ffff8fea 	.word	0xffff8fea

0001115c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1115c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1115e:	4604      	mov	r4, r0
   11160:	b918      	cbnz	r0, 1116a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   11162:	4b1d      	ldr	r3, [pc, #116]	; (111d8 <mutex_init_platform+0x7c>)
   11164:	481d      	ldr	r0, [pc, #116]	; (111dc <mutex_init_platform+0x80>)
   11166:	685b      	ldr	r3, [r3, #4]
   11168:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1116a:	6863      	ldr	r3, [r4, #4]
   1116c:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   11170:	d02f      	beq.n	111d2 <mutex_init_platform+0x76>
   11172:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   11176:	d02c      	beq.n	111d2 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   11178:	4a19      	ldr	r2, [pc, #100]	; (111e0 <mutex_init_platform+0x84>)
   1117a:	4293      	cmp	r3, r2
   1117c:	d119      	bne.n	111b2 <mutex_init_platform+0x56>
   1117e:	6823      	ldr	r3, [r4, #0]
   11180:	bb03      	cbnz	r3, 111c4 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   11182:	4818      	ldr	r0, [pc, #96]	; (111e4 <mutex_init_platform+0x88>)
   11184:	f04f 32ff 	mov.w	r2, #4294967295
   11188:	f04f 33ff 	mov.w	r3, #4294967295
   1118c:	4621      	mov	r1, r4
   1118e:	f002 f9bf 	bl	13510 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   11192:	b908      	cbnz	r0, 11198 <mutex_init_platform+0x3c>
   11194:	6823      	ldr	r3, [r4, #0]
   11196:	b91b      	cbnz	r3, 111a0 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   11198:	4b0f      	ldr	r3, [pc, #60]	; (111d8 <mutex_init_platform+0x7c>)
   1119a:	4813      	ldr	r0, [pc, #76]	; (111e8 <mutex_init_platform+0x8c>)
   1119c:	685b      	ldr	r3, [r3, #4]
   1119e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   111a0:	6820      	ldr	r0, [r4, #0]
   111a2:	2214      	movs	r2, #20
   111a4:	2100      	movs	r1, #0
   111a6:	f003 fb9b 	bl	148e0 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   111aa:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   111ae:	6063      	str	r3, [r4, #4]
   111b0:	e008      	b.n	111c4 <mutex_init_platform+0x68>
    switch(flags){
   111b2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   111b6:	d80d      	bhi.n	111d4 <mutex_init_platform+0x78>
   111b8:	2b3a      	cmp	r3, #58	; 0x3a
   111ba:	d003      	beq.n	111c4 <mutex_init_platform+0x68>
   111bc:	f640 62ba 	movw	r2, #3770	; 0xeba
   111c0:	4293      	cmp	r3, r2
   111c2:	d1de      	bne.n	11182 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   111c4:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   111c6:	f003 fe18 	bl	14dfa <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   111ca:	6863      	ldr	r3, [r4, #4]
   111cc:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   111d0:	6063      	str	r3, [r4, #4]
}
   111d2:	bd10      	pop	{r4, pc}
    switch(flags){
   111d4:	4a05      	ldr	r2, [pc, #20]	; (111ec <mutex_init_platform+0x90>)
   111d6:	e7f3      	b.n	111c0 <mutex_init_platform+0x64>
   111d8:	200000b8 	.word	0x200000b8
   111dc:	0001547c 	.word	0x0001547c
   111e0:	a95c5f2c 	.word	0xa95c5f2c
   111e4:	200007d4 	.word	0x200007d4
   111e8:	000154a2 	.word	0x000154a2
   111ec:	3a00003a 	.word	0x3a00003a

000111f0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   111f0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   111f2:	4906      	ldr	r1, [pc, #24]	; (1120c <nrf_cc3xx_platform_mutex_init+0x1c>)
   111f4:	4806      	ldr	r0, [pc, #24]	; (11210 <nrf_cc3xx_platform_mutex_init+0x20>)
   111f6:	2340      	movs	r3, #64	; 0x40
   111f8:	2214      	movs	r2, #20
   111fa:	f003 fdb2 	bl	14d62 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   111fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   11202:	4904      	ldr	r1, [pc, #16]	; (11214 <nrf_cc3xx_platform_mutex_init+0x24>)
   11204:	4804      	ldr	r0, [pc, #16]	; (11218 <nrf_cc3xx_platform_mutex_init+0x28>)
   11206:	f003 b8b5 	b.w	14374 <nrf_cc3xx_platform_set_mutexes>
   1120a:	bf00      	nop
   1120c:	200002d4 	.word	0x200002d4
   11210:	200007d4 	.word	0x200007d4
   11214:	00015260 	.word	0x00015260
   11218:	00015274 	.word	0x00015274

0001121c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1121c:	4901      	ldr	r1, [pc, #4]	; (11224 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1121e:	2210      	movs	r2, #16
	str	r2, [r1]
   11220:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   11222:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   11224:	e000ed10 	.word	0xe000ed10

00011228 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   11228:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1122a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1122c:	f380 8811 	msr	BASEPRI, r0
	isb
   11230:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   11234:	f3bf 8f4f 	dsb	sy
   11238:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1123a:	b662      	cpsie	i
	isb
   1123c:	f3bf 8f6f 	isb	sy

	bx	lr
   11240:	4770      	bx	lr
   11242:	bf00      	nop

00011244 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   11244:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   11246:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   11248:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   1124c:	f3bf 8f4f 	dsb	sy
   11250:	bf20      	wfe

	msr	BASEPRI, r0
   11252:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   11256:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   11258:	4770      	bx	lr
   1125a:	bf00      	nop

0001125c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1125c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1125e:	2800      	cmp	r0, #0
   11260:	db07      	blt.n	11272 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11262:	4a04      	ldr	r2, [pc, #16]	; (11274 <arch_irq_enable+0x18>)
   11264:	0941      	lsrs	r1, r0, #5
   11266:	2301      	movs	r3, #1
   11268:	f000 001f 	and.w	r0, r0, #31
   1126c:	4083      	lsls	r3, r0
   1126e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   11272:	4770      	bx	lr
   11274:	e000e100 	.word	0xe000e100

00011278 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   11278:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1127a:	2800      	cmp	r0, #0
   1127c:	db0c      	blt.n	11298 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1127e:	0943      	lsrs	r3, r0, #5
   11280:	4906      	ldr	r1, [pc, #24]	; (1129c <arch_irq_disable+0x24>)
   11282:	f000 001f 	and.w	r0, r0, #31
   11286:	3320      	adds	r3, #32
   11288:	2201      	movs	r2, #1
   1128a:	4082      	lsls	r2, r0
   1128c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   11290:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11294:	f3bf 8f6f 	isb	sy
}
   11298:	4770      	bx	lr
   1129a:	bf00      	nop
   1129c:	e000e100 	.word	0xe000e100

000112a0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   112a0:	4b05      	ldr	r3, [pc, #20]	; (112b8 <arch_irq_is_enabled+0x18>)
   112a2:	0942      	lsrs	r2, r0, #5
   112a4:	f000 001f 	and.w	r0, r0, #31
   112a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   112ac:	2301      	movs	r3, #1
   112ae:	fa03 f000 	lsl.w	r0, r3, r0
}
   112b2:	4010      	ands	r0, r2
   112b4:	4770      	bx	lr
   112b6:	bf00      	nop
   112b8:	e000e100 	.word	0xe000e100

000112bc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   112bc:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   112be:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   112c0:	bfa8      	it	ge
   112c2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   112c6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   112ca:	bfb8      	it	lt
   112cc:	4b06      	ldrlt	r3, [pc, #24]	; (112e8 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   112ce:	ea4f 1141 	mov.w	r1, r1, lsl #5
   112d2:	bfac      	ite	ge
   112d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   112d8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   112dc:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   112de:	bfb4      	ite	lt
   112e0:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   112e2:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   112e6:	4770      	bx	lr
   112e8:	e000ed14 	.word	0xe000ed14

000112ec <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   112ec:	bf30      	wfi
    b z_SysNmiOnReset
   112ee:	f7ff bffd 	b.w	112ec <z_SysNmiOnReset>
   112f2:	bf00      	nop

000112f4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   112f4:	4a0b      	ldr	r2, [pc, #44]	; (11324 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   112f6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   112f8:	4b0b      	ldr	r3, [pc, #44]	; (11328 <z_arm_prep_c+0x34>)
   112fa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   112fe:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   11300:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11304:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   11308:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1130c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   11310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   11314:	f002 f838 	bl	13388 <z_bss_zero>
	z_data_copy();
   11318:	f002 fe12 	bl	13f40 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1131c:	f000 fa20 	bl	11760 <z_arm_interrupt_init>
	z_cstart();
   11320:	f002 f876 	bl	13410 <z_cstart>
   11324:	00010000 	.word	0x00010000
   11328:	e000ed00 	.word	0xe000ed00

0001132c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1132c:	4a09      	ldr	r2, [pc, #36]	; (11354 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1132e:	490a      	ldr	r1, [pc, #40]	; (11358 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   11330:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   11332:	6809      	ldr	r1, [r1, #0]
   11334:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11336:	4909      	ldr	r1, [pc, #36]	; (1135c <arch_swap+0x30>)
	_current->arch.basepri = key;
   11338:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1133a:	684b      	ldr	r3, [r1, #4]
   1133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11340:	604b      	str	r3, [r1, #4]
   11342:	2300      	movs	r3, #0
   11344:	f383 8811 	msr	BASEPRI, r3
   11348:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1134c:	6893      	ldr	r3, [r2, #8]
}
   1134e:	6f98      	ldr	r0, [r3, #120]	; 0x78
   11350:	4770      	bx	lr
   11352:	bf00      	nop
   11354:	20000894 	.word	0x20000894
   11358:	00015370 	.word	0x00015370
   1135c:	e000ed00 	.word	0xe000ed00

00011360 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11360:	4912      	ldr	r1, [pc, #72]	; (113ac <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   11362:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   11364:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   11368:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1136a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1136e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11372:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   11374:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   11378:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1137c:	4f0c      	ldr	r7, [pc, #48]	; (113b0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1137e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   11382:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   11384:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   11386:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   11388:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
   1138a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1138c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1138e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   11392:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   11394:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   11396:	f000 fa7f 	bl	11898 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1139a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1139e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   113a2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   113a6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   113aa:	4770      	bx	lr
    ldr r1, =_kernel
   113ac:	20000894 	.word	0x20000894
    ldr v4, =_SCS_ICSR
   113b0:	e000ed04 	.word	0xe000ed04

000113b4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   113b4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   113b8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   113ba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   113be:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   113c2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   113c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   113c8:	2902      	cmp	r1, #2
    beq _oops
   113ca:	d0ff      	beq.n	113cc <_oops>

000113cc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   113cc:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   113ce:	f003 fa5d 	bl	1488c <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   113d2:	bd01      	pop	{r0, pc}

000113d4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   113d4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   113d8:	9b00      	ldr	r3, [sp, #0]
   113da:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   113de:	490a      	ldr	r1, [pc, #40]	; (11408 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   113e0:	9b01      	ldr	r3, [sp, #4]
   113e2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   113e6:	9b02      	ldr	r3, [sp, #8]
   113e8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   113ec:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   113f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   113f4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   113f8:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   113fc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   113fe:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   11400:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   11402:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11404:	4770      	bx	lr
   11406:	bf00      	nop
   11408:	000145ff 	.word	0x000145ff

0001140c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   1140c:	4a09      	ldr	r2, [pc, #36]	; (11434 <z_check_thread_stack_fail+0x28>)
{
   1140e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   11410:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   11412:	b170      	cbz	r0, 11432 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   11414:	f113 0f16 	cmn.w	r3, #22
   11418:	6e40      	ldr	r0, [r0, #100]	; 0x64
   1141a:	d005      	beq.n	11428 <z_check_thread_stack_fail+0x1c>
   1141c:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   11420:	429a      	cmp	r2, r3
   11422:	d805      	bhi.n	11430 <z_check_thread_stack_fail+0x24>
   11424:	4283      	cmp	r3, r0
   11426:	d203      	bcs.n	11430 <z_check_thread_stack_fail+0x24>
		return 0;
   11428:	4281      	cmp	r1, r0
   1142a:	bf28      	it	cs
   1142c:	2000      	movcs	r0, #0
   1142e:	4770      	bx	lr
   11430:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   11432:	4770      	bx	lr
   11434:	20000894 	.word	0x20000894

00011438 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   11438:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1143a:	4b09      	ldr	r3, [pc, #36]	; (11460 <arch_switch_to_main_thread+0x28>)
{
   1143c:	460d      	mov	r5, r1
   1143e:	4614      	mov	r4, r2
	_current = main_thread;
   11440:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   11442:	f000 fa29 	bl	11898 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11446:	4620      	mov	r0, r4
   11448:	f385 8809 	msr	PSP, r5
   1144c:	2100      	movs	r1, #0
   1144e:	b663      	cpsie	if
   11450:	f381 8811 	msr	BASEPRI, r1
   11454:	f3bf 8f6f 	isb	sy
   11458:	2200      	movs	r2, #0
   1145a:	2300      	movs	r3, #0
   1145c:	f003 f8cf 	bl	145fe <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   11460:	20000894 	.word	0x20000894

00011464 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   11464:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   11466:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   11468:	4a0b      	ldr	r2, [pc, #44]	; (11498 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1146a:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   1146c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1146e:	bf1e      	ittt	ne
	movne	r1, #0
   11470:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   11472:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   11474:	f003 fcb2 	blne	14ddc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   11478:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1147a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1147e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   11482:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   11486:	4905      	ldr	r1, [pc, #20]	; (1149c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   11488:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1148a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1148c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1148e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   11492:	4903      	ldr	r1, [pc, #12]	; (114a0 <_isr_wrapper+0x3c>)
	bx r1
   11494:	4708      	bx	r1
   11496:	0000      	.short	0x0000
	ldr r2, =_kernel
   11498:	20000894 	.word	0x20000894
	ldr r1, =_sw_isr_table
   1149c:	0001506c 	.word	0x0001506c
	ldr r1, =z_arm_int_exit
   114a0:	000114a5 	.word	0x000114a5

000114a4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   114a4:	4b04      	ldr	r3, [pc, #16]	; (114b8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   114a6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   114a8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   114aa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   114ac:	d003      	beq.n	114b6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   114ae:	4903      	ldr	r1, [pc, #12]	; (114bc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   114b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   114b4:	600a      	str	r2, [r1, #0]

000114b6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   114b6:	4770      	bx	lr
	ldr r3, =_kernel
   114b8:	20000894 	.word	0x20000894
	ldr r1, =_SCS_ICSR
   114bc:	e000ed04 	.word	0xe000ed04

000114c0 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   114c0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   114c2:	4b26      	ldr	r3, [pc, #152]	; (1155c <mem_manage_fault+0x9c>)
{
   114c4:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   114c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   114c8:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   114cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   114ce:	bf14      	ite	ne
   114d0:	2411      	movne	r4, #17
   114d2:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
   114d4:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   114d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
   114da:	bf18      	it	ne
   114dc:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   114de:	0792      	lsls	r2, r2, #30
{
   114e0:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   114e2:	d50a      	bpl.n	114fa <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   114e4:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   114e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   114e8:	0614      	lsls	r4, r2, #24
   114ea:	d534      	bpl.n	11556 <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   114ec:	b119      	cbz	r1, 114f6 <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   114ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   114f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   114f4:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   114f6:	2413      	movs	r4, #19
   114f8:	e001      	b.n	114fe <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
   114fa:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   114fe:	4b17      	ldr	r3, [pc, #92]	; (1155c <mem_manage_fault+0x9c>)
   11500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   11502:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   11508:	bf18      	it	ne
   1150a:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   1150c:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   11512:	bf18      	it	ne
   11514:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11516:	06d2      	lsls	r2, r2, #27
   11518:	d402      	bmi.n	11520 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1151c:	079b      	lsls	r3, r3, #30
   1151e:	d50a      	bpl.n	11536 <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   11520:	4b0e      	ldr	r3, [pc, #56]	; (1155c <mem_manage_fault+0x9c>)
   11522:	685b      	ldr	r3, [r3, #4]
   11524:	0519      	lsls	r1, r3, #20
   11526:	d506      	bpl.n	11536 <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   11528:	4631      	mov	r1, r6
   1152a:	f7ff ff6f 	bl	1140c <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
   1152e:	b110      	cbz	r0, 11536 <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   11530:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
   11534:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11536:	4b09      	ldr	r3, [pc, #36]	; (1155c <mem_manage_fault+0x9c>)
   11538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1153a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1153c:	bf42      	ittt	mi
   1153e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   11540:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   11544:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11548:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1154c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1154e:	2300      	movs	r3, #0
   11550:	702b      	strb	r3, [r5, #0]

	return reason;
}
   11552:	4620      	mov	r0, r4
   11554:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
   11556:	f06f 0015 	mvn.w	r0, #21
   1155a:	e7cc      	b.n	114f6 <mem_manage_fault+0x36>
   1155c:	e000ed00 	.word	0xe000ed00

00011560 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11560:	4b13      	ldr	r3, [pc, #76]	; (115b0 <usage_fault.constprop.0+0x50>)
   11562:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   11564:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   1156a:	bf14      	ite	ne
   1156c:	201e      	movne	r0, #30
   1156e:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   11570:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   11576:	bf18      	it	ne
   11578:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   1157a:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1157e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   11580:	bf18      	it	ne
   11582:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   11584:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   11588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   1158a:	bf18      	it	ne
   1158c:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   1158e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   11594:	bf18      	it	ne
   11596:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   11598:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1159c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1159e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   115a2:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   115a6:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   115a8:	bf18      	it	ne
   115aa:	2024      	movne	r0, #36	; 0x24
   115ac:	4770      	bx	lr
   115ae:	bf00      	nop
   115b0:	e000ed00 	.word	0xe000ed00

000115b4 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   115b4:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   115b6:	4b19      	ldr	r3, [pc, #100]	; (1161c <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   115b8:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   115ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   115bc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   115be:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   115c2:	bf14      	ite	ne
   115c4:	2017      	movne	r0, #23
   115c6:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
   115c8:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   115cc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
   115ce:	bf18      	it	ne
   115d0:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   115d2:	05a4      	lsls	r4, r4, #22
   115d4:	d509      	bpl.n	115ea <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
   115d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   115d8:	6a98      	ldr	r0, [r3, #40]	; 0x28
   115da:	0400      	lsls	r0, r0, #16
   115dc:	d504      	bpl.n	115e8 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
   115de:	b11a      	cbz	r2, 115e8 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   115e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   115e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   115e6:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   115e8:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   115ea:	4b0c      	ldr	r3, [pc, #48]	; (1161c <bus_fault.constprop.0+0x68>)
   115ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   115ee:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   115f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   115f4:	bf18      	it	ne
   115f6:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   115f8:	05d2      	lsls	r2, r2, #23
   115fa:	d40c      	bmi.n	11616 <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   115fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   115fe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   11602:	bf18      	it	ne
   11604:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11606:	4a05      	ldr	r2, [pc, #20]	; (1161c <bus_fault.constprop.0+0x68>)
   11608:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1160a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1160e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11610:	2300      	movs	r3, #0
   11612:	700b      	strb	r3, [r1, #0]
}
   11614:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   11616:	201b      	movs	r0, #27
   11618:	e7f5      	b.n	11606 <bus_fault.constprop.0+0x52>
   1161a:	bf00      	nop
   1161c:	e000ed00 	.word	0xe000ed00

00011620 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11620:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11622:	4b45      	ldr	r3, [pc, #276]	; (11738 <z_arm_fault+0x118>)
   11624:	685b      	ldr	r3, [r3, #4]
{
   11626:	b08a      	sub	sp, #40	; 0x28
   11628:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1162a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1162e:	2600      	movs	r6, #0
   11630:	f386 8811 	msr	BASEPRI, r6
   11634:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11638:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   1163c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   11640:	d111      	bne.n	11666 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   11642:	f002 000c 	and.w	r0, r2, #12
   11646:	2808      	cmp	r0, #8
   11648:	d00d      	beq.n	11666 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1164a:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   1164c:	bf4c      	ite	mi
   1164e:	460d      	movmi	r5, r1
			*nested_exc = true;
   11650:	2601      	movpl	r6, #1
	*recoverable = false;
   11652:	2200      	movs	r2, #0
	switch (fault) {
   11654:	3b03      	subs	r3, #3
	*recoverable = false;
   11656:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   1165a:	2b03      	cmp	r3, #3
   1165c:	d805      	bhi.n	1166a <z_arm_fault+0x4a>
   1165e:	e8df f003 	tbb	[pc, r3]
   11662:	5d1e      	.short	0x5d1e
   11664:	5a61      	.short	0x5a61
		return NULL;
   11666:	4635      	mov	r5, r6
   11668:	e7f3      	b.n	11652 <z_arm_fault+0x32>
   1166a:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1166c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11670:	b99b      	cbnz	r3, 1169a <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11672:	2220      	movs	r2, #32
   11674:	4629      	mov	r1, r5
   11676:	a802      	add	r0, sp, #8
   11678:	f003 f927 	bl	148ca <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1167c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1167e:	2e00      	cmp	r6, #0
   11680:	d054      	beq.n	1172c <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   11682:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11686:	b922      	cbnz	r2, 11692 <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11688:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1168c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11690:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   11692:	a902      	add	r1, sp, #8
   11694:	4620      	mov	r0, r4
   11696:	f003 f8f7 	bl	14888 <z_arm_fatal_error>
}
   1169a:	b00a      	add	sp, #40	; 0x28
   1169c:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1169e:	4b26      	ldr	r3, [pc, #152]	; (11738 <z_arm_fault+0x118>)
   116a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   116a2:	0791      	lsls	r1, r2, #30
   116a4:	d4e1      	bmi.n	1166a <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   116a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   116a8:	2a00      	cmp	r2, #0
   116aa:	dbde      	blt.n	1166a <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   116ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   116ae:	0052      	lsls	r2, r2, #1
   116b0:	d5db      	bpl.n	1166a <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   116b2:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   116b4:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   116b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   116ba:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   116bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   116c0:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   116c4:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   116c6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   116ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   116ce:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   116d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   116d4:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   116d8:	f64d 7202 	movw	r2, #57090	; 0xdf02
   116dc:	4291      	cmp	r1, r2
   116de:	d00a      	beq.n	116f6 <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   116e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116e2:	b2d2      	uxtb	r2, r2
   116e4:	b14a      	cbz	r2, 116fa <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
   116e6:	f10d 0207 	add.w	r2, sp, #7
   116ea:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   116ec:	4628      	mov	r0, r5
   116ee:	f7ff fee7 	bl	114c0 <mem_manage_fault>
		reason = usage_fault(esf);
   116f2:	4604      	mov	r4, r0
		break;
   116f4:	e7ba      	b.n	1166c <z_arm_fault+0x4c>
			reason = esf->basic.r0;
   116f6:	682c      	ldr	r4, [r5, #0]
   116f8:	e7b8      	b.n	1166c <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   116fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116fc:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
   11700:	d005      	beq.n	1170e <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
   11702:	f10d 0107 	add.w	r1, sp, #7
   11706:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   11708:	f7ff ff54 	bl	115b4 <bus_fault.constprop.0>
   1170c:	e7f1      	b.n	116f2 <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   11714:	d3a9      	bcc.n	1166a <z_arm_fault+0x4a>
		reason = usage_fault(esf);
   11716:	f7ff ff23 	bl	11560 <usage_fault.constprop.0>
   1171a:	e7ea      	b.n	116f2 <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
   1171c:	f10d 0207 	add.w	r2, sp, #7
   11720:	2100      	movs	r1, #0
   11722:	e7e3      	b.n	116ec <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
   11724:	f10d 0107 	add.w	r1, sp, #7
   11728:	2000      	movs	r0, #0
   1172a:	e7ed      	b.n	11708 <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1172c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11730:	f023 0301 	bic.w	r3, r3, #1
   11734:	e7ac      	b.n	11690 <z_arm_fault+0x70>
   11736:	bf00      	nop
   11738:	e000ed00 	.word	0xe000ed00

0001173c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1173c:	4a02      	ldr	r2, [pc, #8]	; (11748 <z_arm_fault_init+0xc>)
   1173e:	6953      	ldr	r3, [r2, #20]
   11740:	f043 0310 	orr.w	r3, r3, #16
   11744:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   11746:	4770      	bx	lr
   11748:	e000ed00 	.word	0xe000ed00

0001174c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1174c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11750:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11754:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11756:	4672      	mov	r2, lr
	bl z_arm_fault
   11758:	f7ff ff62 	bl	11620 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1175c:	bd01      	pop	{r0, pc}
   1175e:	bf00      	nop

00011760 <z_arm_interrupt_init>:
   11760:	4804      	ldr	r0, [pc, #16]	; (11774 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   11762:	2300      	movs	r3, #0
   11764:	2120      	movs	r1, #32
   11766:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11768:	3301      	adds	r3, #1
   1176a:	2b30      	cmp	r3, #48	; 0x30
   1176c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11770:	d1f9      	bne.n	11766 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   11772:	4770      	bx	lr
   11774:	e000e100 	.word	0xe000e100

00011778 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   11778:	2000      	movs	r0, #0
    msr CONTROL, r0
   1177a:	f380 8814 	msr	CONTROL, r0
    isb
   1177e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   11782:	f7ff fb25 	bl	10dd0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11786:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   11788:	490d      	ldr	r1, [pc, #52]	; (117c0 <__start+0x48>)
    str r0, [r1]
   1178a:	6008      	str	r0, [r1, #0]
    dsb
   1178c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11790:	480c      	ldr	r0, [pc, #48]	; (117c4 <__start+0x4c>)
    msr msp, r0
   11792:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   11796:	f000 f82b 	bl	117f0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1179a:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1179c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   117a0:	4809      	ldr	r0, [pc, #36]	; (117c8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   117a2:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   117a6:	1840      	adds	r0, r0, r1
    msr PSP, r0
   117a8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   117ac:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   117b0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   117b2:	4308      	orrs	r0, r1
    msr CONTROL, r0
   117b4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   117b8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   117bc:	f7ff fd9a 	bl	112f4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   117c0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   117c4:	20001880 	.word	0x20001880
    ldr r0, =z_interrupt_stacks
   117c8:	20000ac0 	.word	0x20000ac0

000117cc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   117cc:	4907      	ldr	r1, [pc, #28]	; (117ec <z_arm_clear_arm_mpu_config+0x20>)
   117ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   117d2:	2300      	movs	r3, #0
	int num_regions =
   117d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   117d8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   117da:	4293      	cmp	r3, r2
   117dc:	db00      	blt.n	117e0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   117de:	4770      	bx	lr
  MPU->RNR = rnr;
   117e0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   117e4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   117e8:	3301      	adds	r3, #1
   117ea:	e7f6      	b.n	117da <z_arm_clear_arm_mpu_config+0xe>
   117ec:	e000ed00 	.word	0xe000ed00

000117f0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   117f0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   117f2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   117f4:	2300      	movs	r3, #0
   117f6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   117fa:	f7ff ffe7 	bl	117cc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   117fe:	4b14      	ldr	r3, [pc, #80]	; (11850 <z_arm_init_arch_hw_at_boot+0x60>)
   11800:	f04f 32ff 	mov.w	r2, #4294967295
   11804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   11808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   1180c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   11810:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   11814:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   11818:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   1181c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   11820:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11824:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   11828:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1182c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   11830:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   11834:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   11838:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   1183c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   11840:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   11844:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   11846:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1184a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1184e:	bd08      	pop	{r3, pc}
   11850:	e000e100 	.word	0xe000e100

00011854 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   11854:	4b08      	ldr	r3, [pc, #32]	; (11878 <z_impl_k_thread_abort+0x24>)
   11856:	689b      	ldr	r3, [r3, #8]
   11858:	4283      	cmp	r3, r0
   1185a:	d10b      	bne.n	11874 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1185c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11860:	b143      	cbz	r3, 11874 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11862:	4b06      	ldr	r3, [pc, #24]	; (1187c <z_impl_k_thread_abort+0x28>)
   11864:	685a      	ldr	r2, [r3, #4]
   11866:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1186a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   1186c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1186e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   11872:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   11874:	f002 bb04 	b.w	13e80 <z_thread_abort>
   11878:	20000894 	.word	0x20000894
   1187c:	e000ed00 	.word	0xe000ed00

00011880 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11880:	4b02      	ldr	r3, [pc, #8]	; (1188c <z_arm_configure_static_mpu_regions+0xc>)
   11882:	4a03      	ldr	r2, [pc, #12]	; (11890 <z_arm_configure_static_mpu_regions+0x10>)
   11884:	4803      	ldr	r0, [pc, #12]	; (11894 <z_arm_configure_static_mpu_regions+0x14>)
   11886:	2101      	movs	r1, #1
   11888:	f000 b870 	b.w	1196c <arm_core_mpu_configure_static_mpu_regions>
   1188c:	20040000 	.word	0x20040000
   11890:	20000000 	.word	0x20000000
   11894:	00015284 	.word	0x00015284

00011898 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   11898:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   1189a:	4b05      	ldr	r3, [pc, #20]	; (118b0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   1189c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   1189e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   118a0:	4a04      	ldr	r2, [pc, #16]	; (118b4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   118a2:	2140      	movs	r1, #64	; 0x40
   118a4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   118a8:	4618      	mov	r0, r3
   118aa:	2101      	movs	r1, #1
   118ac:	f000 b868 	b.w	11980 <arm_core_mpu_configure_dynamic_mpu_regions>
   118b0:	200007f0 	.word	0x200007f0
   118b4:	150b0000 	.word	0x150b0000

000118b8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   118b8:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   118ba:	4e20      	ldr	r6, [pc, #128]	; (1193c <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   118bc:	2500      	movs	r5, #0
   118be:	428d      	cmp	r5, r1
   118c0:	da39      	bge.n	11936 <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
   118c2:	6844      	ldr	r4, [r0, #4]
   118c4:	b374      	cbz	r4, 11924 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   118c6:	b153      	cbz	r3, 118de <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   118c8:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   118cc:	ea14 0f0c 	tst.w	r4, ip
   118d0:	d12f      	bne.n	11932 <mpu_configure_regions+0x7a>
		&&
   118d2:	2c1f      	cmp	r4, #31
   118d4:	d92d      	bls.n	11932 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
   118d6:	6807      	ldr	r7, [r0, #0]
		&&
   118d8:	ea1c 0f07 	tst.w	ip, r7
   118dc:	d129      	bne.n	11932 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   118de:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   118e0:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   118e2:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   118e6:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   118ea:	d91e      	bls.n	1192a <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
   118ec:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   118f0:	d81d      	bhi.n	1192e <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   118f2:	3c01      	subs	r4, #1
   118f4:	fab4 f484 	clz	r4, r4
   118f8:	f1c4 041f 	rsb	r4, r4, #31
   118fc:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   118fe:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   11902:	ea4c 0c04 	orr.w	ip, ip, r4
   11906:	d814      	bhi.n	11932 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11908:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   1190c:	4314      	orrs	r4, r2
   1190e:	f044 0410 	orr.w	r4, r4, #16
   11912:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11916:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1191a:	f04c 0401 	orr.w	r4, ip, #1
   1191e:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   11922:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   11924:	3501      	adds	r5, #1
   11926:	300c      	adds	r0, #12
   11928:	e7c9      	b.n	118be <mpu_configure_regions+0x6>
		return REGION_32B;
   1192a:	2408      	movs	r4, #8
   1192c:	e7e7      	b.n	118fe <mpu_configure_regions+0x46>
		return REGION_4G;
   1192e:	243e      	movs	r4, #62	; 0x3e
   11930:	e7e5      	b.n	118fe <mpu_configure_regions+0x46>
			return -EINVAL;
   11932:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
   11936:	4610      	mov	r0, r2
   11938:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1193a:	bf00      	nop
   1193c:	e000ed00 	.word	0xe000ed00

00011940 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11940:	4b04      	ldr	r3, [pc, #16]	; (11954 <arm_core_mpu_enable+0x14>)
   11942:	2205      	movs	r2, #5
   11944:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   11948:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1194c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11950:	4770      	bx	lr
   11952:	bf00      	nop
   11954:	e000ed00 	.word	0xe000ed00

00011958 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   11958:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1195c:	4b02      	ldr	r3, [pc, #8]	; (11968 <arm_core_mpu_disable+0x10>)
   1195e:	2200      	movs	r2, #0
   11960:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   11964:	4770      	bx	lr
   11966:	bf00      	nop
   11968:	e000ed00 	.word	0xe000ed00

0001196c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1196c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1196e:	4c03      	ldr	r4, [pc, #12]	; (1197c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   11970:	2301      	movs	r3, #1
   11972:	7822      	ldrb	r2, [r4, #0]
   11974:	f7ff ffa0 	bl	118b8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11978:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1197a:	bd10      	pop	{r4, pc}
   1197c:	20000aa0 	.word	0x20000aa0

00011980 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   11980:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   11982:	4a09      	ldr	r2, [pc, #36]	; (119a8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   11984:	2300      	movs	r3, #0
   11986:	7812      	ldrb	r2, [r2, #0]
   11988:	f7ff ff96 	bl	118b8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   1198c:	f110 0f16 	cmn.w	r0, #22
   11990:	d002      	beq.n	11998 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
   11992:	4a06      	ldr	r2, [pc, #24]	; (119ac <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   11994:	2807      	cmp	r0, #7
   11996:	dd00      	ble.n	1199a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   11998:	bd08      	pop	{r3, pc}
   1199a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   1199e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
   119a2:	3001      	adds	r0, #1
   119a4:	e7f6      	b.n	11994 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
   119a6:	bf00      	nop
   119a8:	20000aa0 	.word	0x20000aa0
   119ac:	e000ed00 	.word	0xe000ed00

000119b0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   119b0:	4914      	ldr	r1, [pc, #80]	; (11a04 <z_arm_mpu_init+0x54>)
   119b2:	6808      	ldr	r0, [r1, #0]
   119b4:	2808      	cmp	r0, #8
{
   119b6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   119b8:	d821      	bhi.n	119fe <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   119ba:	f7ff ffcd 	bl	11958 <arm_core_mpu_disable>
   119be:	4c12      	ldr	r4, [pc, #72]	; (11a08 <z_arm_mpu_init+0x58>)
   119c0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   119c2:	2200      	movs	r2, #0
   119c4:	4290      	cmp	r0, r2
   119c6:	f101 010c 	add.w	r1, r1, #12
   119ca:	d105      	bne.n	119d8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   119cc:	4b0f      	ldr	r3, [pc, #60]	; (11a0c <z_arm_mpu_init+0x5c>)
   119ce:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   119d0:	f7ff ffb6 	bl	11940 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   119d4:	2000      	movs	r0, #0
}
   119d6:	bd10      	pop	{r4, pc}
   119d8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   119dc:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   119e0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   119e4:	4313      	orrs	r3, r2
   119e6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   119ea:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   119ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
   119f2:	f043 0301 	orr.w	r3, r3, #1
   119f6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   119fa:	3201      	adds	r2, #1
   119fc:	e7e2      	b.n	119c4 <z_arm_mpu_init+0x14>
		return -1;
   119fe:	f04f 30ff 	mov.w	r0, #4294967295
   11a02:	e7e8      	b.n	119d6 <z_arm_mpu_init+0x26>
   11a04:	00015290 	.word	0x00015290
   11a08:	e000ed00 	.word	0xe000ed00
   11a0c:	20000aa0 	.word	0x20000aa0

00011a10 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   11a10:	4b01      	ldr	r3, [pc, #4]	; (11a18 <__stdout_hook_install+0x8>)
   11a12:	6018      	str	r0, [r3, #0]
}
   11a14:	4770      	bx	lr
   11a16:	bf00      	nop
   11a18:	20000028 	.word	0x20000028

00011a1c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   11a1c:	f04f 0220 	mov.w	r2, #32
   11a20:	f3ef 8311 	mrs	r3, BASEPRI
   11a24:	f382 8812 	msr	BASEPRI_MAX, r2
   11a28:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   11a2c:	4a04      	ldr	r2, [pc, #16]	; (11a40 <nordicsemi_nrf52_init+0x24>)
   11a2e:	2101      	movs	r1, #1
   11a30:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   11a34:	f383 8811 	msr	BASEPRI, r3
   11a38:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   11a3c:	2000      	movs	r0, #0
   11a3e:	4770      	bx	lr
   11a40:	4001e000 	.word	0x4001e000

00011a44 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   11a44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11a48:	b2c0      	uxtb	r0, r0
   11a4a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   11a4e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11a52:	4905      	ldr	r1, [pc, #20]	; (11a68 <sys_arch_reboot+0x24>)
   11a54:	4b05      	ldr	r3, [pc, #20]	; (11a6c <sys_arch_reboot+0x28>)
   11a56:	68ca      	ldr	r2, [r1, #12]
   11a58:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11a5c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11a5e:	60cb      	str	r3, [r1, #12]
   11a60:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11a64:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11a66:	e7fd      	b.n	11a64 <sys_arch_reboot+0x20>
   11a68:	e000ed00 	.word	0xe000ed00
   11a6c:	05fa0004 	.word	0x05fa0004

00011a70 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   11a70:	b120      	cbz	r0, 11a7c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   11a72:	4b03      	ldr	r3, [pc, #12]	; (11a80 <arch_busy_wait+0x10>)
   11a74:	0180      	lsls	r0, r0, #6
   11a76:	f043 0301 	orr.w	r3, r3, #1
   11a7a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   11a7c:	4770      	bx	lr
   11a7e:	bf00      	nop
   11a80:	00015250 	.word	0x00015250

00011a84 <board_init>:

#include <zephyr/init.h>
#include <zephyr/drivers/gpio.h>

static int board_init(void)
{
   11a84:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   11a86:	480d      	ldr	r0, [pc, #52]	; (11abc <board_init+0x38>)
   11a88:	f003 f92b 	bl	14ce2 <z_device_is_ready>
	static const struct gpio_dt_spec pull_up =
		GPIO_DT_SPEC_GET(DT_PATH(zephyr_user), pull_up_gpios);
	static const struct gpio_dt_spec user_led =
		GPIO_DT_SPEC_GET(DT_ALIAS(led4), gpios);

	if (!device_is_ready(pull_up.port)) {
   11a8c:	b910      	cbnz	r0, 11a94 <board_init+0x10>
		return -ENODEV;
   11a8e:	f06f 0012 	mvn.w	r0, #18
	if (res) {
		return res;
	}

	return gpio_pin_configure_dt(&user_led, GPIO_OUTPUT_INACTIVE);
}
   11a92:	bd08      	pop	{r3, pc}
   11a94:	4809      	ldr	r0, [pc, #36]	; (11abc <board_init+0x38>)
   11a96:	f003 f924 	bl	14ce2 <z_device_is_ready>
	if (!device_is_ready(user_led.port)) {
   11a9a:	2800      	cmp	r0, #0
   11a9c:	d0f7      	beq.n	11a8e <board_init+0xa>
	res = gpio_pin_configure_dt(&pull_up, GPIO_OUTPUT_HIGH);
   11a9e:	4808      	ldr	r0, [pc, #32]	; (11ac0 <board_init+0x3c>)
   11aa0:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
   11aa4:	f002 ff3a 	bl	1491c <gpio_pin_configure_dt>
	if (res) {
   11aa8:	2800      	cmp	r0, #0
   11aaa:	d1f2      	bne.n	11a92 <board_init+0xe>
}
   11aac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return gpio_pin_configure_dt(&user_led, GPIO_OUTPUT_INACTIVE);
   11ab0:	4804      	ldr	r0, [pc, #16]	; (11ac4 <board_init+0x40>)
   11ab2:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
   11ab6:	f002 bf31 	b.w	1491c <gpio_pin_configure_dt>
   11aba:	bf00      	nop
   11abc:	00015024 	.word	0x00015024
   11ac0:	000152b8 	.word	0x000152b8
   11ac4:	000152b0 	.word	0x000152b0

00011ac8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   11ac8:	4b08      	ldr	r3, [pc, #32]	; (11aec <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11aca:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   11acc:	1ac3      	subs	r3, r0, r3
{
   11ace:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   11ad0:	4907      	ldr	r1, [pc, #28]	; (11af0 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   11ad2:	109b      	asrs	r3, r3, #2
{
   11ad4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   11ad6:	4359      	muls	r1, r3
   11ad8:	4806      	ldr	r0, [pc, #24]	; (11af4 <onoff_stop+0x2c>)
   11ada:	2240      	movs	r2, #64	; 0x40
   11adc:	f002 ff59 	bl	14992 <stop>
	notify(mgr, res);
   11ae0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   11ae2:	4601      	mov	r1, r0
	notify(mgr, res);
   11ae4:	4620      	mov	r0, r4
}
   11ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   11aea:	4718      	bx	r3
   11aec:	20000810 	.word	0x20000810
   11af0:	b6db6db7 	.word	0xb6db6db7
   11af4:	0001500c 	.word	0x0001500c

00011af8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11af8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   11afa:	4c0c      	ldr	r4, [pc, #48]	; (11b2c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11afc:	4a0c      	ldr	r2, [pc, #48]	; (11b30 <onoff_start+0x38>)
   11afe:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   11b00:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11b02:	9300      	str	r3, [sp, #0]
{
   11b04:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11b06:	460b      	mov	r3, r1
   11b08:	490a      	ldr	r1, [pc, #40]	; (11b34 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   11b0a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11b0c:	4361      	muls	r1, r4
{
   11b0e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11b10:	4809      	ldr	r0, [pc, #36]	; (11b38 <onoff_start+0x40>)
   11b12:	f002 ff6b 	bl	149ec <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   11b16:	1e01      	subs	r1, r0, #0
   11b18:	da05      	bge.n	11b26 <onoff_start+0x2e>
		notify(mgr, err);
   11b1a:	4630      	mov	r0, r6
   11b1c:	462b      	mov	r3, r5
	}
}
   11b1e:	b002      	add	sp, #8
   11b20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   11b24:	4718      	bx	r3
}
   11b26:	b002      	add	sp, #8
   11b28:	bd70      	pop	{r4, r5, r6, pc}
   11b2a:	bf00      	nop
   11b2c:	20000810 	.word	0x20000810
   11b30:	00014a59 	.word	0x00014a59
   11b34:	b6db6db7 	.word	0xb6db6db7
   11b38:	0001500c 	.word	0x0001500c

00011b3c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11b3c:	2200      	movs	r2, #0
{
   11b3e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11b40:	2101      	movs	r1, #1
{
   11b42:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11b44:	4610      	mov	r0, r2
   11b46:	f7ff fbb9 	bl	112bc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   11b4a:	480f      	ldr	r0, [pc, #60]	; (11b88 <clk_init+0x4c>)
   11b4c:	f001 f832 	bl	12bb4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   11b50:	4b0e      	ldr	r3, [pc, #56]	; (11b8c <clk_init+0x50>)
   11b52:	4298      	cmp	r0, r3
   11b54:	d115      	bne.n	11b82 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   11b56:	f003 f820 	bl	14b9a <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   11b5a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   11b5c:	490c      	ldr	r1, [pc, #48]	; (11b90 <clk_init+0x54>)
   11b5e:	4630      	mov	r0, r6
   11b60:	f002 fda7 	bl	146b2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   11b64:	2800      	cmp	r0, #0
   11b66:	db0b      	blt.n	11b80 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11b68:	2501      	movs	r5, #1
   11b6a:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   11b6c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   11b6e:	4908      	ldr	r1, [pc, #32]	; (11b90 <clk_init+0x54>)
   11b70:	f104 001c 	add.w	r0, r4, #28
   11b74:	f002 fd9d 	bl	146b2 <onoff_manager_init>
		if (err < 0) {
   11b78:	2800      	cmp	r0, #0
   11b7a:	db01      	blt.n	11b80 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11b7c:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   11b7e:	2000      	movs	r0, #0
}
   11b80:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   11b82:	f06f 0004 	mvn.w	r0, #4
   11b86:	e7fb      	b.n	11b80 <clk_init+0x44>
   11b88:	00011bc9 	.word	0x00011bc9
   11b8c:	0bad0000 	.word	0x0bad0000
   11b90:	000152c0 	.word	0x000152c0

00011b94 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   11b94:	b570      	push	{r4, r5, r6, lr}
   11b96:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   11b98:	230c      	movs	r3, #12
   11b9a:	4809      	ldr	r0, [pc, #36]	; (11bc0 <clkstarted_handle.constprop.0+0x2c>)
   11b9c:	434b      	muls	r3, r1
   11b9e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   11ba0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   11ba4:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   11ba6:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   11ba8:	4418      	add	r0, r3
	sub_data->cb = NULL;
   11baa:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   11bac:	f002 fede 	bl	1496c <set_on_state>
	if (callback) {
   11bb0:	b12d      	cbz	r5, 11bbe <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   11bb2:	4632      	mov	r2, r6
   11bb4:	462b      	mov	r3, r5
   11bb6:	4803      	ldr	r0, [pc, #12]	; (11bc4 <clkstarted_handle.constprop.0+0x30>)
}
   11bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   11bbc:	4718      	bx	r3
}
   11bbe:	bd70      	pop	{r4, r5, r6, pc}
   11bc0:	20000810 	.word	0x20000810
   11bc4:	0001500c 	.word	0x0001500c

00011bc8 <clock_event_handler>:
	switch (event) {
   11bc8:	b110      	cbz	r0, 11bd0 <clock_event_handler+0x8>
   11bca:	2801      	cmp	r0, #1
   11bcc:	d004      	beq.n	11bd8 <clock_event_handler+0x10>
   11bce:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   11bd0:	4b03      	ldr	r3, [pc, #12]	; (11be0 <clock_event_handler+0x18>)
   11bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   11bd4:	075b      	lsls	r3, r3, #29
   11bd6:	d101      	bne.n	11bdc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   11bd8:	f7ff bfdc 	b.w	11b94 <clkstarted_handle.constprop.0>
}
   11bdc:	4770      	bx	lr
   11bde:	bf00      	nop
   11be0:	20000810 	.word	0x20000810

00011be4 <generic_hfclk_start>:
{
   11be4:	b508      	push	{r3, lr}
	__asm__ volatile(
   11be6:	f04f 0320 	mov.w	r3, #32
   11bea:	f3ef 8111 	mrs	r1, BASEPRI
   11bee:	f383 8812 	msr	BASEPRI_MAX, r3
   11bf2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   11bf6:	4a12      	ldr	r2, [pc, #72]	; (11c40 <generic_hfclk_start+0x5c>)
   11bf8:	6813      	ldr	r3, [r2, #0]
   11bfa:	f043 0002 	orr.w	r0, r3, #2
   11bfe:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   11c00:	07da      	lsls	r2, r3, #31
   11c02:	d408      	bmi.n	11c16 <generic_hfclk_start+0x32>
	__asm__ volatile(
   11c04:	f381 8811 	msr	BASEPRI, r1
   11c08:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   11c0c:	2001      	movs	r0, #1
}
   11c0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11c12:	f002 bfcf 	b.w	14bb4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   11c16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11c1a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   11c1e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   11c22:	07d3      	lsls	r3, r2, #31
   11c24:	d5ee      	bpl.n	11c04 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   11c26:	4807      	ldr	r0, [pc, #28]	; (11c44 <generic_hfclk_start+0x60>)
   11c28:	f002 fea0 	bl	1496c <set_on_state>
   11c2c:	f381 8811 	msr	BASEPRI, r1
   11c30:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   11c34:	2000      	movs	r0, #0
}
   11c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   11c3a:	f7ff bfab 	b.w	11b94 <clkstarted_handle.constprop.0>
   11c3e:	bf00      	nop
   11c40:	20000860 	.word	0x20000860
   11c44:	20000850 	.word	0x20000850

00011c48 <api_blocking_start>:
{
   11c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11c4a:	2200      	movs	r2, #0
   11c4c:	2301      	movs	r3, #1
   11c4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11c52:	4a09      	ldr	r2, [pc, #36]	; (11c78 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11c54:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11c58:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11c5a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11c5e:	f002 fef4 	bl	14a4a <api_start>
	if (err < 0) {
   11c62:	2800      	cmp	r0, #0
   11c64:	db05      	blt.n	11c72 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   11c66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   11c6a:	2300      	movs	r3, #0
   11c6c:	4668      	mov	r0, sp
   11c6e:	f001 fdfd 	bl	1386c <z_impl_k_sem_take>
}
   11c72:	b005      	add	sp, #20
   11c74:	f85d fb04 	ldr.w	pc, [sp], #4
   11c78:	00014a77 	.word	0x00014a77

00011c7c <generic_hfclk_stop>:
{
   11c7c:	b510      	push	{r4, lr}
	__asm__ volatile(
   11c7e:	f04f 0320 	mov.w	r3, #32
   11c82:	f3ef 8411 	mrs	r4, BASEPRI
   11c86:	f383 8812 	msr	BASEPRI_MAX, r3
   11c8a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   11c8e:	4a07      	ldr	r2, [pc, #28]	; (11cac <generic_hfclk_stop+0x30>)
   11c90:	6813      	ldr	r3, [r2, #0]
   11c92:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   11c96:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   11c98:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   11c9a:	d402      	bmi.n	11ca2 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   11c9c:	2001      	movs	r0, #1
   11c9e:	f002 ffc5 	bl	14c2c <nrfx_clock_stop>
	__asm__ volatile(
   11ca2:	f384 8811 	msr	BASEPRI, r4
   11ca6:	f3bf 8f6f 	isb	sy
}
   11caa:	bd10      	pop	{r4, pc}
   11cac:	20000860 	.word	0x20000860

00011cb0 <z_nrf_clock_control_lf_on>:
{
   11cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11cb4:	4938      	ldr	r1, [pc, #224]	; (11d98 <z_nrf_clock_control_lf_on+0xe8>)
   11cb6:	f3bf 8f5b 	dmb	ish
   11cba:	4607      	mov	r7, r0
   11cbc:	2201      	movs	r2, #1
   11cbe:	e851 3f00 	ldrex	r3, [r1]
   11cc2:	e841 2000 	strex	r0, r2, [r1]
   11cc6:	2800      	cmp	r0, #0
   11cc8:	d1f9      	bne.n	11cbe <z_nrf_clock_control_lf_on+0xe>
   11cca:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   11cce:	b933      	cbnz	r3, 11cde <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   11cd0:	4932      	ldr	r1, [pc, #200]	; (11d9c <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   11cd2:	4833      	ldr	r0, [pc, #204]	; (11da0 <z_nrf_clock_control_lf_on+0xf0>)
   11cd4:	604b      	str	r3, [r1, #4]
   11cd6:	60cb      	str	r3, [r1, #12]
   11cd8:	608a      	str	r2, [r1, #8]
   11cda:	f002 fcfd 	bl	146d8 <onoff_request>
	switch (start_mode) {
   11cde:	1e7b      	subs	r3, r7, #1
   11ce0:	2b01      	cmp	r3, #1
   11ce2:	d82b      	bhi.n	11d3c <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   11ce4:	2f01      	cmp	r7, #1
   11ce6:	d107      	bne.n	11cf8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   11ce8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11cec:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   11cf0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   11cf4:	2b01      	cmp	r3, #1
   11cf6:	d021      	beq.n	11d3c <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11cf8:	f003 f86a 	bl	14dd0 <k_is_in_isr>
   11cfc:	4605      	mov	r5, r0
   11cfe:	b9f8      	cbnz	r0, 11d40 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   11d00:	4b28      	ldr	r3, [pc, #160]	; (11da4 <z_nrf_clock_control_lf_on+0xf4>)
   11d02:	781b      	ldrb	r3, [r3, #0]
   11d04:	b1e3      	cbz	r3, 11d40 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   11d06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11d0a:	2202      	movs	r2, #2
   11d0c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   11d10:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11d12:	f8df 8094 	ldr.w	r8, [pc, #148]	; 11da8 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   11d16:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   11d1a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   11d1e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   11d22:	03d2      	lsls	r2, r2, #15
   11d24:	d516      	bpl.n	11d54 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   11d26:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   11d2a:	2b01      	cmp	r3, #1
   11d2c:	d001      	beq.n	11d32 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   11d2e:	2f01      	cmp	r7, #1
   11d30:	d110      	bne.n	11d54 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   11d32:	b35d      	cbz	r5, 11d8c <z_nrf_clock_control_lf_on+0xdc>
   11d34:	f386 8811 	msr	BASEPRI, r6
   11d38:	f3bf 8f6f 	isb	sy
}
   11d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   11d40:	f04f 0320 	mov.w	r3, #32
   11d44:	f3ef 8611 	mrs	r6, BASEPRI
   11d48:	f383 8812 	msr	BASEPRI_MAX, r3
   11d4c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11d50:	2501      	movs	r5, #1
   11d52:	e7de      	b.n	11d12 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   11d54:	b1ad      	cbz	r5, 11d82 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   11d56:	4630      	mov	r0, r6
   11d58:	f7ff fa74 	bl	11244 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   11d5c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   11d60:	2b00      	cmp	r3, #0
   11d62:	d1da      	bne.n	11d1a <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   11d64:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   11d68:	2a00      	cmp	r2, #0
   11d6a:	d0d6      	beq.n	11d1a <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11d6c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   11d70:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   11d74:	2301      	movs	r3, #1
   11d76:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   11d7a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11d7e:	60a3      	str	r3, [r4, #8]
}
   11d80:	e7cb      	b.n	11d1a <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   11d82:	2100      	movs	r1, #0
   11d84:	2021      	movs	r0, #33	; 0x21
   11d86:	f002 f85b 	bl	13e40 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   11d8a:	e7e7      	b.n	11d5c <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   11d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11d90:	2202      	movs	r2, #2
   11d92:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   11d96:	e7d1      	b.n	11d3c <z_nrf_clock_control_lf_on+0x8c>
   11d98:	2000080c 	.word	0x2000080c
   11d9c:	200007fc 	.word	0x200007fc
   11da0:	2000082c 	.word	0x2000082c
   11da4:	20000aa1 	.word	0x20000aa1
   11da8:	e000e100 	.word	0xe000e100

00011dac <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   11dac:	b508      	push	{r3, lr}
   11dae:	4807      	ldr	r0, [pc, #28]	; (11dcc <uart_console_init+0x20>)
   11db0:	f002 ff97 	bl	14ce2 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   11db4:	b138      	cbz	r0, 11dc6 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   11db6:	4806      	ldr	r0, [pc, #24]	; (11dd0 <uart_console_init+0x24>)
   11db8:	f7ff fe2a 	bl	11a10 <__stdout_hook_install>
	__printk_hook_install(console_out);
   11dbc:	4804      	ldr	r0, [pc, #16]	; (11dd0 <uart_console_init+0x24>)
   11dbe:	f7fe fb1b 	bl	103f8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   11dc2:	2000      	movs	r0, #0
}
   11dc4:	bd08      	pop	{r3, pc}
		return -ENODEV;
   11dc6:	f06f 0012 	mvn.w	r0, #18
   11dca:	e7fb      	b.n	11dc4 <uart_console_init+0x18>
   11dcc:	00015054 	.word	0x00015054
   11dd0:	00011dd5 	.word	0x00011dd5

00011dd4 <console_out>:
	if ('\n' == c) {
   11dd4:	280a      	cmp	r0, #10
{
   11dd6:	b538      	push	{r3, r4, r5, lr}
   11dd8:	4d07      	ldr	r5, [pc, #28]	; (11df8 <console_out+0x24>)
   11dda:	4604      	mov	r4, r0
	if ('\n' == c) {
   11ddc:	d104      	bne.n	11de8 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   11dde:	68ab      	ldr	r3, [r5, #8]
   11de0:	210d      	movs	r1, #13
   11de2:	685b      	ldr	r3, [r3, #4]
   11de4:	4628      	mov	r0, r5
   11de6:	4798      	blx	r3
   11de8:	68ab      	ldr	r3, [r5, #8]
   11dea:	4803      	ldr	r0, [pc, #12]	; (11df8 <console_out+0x24>)
   11dec:	685b      	ldr	r3, [r3, #4]
   11dee:	b2e1      	uxtb	r1, r4
   11df0:	4798      	blx	r3
}
   11df2:	4620      	mov	r0, r4
   11df4:	bd38      	pop	{r3, r4, r5, pc}
   11df6:	bf00      	nop
   11df8:	00015054 	.word	0x00015054

00011dfc <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   11dfc:	b530      	push	{r4, r5, lr}
	return port->config;
   11dfe:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   11e00:	7b05      	ldrb	r5, [r0, #12]
   11e02:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   11e06:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   11e0a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   11e0c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   11e10:	d105      	bne.n	11e1e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   11e12:	4620      	mov	r0, r4
   11e14:	f001 f950 	bl	130b8 <nrfx_gpiote_trigger_disable>

		return 0;
   11e18:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   11e1a:	b005      	add	sp, #20
   11e1c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   11e1e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   11e20:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   11e24:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   11e28:	d114      	bne.n	11e54 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   11e2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   11e2e:	bf0c      	ite	eq
   11e30:	2304      	moveq	r3, #4
   11e32:	2305      	movne	r3, #5
   11e34:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   11e38:	2300      	movs	r3, #0
   11e3a:	4619      	mov	r1, r3
   11e3c:	aa02      	add	r2, sp, #8
   11e3e:	4620      	mov	r0, r4
   11e40:	f000 ff78 	bl	12d34 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   11e44:	4b1f      	ldr	r3, [pc, #124]	; (11ec4 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   11e46:	4298      	cmp	r0, r3
   11e48:	d139      	bne.n	11ebe <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   11e4a:	2101      	movs	r1, #1
   11e4c:	4620      	mov	r0, r4
   11e4e:	f001 f8eb 	bl	13028 <nrfx_gpiote_trigger_enable>
	return 0;
   11e52:	e7e1      	b.n	11e18 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   11e54:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   11e58:	d026      	beq.n	11ea8 <gpio_nrfx_pin_interrupt_configure+0xac>
   11e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   11e5e:	bf14      	ite	ne
   11e60:	2301      	movne	r3, #1
   11e62:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   11e64:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   11e68:	6883      	ldr	r3, [r0, #8]
   11e6a:	40cb      	lsrs	r3, r1
   11e6c:	07d9      	lsls	r1, r3, #31
   11e6e:	d4e3      	bmi.n	11e38 <gpio_nrfx_pin_interrupt_configure+0x3c>
   11e70:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   11e74:	d1e0      	bne.n	11e38 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   11e76:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   11e78:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   11e7a:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   11e7e:	4a12      	ldr	r2, [pc, #72]	; (11ec8 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   11e80:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   11e84:	bf18      	it	ne
   11e86:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   11e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   11e8e:	07db      	lsls	r3, r3, #31
   11e90:	d4d2      	bmi.n	11e38 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   11e92:	f10d 0507 	add.w	r5, sp, #7
   11e96:	4629      	mov	r1, r5
   11e98:	4620      	mov	r0, r4
   11e9a:	f001 f871 	bl	12f80 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   11e9e:	4b0b      	ldr	r3, [pc, #44]	; (11ecc <gpio_nrfx_pin_interrupt_configure+0xd0>)
   11ea0:	4298      	cmp	r0, r3
   11ea2:	d003      	beq.n	11eac <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   11ea4:	9503      	str	r5, [sp, #12]
   11ea6:	e7c7      	b.n	11e38 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   11ea8:	2303      	movs	r3, #3
   11eaa:	e7db      	b.n	11e64 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   11eac:	4628      	mov	r0, r5
   11eae:	f001 f8b5 	bl	1301c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   11eb2:	4b04      	ldr	r3, [pc, #16]	; (11ec4 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   11eb4:	4298      	cmp	r0, r3
   11eb6:	d0f5      	beq.n	11ea4 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   11eb8:	f06f 000b 	mvn.w	r0, #11
   11ebc:	e7ad      	b.n	11e1a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   11ebe:	f06f 0015 	mvn.w	r0, #21
   11ec2:	e7aa      	b.n	11e1a <gpio_nrfx_pin_interrupt_configure+0x1e>
   11ec4:	0bad0000 	.word	0x0bad0000
   11ec8:	50000300 	.word	0x50000300
   11ecc:	0bad0004 	.word	0x0bad0004

00011ed0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   11ed0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   11ed2:	f001 f893 	bl	12ffc <nrfx_gpiote_is_init>
   11ed6:	4604      	mov	r4, r0
   11ed8:	b968      	cbnz	r0, 11ef6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   11eda:	f001 f867 	bl	12fac <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   11ede:	4b08      	ldr	r3, [pc, #32]	; (11f00 <gpio_nrfx_init+0x30>)
   11ee0:	4298      	cmp	r0, r3
   11ee2:	d10a      	bne.n	11efa <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   11ee4:	4807      	ldr	r0, [pc, #28]	; (11f04 <gpio_nrfx_init+0x34>)
   11ee6:	4621      	mov	r1, r4
   11ee8:	f001 f844 	bl	12f74 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   11eec:	4622      	mov	r2, r4
   11eee:	2105      	movs	r1, #5
   11ef0:	2006      	movs	r0, #6
   11ef2:	f7ff f9e3 	bl	112bc <z_arm_irq_priority_set>
		return 0;
   11ef6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   11ef8:	bd10      	pop	{r4, pc}
		return -EIO;
   11efa:	f06f 0004 	mvn.w	r0, #4
   11efe:	e7fb      	b.n	11ef8 <gpio_nrfx_init+0x28>
   11f00:	0bad0000 	.word	0x0bad0000
   11f04:	00011f09 	.word	0x00011f09

00011f08 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   11f08:	0942      	lsrs	r2, r0, #5
{
   11f0a:	b570      	push	{r4, r5, r6, lr}
   11f0c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   11f0e:	d002      	beq.n	11f16 <nrfx_gpio_handler+0xe>
   11f10:	2a01      	cmp	r2, #1
   11f12:	d017      	beq.n	11f44 <nrfx_gpio_handler+0x3c>
}
   11f14:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   11f16:	4e0d      	ldr	r6, [pc, #52]	; (11f4c <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   11f18:	6932      	ldr	r2, [r6, #16]
   11f1a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   11f1c:	2900      	cmp	r1, #0
   11f1e:	d0f9      	beq.n	11f14 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   11f20:	f003 031f 	and.w	r3, r3, #31
   11f24:	2501      	movs	r5, #1
   11f26:	680c      	ldr	r4, [r1, #0]
   11f28:	409d      	lsls	r5, r3
   11f2a:	2900      	cmp	r1, #0
   11f2c:	d0f2      	beq.n	11f14 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   11f2e:	688a      	ldr	r2, [r1, #8]
   11f30:	402a      	ands	r2, r5
   11f32:	d002      	beq.n	11f3a <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   11f34:	684b      	ldr	r3, [r1, #4]
   11f36:	4630      	mov	r0, r6
   11f38:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   11f3a:	b12c      	cbz	r4, 11f48 <nrfx_gpio_handler+0x40>
   11f3c:	6823      	ldr	r3, [r4, #0]
   11f3e:	4621      	mov	r1, r4
   11f40:	461c      	mov	r4, r3
   11f42:	e7f2      	b.n	11f2a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   11f44:	4e02      	ldr	r6, [pc, #8]	; (11f50 <nrfx_gpio_handler+0x48>)
   11f46:	e7e7      	b.n	11f18 <nrfx_gpio_handler+0x10>
   11f48:	4623      	mov	r3, r4
   11f4a:	e7f8      	b.n	11f3e <nrfx_gpio_handler+0x36>
   11f4c:	0001503c 	.word	0x0001503c
   11f50:	00015024 	.word	0x00015024

00011f54 <gpio_nrfx_pin_configure>:
{
   11f54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   11f58:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   11f5a:	7b3b      	ldrb	r3, [r7, #12]
   11f5c:	f001 051f 	and.w	r5, r1, #31
   11f60:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   11f64:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   11f66:	4628      	mov	r0, r5
   11f68:	f10d 0103 	add.w	r1, sp, #3
{
   11f6c:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   11f6e:	f001 f807 	bl	12f80 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   11f72:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   11f76:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   11f78:	d10b      	bne.n	11f92 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   11f7a:	4628      	mov	r0, r5
   11f7c:	f001 f8c4 	bl	13108 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   11f80:	4b3d      	ldr	r3, [pc, #244]	; (12078 <gpio_nrfx_pin_configure+0x124>)
   11f82:	4598      	cmp	r8, r3
   11f84:	d103      	bne.n	11f8e <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   11f86:	f89d 0003 	ldrb.w	r0, [sp, #3]
   11f8a:	f001 f841 	bl	13010 <nrfx_gpiote_channel_free>
		return 0;
   11f8e:	2000      	movs	r0, #0
   11f90:	e00c      	b.n	11fac <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   11f92:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   11f94:	4619      	mov	r1, r3
   11f96:	aa02      	add	r2, sp, #8
   11f98:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   11f9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   11f9e:	f000 fec9 	bl	12d34 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   11fa2:	4b35      	ldr	r3, [pc, #212]	; (12078 <gpio_nrfx_pin_configure+0x124>)
   11fa4:	4298      	cmp	r0, r3
   11fa6:	d004      	beq.n	11fb2 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   11fa8:	f06f 0015 	mvn.w	r0, #21
}
   11fac:	b004      	add	sp, #16
   11fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   11fb2:	4580      	cmp	r8, r0
   11fb4:	d103      	bne.n	11fbe <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   11fb6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   11fba:	f001 f829 	bl	13010 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   11fbe:	03a3      	lsls	r3, r4, #14
   11fc0:	d54b      	bpl.n	1205a <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   11fc2:	f240 3306 	movw	r3, #774	; 0x306
   11fc6:	4023      	ands	r3, r4
   11fc8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   11fcc:	d019      	beq.n	12002 <gpio_nrfx_pin_configure+0xae>
   11fce:	d80c      	bhi.n	11fea <gpio_nrfx_pin_configure+0x96>
   11fd0:	2b06      	cmp	r3, #6
   11fd2:	d017      	beq.n	12004 <gpio_nrfx_pin_configure+0xb0>
   11fd4:	d804      	bhi.n	11fe0 <gpio_nrfx_pin_configure+0x8c>
   11fd6:	b1ab      	cbz	r3, 12004 <gpio_nrfx_pin_configure+0xb0>
   11fd8:	2b02      	cmp	r3, #2
   11fda:	d1e5      	bne.n	11fa8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   11fdc:	2304      	movs	r3, #4
   11fde:	e011      	b.n	12004 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   11fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   11fe4:	d1e0      	bne.n	11fa8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   11fe6:	2301      	movs	r3, #1
   11fe8:	e00c      	b.n	12004 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   11fea:	f240 2202 	movw	r2, #514	; 0x202
   11fee:	4293      	cmp	r3, r2
   11ff0:	d027      	beq.n	12042 <gpio_nrfx_pin_configure+0xee>
   11ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   11ff6:	d026      	beq.n	12046 <gpio_nrfx_pin_configure+0xf2>
   11ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   11ffc:	d1d4      	bne.n	11fa8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   11ffe:	2302      	movs	r3, #2
   12000:	e000      	b.n	12004 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   12002:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   12004:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   12008:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1200c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   12010:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   12012:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   12016:	bf54      	ite	pl
   12018:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1201c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1201e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   12020:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   12024:	d511      	bpl.n	1204a <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   12026:	687a      	ldr	r2, [r7, #4]
   12028:	2301      	movs	r3, #1
   1202a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1202c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   12030:	2200      	movs	r2, #0
   12032:	a901      	add	r1, sp, #4
   12034:	4628      	mov	r0, r5
   12036:	f000 ff2b 	bl	12e90 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1203a:	4b0f      	ldr	r3, [pc, #60]	; (12078 <gpio_nrfx_pin_configure+0x124>)
   1203c:	4298      	cmp	r0, r3
   1203e:	d0a6      	beq.n	11f8e <gpio_nrfx_pin_configure+0x3a>
   12040:	e7b2      	b.n	11fa8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   12042:	2305      	movs	r3, #5
   12044:	e7de      	b.n	12004 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   12046:	2303      	movs	r3, #3
   12048:	e7dc      	b.n	12004 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1204a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1204c:	bf41      	itttt	mi
   1204e:	2301      	movmi	r3, #1
   12050:	687a      	ldrmi	r2, [r7, #4]
   12052:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   12054:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   12058:	e7ea      	b.n	12030 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   1205a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1205c:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   12060:	bf54      	ite	pl
   12062:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   12066:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   12068:	461a      	mov	r2, r3
   1206a:	a901      	add	r1, sp, #4
   1206c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1206e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   12072:	f000 fe5f 	bl	12d34 <nrfx_gpiote_input_configure>
   12076:	e7e0      	b.n	1203a <gpio_nrfx_pin_configure+0xe6>
   12078:	0bad0000 	.word	0x0bad0000

0001207c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1207c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
   12080:	4e4d      	ldr	r6, [pc, #308]	; (121b8 <pinctrl_configure_pins+0x13c>)
   12082:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12086:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   12088:	4281      	cmp	r1, r0
   1208a:	d102      	bne.n	12092 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1208c:	2000      	movs	r0, #0
}
   1208e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   12092:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   12094:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   12098:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
   1209c:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1209e:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   120a2:	bf08      	it	eq
   120a4:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   120a8:	2d19      	cmp	r5, #25
   120aa:	f200 8081 	bhi.w	121b0 <pinctrl_configure_pins+0x134>
   120ae:	e8df f005 	tbb	[pc, r5]
   120b2:	1f0d      	.short	0x1f0d
   120b4:	3e2a2724 	.word	0x3e2a2724
   120b8:	7f7f7f27 	.word	0x7f7f7f27
   120bc:	7f6b427f 	.word	0x7f6b427f
   120c0:	7f7f7f7f 	.word	0x7f7f7f7f
   120c4:	7f7f7f7f 	.word	0x7f7f7f7f
   120c8:	7c79766e 	.word	0x7c79766e
			NRF_PSEL_UART(reg, TXD) = pin;
   120cc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   120d0:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
   120d4:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   120d8:	f003 051f 	and.w	r5, r3, #31
        case 1: return NRF_P1;
   120dc:	bf14      	ite	ne
   120de:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
   120e2:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   120e4:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
   120e8:	f8cc 5508 	str.w	r5, [ip, #1288]	; 0x508
   120ec:	2501      	movs	r5, #1
   120ee:	e002      	b.n	120f6 <pinctrl_configure_pins+0x7a>
			NRF_PSEL_UART(reg, RXD) = pin;
   120f0:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   120f4:	2500      	movs	r5, #0
   120f6:	46ae      	mov	lr, r5
   120f8:	e024      	b.n	12144 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_UART(reg, RTS) = pin;
   120fa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   120fe:	e7e7      	b.n	120d0 <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = pin;
   12100:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   12104:	e7f6      	b.n	120f4 <pinctrl_configure_pins+0x78>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   12106:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1210a:	2500      	movs	r5, #0
    return pin_number >> 5;
   1210c:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
   12110:	f1be 0f01 	cmp.w	lr, #1
   12114:	bf14      	ite	ne
   12116:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
   1211a:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
   1211c:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12120:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   12124:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
   12128:	f04f 0e01 	mov.w	lr, #1
   1212c:	e00a      	b.n	12144 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1212e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   12132:	2501      	movs	r5, #1
   12134:	e7ea      	b.n	1210c <pinctrl_configure_pins+0x90>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   12136:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1213a:	2c00      	cmp	r4, #0
   1213c:	d1da      	bne.n	120f4 <pinctrl_configure_pins+0x78>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1213e:	2500      	movs	r5, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   12140:	46ae      	mov	lr, r5
				drive = NRF_DRIVE_S0D1;
   12142:	2406      	movs	r4, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   12144:	f850 cb04 	ldr.w	ip, [r0], #4
   12148:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1214c:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   12150:	ea4f 2404 	mov.w	r4, r4, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   12154:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
   12158:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   1215c:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   12160:	bf1c      	itt	ne
   12162:	2501      	movne	r5, #1
   12164:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   12168:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
        case 0: return NRF_P0;
   1216c:	2b01      	cmp	r3, #1
   1216e:	bf0c      	ite	eq
   12170:	4633      	moveq	r3, r6
   12172:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   12176:	ea44 040e 	orr.w	r4, r4, lr
    reg->PIN_CNF[pin_number] = cnf;
   1217a:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1217e:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   12182:	f843 402c 	str.w	r4, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   12186:	e77f      	b.n	12088 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   12188:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1218c:	e7d5      	b.n	1213a <pinctrl_configure_pins+0xbe>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1218e:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   12192:	6805      	ldr	r5, [r0, #0]
   12194:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
   12198:	2d00      	cmp	r5, #0
   1219a:	d0ca      	beq.n	12132 <pinctrl_configure_pins+0xb6>
   1219c:	e798      	b.n	120d0 <pinctrl_configure_pins+0x54>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1219e:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   121a2:	e7f6      	b.n	12192 <pinctrl_configure_pins+0x116>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   121a4:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   121a8:	e7f3      	b.n	12192 <pinctrl_configure_pins+0x116>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   121aa:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   121ae:	e7f0      	b.n	12192 <pinctrl_configure_pins+0x116>
		switch (NRF_GET_FUN(pins[i])) {
   121b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   121b4:	e76b      	b.n	1208e <pinctrl_configure_pins+0x12>
   121b6:	bf00      	nop
   121b8:	50000300 	.word	0x50000300

000121bc <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   121bc:	4b07      	ldr	r3, [pc, #28]	; (121dc <uart_nrfx_poll_in+0x20>)
   121be:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   121c2:	b142      	cbz	r2, 121d6 <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   121c4:	2000      	movs	r0, #0
   121c6:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
   121ca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   121ce:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   121d2:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   121d4:	4770      	bx	lr
		return -1;
   121d6:	f04f 30ff 	mov.w	r0, #4294967295
}
   121da:	4770      	bx	lr
   121dc:	40002000 	.word	0x40002000

000121e0 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   121e0:	4b02      	ldr	r3, [pc, #8]	; (121ec <uart_nrfx_err_check+0xc>)
   121e2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   121e6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   121ea:	4770      	bx	lr
   121ec:	40002000 	.word	0x40002000

000121f0 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   121f0:	b530      	push	{r4, r5, lr}
	struct uart_nrfx_data *data = dev->data;
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   121f2:	794b      	ldrb	r3, [r1, #5]
   121f4:	2b01      	cmp	r3, #1
   121f6:	d022      	beq.n	1223e <uart_nrfx_configure+0x4e>
   121f8:	2b03      	cmp	r3, #3
   121fa:	d11d      	bne.n	12238 <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
   121fc:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   121fe:	798b      	ldrb	r3, [r1, #6]
   12200:	2b03      	cmp	r3, #3
   12202:	d119      	bne.n	12238 <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   12204:	79cb      	ldrb	r3, [r1, #7]
   12206:	b9bb      	cbnz	r3, 12238 <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   12208:	790a      	ldrb	r2, [r1, #4]
   1220a:	b112      	cbz	r2, 12212 <uart_nrfx_configure+0x22>
   1220c:	2a02      	cmp	r2, #2
   1220e:	d113      	bne.n	12238 <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   12210:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   12212:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   12214:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   12218:	d061      	beq.n	122de <uart_nrfx_configure+0xee>
   1221a:	d82d      	bhi.n	12278 <uart_nrfx_configure+0x88>
   1221c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   12220:	d05f      	beq.n	122e2 <uart_nrfx_configure+0xf2>
   12222:	d816      	bhi.n	12252 <uart_nrfx_configure+0x62>
   12224:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   12228:	d05d      	beq.n	122e6 <uart_nrfx_configure+0xf6>
   1222a:	d80a      	bhi.n	12242 <uart_nrfx_configure+0x52>
   1222c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   12230:	d05c      	beq.n	122ec <uart_nrfx_configure+0xfc>
   12232:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   12236:	d05c      	beq.n	122f2 <uart_nrfx_configure+0x102>
		return -ENOTSUP;
   12238:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1223c:	e04e      	b.n	122dc <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
   1223e:	2500      	movs	r5, #0
   12240:	e7dd      	b.n	121fe <uart_nrfx_configure+0xe>
	switch (baudrate) {
   12242:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   12246:	d057      	beq.n	122f8 <uart_nrfx_configure+0x108>
   12248:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1224c:	d1f4      	bne.n	12238 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1224e:	4b34      	ldr	r3, [pc, #208]	; (12320 <uart_nrfx_configure+0x130>)
   12250:	e039      	b.n	122c6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   12252:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   12256:	d052      	beq.n	122fe <uart_nrfx_configure+0x10e>
   12258:	d807      	bhi.n	1226a <uart_nrfx_configure+0x7a>
   1225a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1225e:	d050      	beq.n	12302 <uart_nrfx_configure+0x112>
   12260:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   12264:	d1e8      	bne.n	12238 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   12266:	4b2f      	ldr	r3, [pc, #188]	; (12324 <uart_nrfx_configure+0x134>)
   12268:	e02d      	b.n	122c6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1226a:	f647 2412 	movw	r4, #31250	; 0x7a12
   1226e:	42a3      	cmp	r3, r4
   12270:	d1e2      	bne.n	12238 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   12272:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   12276:	e026      	b.n	122c6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   12278:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1227c:	d044      	beq.n	12308 <uart_nrfx_configure+0x118>
   1227e:	d811      	bhi.n	122a4 <uart_nrfx_configure+0xb4>
   12280:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   12284:	d042      	beq.n	1230c <uart_nrfx_configure+0x11c>
   12286:	d808      	bhi.n	1229a <uart_nrfx_configure+0xaa>
   12288:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1228c:	42a3      	cmp	r3, r4
   1228e:	d03f      	beq.n	12310 <uart_nrfx_configure+0x120>
   12290:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   12294:	d1d0      	bne.n	12238 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   12296:	4b24      	ldr	r3, [pc, #144]	; (12328 <uart_nrfx_configure+0x138>)
   12298:	e015      	b.n	122c6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1229a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1229e:	d1cb      	bne.n	12238 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   122a0:	4b22      	ldr	r3, [pc, #136]	; (1232c <uart_nrfx_configure+0x13c>)
   122a2:	e010      	b.n	122c6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   122a4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   122a8:	d035      	beq.n	12316 <uart_nrfx_configure+0x126>
   122aa:	d807      	bhi.n	122bc <uart_nrfx_configure+0xcc>
   122ac:	4c20      	ldr	r4, [pc, #128]	; (12330 <uart_nrfx_configure+0x140>)
   122ae:	42a3      	cmp	r3, r4
   122b0:	d033      	beq.n	1231a <uart_nrfx_configure+0x12a>
   122b2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   122b6:	d1bf      	bne.n	12238 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   122b8:	4b1e      	ldr	r3, [pc, #120]	; (12334 <uart_nrfx_configure+0x144>)
   122ba:	e004      	b.n	122c6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   122bc:	4c1e      	ldr	r4, [pc, #120]	; (12338 <uart_nrfx_configure+0x148>)
   122be:	42a3      	cmp	r3, r4
   122c0:	d1ba      	bne.n	12238 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   122c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uart_nrfx_data *data = dev->data;
   122c6:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   122c8:	481c      	ldr	r0, [pc, #112]	; (1233c <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
   122ca:	432a      	orrs	r2, r5
    p_reg->BAUDRATE = baudrate;
   122cc:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   122d0:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	data->uart_config = *cfg;
   122d4:	c903      	ldmia	r1, {r0, r1}
   122d6:	e884 0003 	stmia.w	r4, {r0, r1}

	return 0;
   122da:	2000      	movs	r0, #0
}
   122dc:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   122de:	4b18      	ldr	r3, [pc, #96]	; (12340 <uart_nrfx_configure+0x150>)
   122e0:	e7f1      	b.n	122c6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   122e2:	4b18      	ldr	r3, [pc, #96]	; (12344 <uart_nrfx_configure+0x154>)
   122e4:	e7ef      	b.n	122c6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   122e6:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   122ea:	e7ec      	b.n	122c6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
   122ec:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   122f0:	e7e9      	b.n	122c6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   122f2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   122f6:	e7e6      	b.n	122c6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   122f8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   122fc:	e7e3      	b.n	122c6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   122fe:	4b12      	ldr	r3, [pc, #72]	; (12348 <uart_nrfx_configure+0x158>)
   12300:	e7e1      	b.n	122c6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   12302:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   12306:	e7de      	b.n	122c6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   12308:	4b10      	ldr	r3, [pc, #64]	; (1234c <uart_nrfx_configure+0x15c>)
   1230a:	e7dc      	b.n	122c6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1230c:	4b10      	ldr	r3, [pc, #64]	; (12350 <uart_nrfx_configure+0x160>)
   1230e:	e7da      	b.n	122c6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   12310:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   12314:	e7d7      	b.n	122c6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   12316:	4b0f      	ldr	r3, [pc, #60]	; (12354 <uart_nrfx_configure+0x164>)
   12318:	e7d5      	b.n	122c6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1231a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1231e:	e7d2      	b.n	122c6 <uart_nrfx_configure+0xd6>
   12320:	0013b000 	.word	0x0013b000
   12324:	004ea000 	.word	0x004ea000
   12328:	00ebf000 	.word	0x00ebf000
   1232c:	01d7e000 	.word	0x01d7e000
   12330:	0003d090 	.word	0x0003d090
   12334:	075f7000 	.word	0x075f7000
   12338:	000f4240 	.word	0x000f4240
   1233c:	40002000 	.word	0x40002000
   12340:	009d5000 	.word	0x009d5000
   12344:	00275000 	.word	0x00275000
   12348:	0075f000 	.word	0x0075f000
   1234c:	03afb000 	.word	0x03afb000
   12350:	013a9000 	.word	0x013a9000
   12354:	0ebed000 	.word	0x0ebed000

00012358 <uart_nrfx_poll_out>:
{
   12358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1235a:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   1235c:	f002 fd38 	bl	14dd0 <k_is_in_isr>
   12360:	4d1a      	ldr	r5, [pc, #104]	; (123cc <uart_nrfx_poll_out+0x74>)
   12362:	bb78      	cbnz	r0, 123c4 <uart_nrfx_poll_out+0x6c>
   12364:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12366:	2701      	movs	r7, #1
   12368:	f3bf 8f5b 	dmb	ish
   1236c:	e855 3f00 	ldrex	r3, [r5]
   12370:	2b00      	cmp	r3, #0
   12372:	d103      	bne.n	1237c <uart_nrfx_poll_out+0x24>
   12374:	e845 7200 	strex	r2, r7, [r5]
   12378:	2a00      	cmp	r2, #0
   1237a:	d1f7      	bne.n	1236c <uart_nrfx_poll_out+0x14>
   1237c:	f3bf 8f5b 	dmb	ish
				  (atomic_val_t) 1) == false) {
   12380:	d007      	beq.n	12392 <uart_nrfx_poll_out+0x3a>
   12382:	2021      	movs	r0, #33	; 0x21
   12384:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
   12386:	3c01      	subs	r4, #1
   12388:	f001 fd5a 	bl	13e40 <z_impl_k_sleep>
   1238c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   12390:	d1ea      	bne.n	12368 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12392:	4c0f      	ldr	r4, [pc, #60]	; (123d0 <uart_nrfx_poll_out+0x78>)
   12394:	2300      	movs	r3, #0
   12396:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1239a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1239e:	2301      	movs	r3, #1
   123a0:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
   123a2:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
   123a6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   123aa:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   123ae:	b923      	cbnz	r3, 123ba <uart_nrfx_poll_out+0x62>
   123b0:	2001      	movs	r0, #1
   123b2:	f002 fbf0 	bl	14b96 <nrfx_busy_wait>
   123b6:	3e01      	subs	r6, #1
   123b8:	d1f7      	bne.n	123aa <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   123ba:	2301      	movs	r3, #1
   123bc:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   123be:	2300      	movs	r3, #0
   123c0:	602b      	str	r3, [r5, #0]
}
   123c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   123c4:	2301      	movs	r3, #1
   123c6:	602b      	str	r3, [r5, #0]
   123c8:	e7e3      	b.n	12392 <uart_nrfx_poll_out+0x3a>
   123ca:	bf00      	nop
   123cc:	2000087c 	.word	0x2000087c
   123d0:	40002000 	.word	0x40002000

000123d4 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   123d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   123d6:	4c13      	ldr	r4, [pc, #76]	; (12424 <uart_nrfx_init+0x50>)
	const struct uart_nrfx_config *config = dev->config;
   123d8:	6843      	ldr	r3, [r0, #4]
	struct uart_nrfx_data *data = dev->data;
   123da:	6907      	ldr	r7, [r0, #16]
   123dc:	2100      	movs	r1, #0
   123de:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	int err;

	nrf_uart_disable(uart0_addr);

	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   123e2:	681e      	ldr	r6, [r3, #0]
{
   123e4:	4605      	mov	r5, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   123e6:	aa01      	add	r2, sp, #4
   123e8:	4630      	mov	r0, r6
   123ea:	f002 fb9c 	bl	14b26 <pinctrl_lookup_state>
	if (ret < 0) {
   123ee:	2800      	cmp	r0, #0
   123f0:	db15      	blt.n	1241e <uart_nrfx_init+0x4a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   123f2:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   123f4:	6832      	ldr	r2, [r6, #0]
   123f6:	7919      	ldrb	r1, [r3, #4]
   123f8:	6818      	ldr	r0, [r3, #0]
   123fa:	f7ff fe3f 	bl	1207c <pinctrl_configure_pins>
	if (err < 0) {
   123fe:	2800      	cmp	r0, #0
   12400:	db0d      	blt.n	1241e <uart_nrfx_init+0x4a>
		return err;
	}

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &data->uart_config);
   12402:	4639      	mov	r1, r7
   12404:	4628      	mov	r0, r5
   12406:	f7ff fef3 	bl	121f0 <uart_nrfx_configure>
	if (err) {
   1240a:	b940      	cbnz	r0, 1241e <uart_nrfx_init+0x4a>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1240c:	2304      	movs	r3, #4
   1240e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12412:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   12416:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1241a:	2301      	movs	r3, #1
   1241c:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   1241e:	b003      	add	sp, #12
   12420:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12422:	bf00      	nop
   12424:	40002000 	.word	0x40002000

00012428 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   12428:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1242a:	2301      	movs	r3, #1
   1242c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1242e:	4a0e      	ldr	r2, [pc, #56]	; (12468 <compare_int_lock+0x40>)
   12430:	f3bf 8f5b 	dmb	ish
   12434:	43dc      	mvns	r4, r3
   12436:	e852 1f00 	ldrex	r1, [r2]
   1243a:	ea01 0504 	and.w	r5, r1, r4
   1243e:	e842 5600 	strex	r6, r5, [r2]
   12442:	2e00      	cmp	r6, #0
   12444:	d1f7      	bne.n	12436 <compare_int_lock+0xe>
   12446:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1244a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1244e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   12450:	4806      	ldr	r0, [pc, #24]	; (1246c <compare_int_lock+0x44>)
   12452:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   12456:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1245a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1245e:	420b      	tst	r3, r1
}
   12460:	bf14      	ite	ne
   12462:	2001      	movne	r0, #1
   12464:	2000      	moveq	r0, #0
   12466:	bd70      	pop	{r4, r5, r6, pc}
   12468:	20000884 	.word	0x20000884
   1246c:	40011000 	.word	0x40011000

00012470 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   12470:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   12472:	490e      	ldr	r1, [pc, #56]	; (124ac <sys_clock_timeout_handler+0x3c>)
   12474:	e9d1 3400 	ldrd	r3, r4, [r1]
   12478:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1247a:	18c3      	adds	r3, r0, r3
   1247c:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   12480:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   12484:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   12488:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1248c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   12490:	d209      	bcs.n	124a6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   12492:	4b07      	ldr	r3, [pc, #28]	; (124b0 <sys_clock_timeout_handler+0x40>)
   12494:	681b      	ldr	r3, [r3, #0]
   12496:	0a1a      	lsrs	r2, r3, #8
   12498:	061b      	lsls	r3, r3, #24
   1249a:	199c      	adds	r4, r3, r6
   1249c:	4b05      	ldr	r3, [pc, #20]	; (124b4 <sys_clock_timeout_handler+0x44>)
   1249e:	f142 0500 	adc.w	r5, r2, #0
   124a2:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   124a6:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   124a8:	f001 be20 	b.w	140ec <sys_clock_announce>
   124ac:	20000180 	.word	0x20000180
   124b0:	20000888 	.word	0x20000888
   124b4:	20000188 	.word	0x20000188

000124b8 <compare_int_unlock>:
	if (key) {
   124b8:	b311      	cbz	r1, 12500 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   124ba:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   124be:	2301      	movs	r3, #1
   124c0:	4a10      	ldr	r2, [pc, #64]	; (12504 <compare_int_unlock+0x4c>)
   124c2:	4083      	lsls	r3, r0
   124c4:	e852 cf00 	ldrex	ip, [r2]
   124c8:	ea4c 0c03 	orr.w	ip, ip, r3
   124cc:	e842 c100 	strex	r1, ip, [r2]
   124d0:	2900      	cmp	r1, #0
   124d2:	d1f7      	bne.n	124c4 <compare_int_unlock+0xc>
   124d4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   124d8:	4a0b      	ldr	r2, [pc, #44]	; (12508 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   124da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   124de:	4083      	lsls	r3, r0
   124e0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   124e4:	4b09      	ldr	r3, [pc, #36]	; (1250c <compare_int_unlock+0x54>)
   124e6:	f3bf 8f5b 	dmb	ish
   124ea:	681b      	ldr	r3, [r3, #0]
   124ec:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   124f0:	40c3      	lsrs	r3, r0
   124f2:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   124f4:	bf42      	ittt	mi
   124f6:	4b06      	ldrmi	r3, [pc, #24]	; (12510 <compare_int_unlock+0x58>)
   124f8:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   124fc:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   12500:	4770      	bx	lr
   12502:	bf00      	nop
   12504:	20000884 	.word	0x20000884
   12508:	40011000 	.word	0x40011000
   1250c:	20000880 	.word	0x20000880
   12510:	e000e100 	.word	0xe000e100

00012514 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   12514:	4b0d      	ldr	r3, [pc, #52]	; (1254c <z_nrf_rtc_timer_read+0x38>)
   12516:	6818      	ldr	r0, [r3, #0]
   12518:	0a01      	lsrs	r1, r0, #8
   1251a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1251c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   12520:	4b0b      	ldr	r3, [pc, #44]	; (12550 <z_nrf_rtc_timer_read+0x3c>)
   12522:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   12526:	1818      	adds	r0, r3, r0
   12528:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1252c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   12530:	d20a      	bcs.n	12548 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   12532:	4b08      	ldr	r3, [pc, #32]	; (12554 <z_nrf_rtc_timer_read+0x40>)
   12534:	e9d3 2300 	ldrd	r2, r3, [r3]
   12538:	4290      	cmp	r0, r2
   1253a:	eb71 0303 	sbcs.w	r3, r1, r3
   1253e:	d203      	bcs.n	12548 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   12540:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   12544:	f141 0100 	adc.w	r1, r1, #0
}
   12548:	4770      	bx	lr
   1254a:	bf00      	nop
   1254c:	20000888 	.word	0x20000888
   12550:	40011000 	.word	0x40011000
   12554:	20000188 	.word	0x20000188

00012558 <compare_set>:
{
   12558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1255c:	4616      	mov	r6, r2
   1255e:	461f      	mov	r7, r3
   12560:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   12562:	f7ff ff61 	bl	12428 <compare_int_lock>
   12566:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   12568:	f7ff ffd4 	bl	12514 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1256c:	42b0      	cmp	r0, r6
   1256e:	eb71 0307 	sbcs.w	r3, r1, r7
   12572:	d251      	bcs.n	12618 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   12574:	4b3a      	ldr	r3, [pc, #232]	; (12660 <compare_set+0x108>)
   12576:	1a30      	subs	r0, r6, r0
   12578:	eb67 0101 	sbc.w	r1, r7, r1
   1257c:	4298      	cmp	r0, r3
   1257e:	f171 0100 	sbcs.w	r1, r1, #0
   12582:	d26a      	bcs.n	1265a <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   12584:	4b37      	ldr	r3, [pc, #220]	; (12664 <compare_set+0x10c>)
   12586:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1258a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1258e:	429f      	cmp	r7, r3
   12590:	bf08      	it	eq
   12592:	4296      	cmpeq	r6, r2
   12594:	d04e      	beq.n	12634 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   12596:	4934      	ldr	r1, [pc, #208]	; (12668 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   12598:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1259c:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   125a0:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   125a4:	00ad      	lsls	r5, r5, #2
   125a6:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   125aa:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   125ac:	b2ad      	uxth	r5, r5
   125ae:	f002 fad6 	bl	14b5e <event_clear>
	return absolute_time & COUNTER_MAX;
   125b2:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   125b6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   125ba:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   125be:	4a2b      	ldr	r2, [pc, #172]	; (1266c <compare_set+0x114>)
   125c0:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   125c2:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   125c6:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   125c8:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   125cc:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   125ce:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   125d2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   125d6:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   125da:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   125de:	f06f 0002 	mvn.w	r0, #2
   125e2:	eba0 0008 	sub.w	r0, r0, r8
   125e6:	4460      	add	r0, ip
   125e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   125ec:	4290      	cmp	r0, r2
   125ee:	d921      	bls.n	12634 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   125f0:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   125f2:	b160      	cbz	r0, 1260e <compare_set+0xb6>
     return p_reg->COUNTER;
   125f4:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   125f8:	eba8 000b 	sub.w	r0, r8, fp
   125fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   12600:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12604:	d916      	bls.n	12634 <compare_set+0xdc>
					event_clear(chan);
   12606:	4620      	mov	r0, r4
   12608:	f002 faa9 	bl	14b5e <event_clear>
   1260c:	4a17      	ldr	r2, [pc, #92]	; (1266c <compare_set+0x114>)
			cc_val = now + cc_inc;
   1260e:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   12612:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   12616:	e7d9      	b.n	125cc <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   12618:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1261a:	4a15      	ldr	r2, [pc, #84]	; (12670 <compare_set+0x118>)
   1261c:	f3bf 8f5b 	dmb	ish
   12620:	40a3      	lsls	r3, r4
   12622:	e852 0f00 	ldrex	r0, [r2]
   12626:	4318      	orrs	r0, r3
   12628:	e842 0100 	strex	r1, r0, [r2]
   1262c:	2900      	cmp	r1, #0
   1262e:	d1f8      	bne.n	12622 <compare_set+0xca>
   12630:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   12634:	490b      	ldr	r1, [pc, #44]	; (12664 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   12636:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   12638:	0123      	lsls	r3, r4, #4
   1263a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1263e:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   12642:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   12644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12646:	6053      	str	r3, [r2, #4]
	return ret;
   12648:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   1264a:	4620      	mov	r0, r4
   1264c:	9900      	ldr	r1, [sp, #0]
   1264e:	f7ff ff33 	bl	124b8 <compare_int_unlock>
}
   12652:	4628      	mov	r0, r5
   12654:	b003      	add	sp, #12
   12656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   1265a:	f06f 0515 	mvn.w	r5, #21
   1265e:	e7f4      	b.n	1264a <compare_set+0xf2>
   12660:	00800001 	.word	0x00800001
   12664:	20000170 	.word	0x20000170
   12668:	40011000 	.word	0x40011000
   1266c:	007ffffd 	.word	0x007ffffd
   12670:	20000880 	.word	0x20000880

00012674 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   12674:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   12676:	4c1b      	ldr	r4, [pc, #108]	; (126e4 <sys_clock_driver_init+0x70>)
   12678:	4b1b      	ldr	r3, [pc, #108]	; (126e8 <sys_clock_driver_init+0x74>)
   1267a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   1267e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   12682:	4b1a      	ldr	r3, [pc, #104]	; (126ec <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
   12684:	2500      	movs	r5, #0
   12686:	f04f 30ff 	mov.w	r0, #4294967295
   1268a:	f04f 31ff 	mov.w	r1, #4294967295
   1268e:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   12692:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   12696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1269a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1269e:	4b14      	ldr	r3, [pc, #80]	; (126f0 <sys_clock_driver_init+0x7c>)
   126a0:	2602      	movs	r6, #2
   126a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   126a6:	2101      	movs	r1, #1
   126a8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   126ac:	2011      	movs	r0, #17
   126ae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   126b2:	462a      	mov	r2, r5
   126b4:	f7fe fe02 	bl	112bc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   126b8:	2011      	movs	r0, #17
   126ba:	f7fe fdcf 	bl	1125c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   126be:	4a0d      	ldr	r2, [pc, #52]	; (126f4 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   126c0:	2301      	movs	r3, #1
   126c2:	60a3      	str	r3, [r4, #8]
   126c4:	6023      	str	r3, [r4, #0]
   126c6:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   126c8:	4b0b      	ldr	r3, [pc, #44]	; (126f8 <sys_clock_driver_init+0x84>)
   126ca:	4a0c      	ldr	r2, [pc, #48]	; (126fc <sys_clock_driver_init+0x88>)
   126cc:	9300      	str	r3, [sp, #0]
   126ce:	9501      	str	r5, [sp, #4]
   126d0:	2300      	movs	r3, #0
   126d2:	4628      	mov	r0, r5
   126d4:	f7ff ff40 	bl	12558 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   126d8:	4630      	mov	r0, r6
   126da:	f7ff fae9 	bl	11cb0 <z_nrf_clock_control_lf_on>

	return 0;
}
   126de:	4628      	mov	r0, r5
   126e0:	b002      	add	sp, #8
   126e2:	bd70      	pop	{r4, r5, r6, pc}
   126e4:	40011000 	.word	0x40011000
   126e8:	000f0003 	.word	0x000f0003
   126ec:	20000170 	.word	0x20000170
   126f0:	e000e100 	.word	0xe000e100
   126f4:	20000884 	.word	0x20000884
   126f8:	00012471 	.word	0x00012471
   126fc:	007fffff 	.word	0x007fffff

00012700 <rtc_nrf_isr>:
{
   12700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   12704:	4c2f      	ldr	r4, [pc, #188]	; (127c4 <rtc_nrf_isr+0xc4>)
   12706:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1270a:	0799      	lsls	r1, r3, #30
   1270c:	d50b      	bpl.n	12726 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1270e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   12712:	b143      	cbz	r3, 12726 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   12714:	4a2c      	ldr	r2, [pc, #176]	; (127c8 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12716:	2300      	movs	r3, #0
   12718:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1271c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   12720:	6813      	ldr	r3, [r2, #0]
   12722:	3301      	adds	r3, #1
   12724:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   12726:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1272a:	03da      	lsls	r2, r3, #15
   1272c:	d52a      	bpl.n	12784 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1272e:	f3bf 8f5b 	dmb	ish
   12732:	4b26      	ldr	r3, [pc, #152]	; (127cc <rtc_nrf_isr+0xcc>)
   12734:	e853 2f00 	ldrex	r2, [r3]
   12738:	f022 0101 	bic.w	r1, r2, #1
   1273c:	e843 1000 	strex	r0, r1, [r3]
   12740:	2800      	cmp	r0, #0
   12742:	d1f7      	bne.n	12734 <rtc_nrf_isr+0x34>
   12744:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   12748:	07d3      	lsls	r3, r2, #31
   1274a:	d402      	bmi.n	12752 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1274c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   12750:	b1c3      	cbz	r3, 12784 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12752:	2500      	movs	r5, #0
   12754:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   12758:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1275c:	f7ff feda 	bl	12514 <z_nrf_rtc_timer_read>
   12760:	f04f 0320 	mov.w	r3, #32
   12764:	f3ef 8211 	mrs	r2, BASEPRI
   12768:	f383 8812 	msr	BASEPRI_MAX, r3
   1276c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   12770:	4b17      	ldr	r3, [pc, #92]	; (127d0 <rtc_nrf_isr+0xd0>)
   12772:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   12776:	42b0      	cmp	r0, r6
   12778:	41b9      	sbcs	r1, r7
   1277a:	d206      	bcs.n	1278a <rtc_nrf_isr+0x8a>
	__asm__ volatile(
   1277c:	f382 8811 	msr	BASEPRI, r2
   12780:	f3bf 8f6f 	isb	sy
}
   12784:	b003      	add	sp, #12
   12786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1278a:	f04f 38ff 	mov.w	r8, #4294967295
   1278e:	f04f 39ff 	mov.w	r9, #4294967295
   12792:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   12796:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   1279a:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   1279c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   127a0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   127a4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   127a8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   127ac:	f382 8811 	msr	BASEPRI, r2
   127b0:	f3bf 8f6f 	isb	sy
		if (handler) {
   127b4:	2900      	cmp	r1, #0
   127b6:	d0e5      	beq.n	12784 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
   127b8:	9000      	str	r0, [sp, #0]
   127ba:	4632      	mov	r2, r6
   127bc:	463b      	mov	r3, r7
   127be:	4628      	mov	r0, r5
   127c0:	4788      	blx	r1
   127c2:	e7df      	b.n	12784 <rtc_nrf_isr+0x84>
   127c4:	40011000 	.word	0x40011000
   127c8:	20000888 	.word	0x20000888
   127cc:	20000880 	.word	0x20000880
   127d0:	20000170 	.word	0x20000170

000127d4 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   127d4:	1c43      	adds	r3, r0, #1
{
   127d6:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   127d8:	d022      	beq.n	12820 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   127da:	2801      	cmp	r0, #1
   127dc:	dd22      	ble.n	12824 <sys_clock_set_timeout+0x50>
   127de:	4a12      	ldr	r2, [pc, #72]	; (12828 <sys_clock_set_timeout+0x54>)
   127e0:	4b12      	ldr	r3, [pc, #72]	; (1282c <sys_clock_set_timeout+0x58>)
   127e2:	4290      	cmp	r0, r2
   127e4:	bfd4      	ite	le
   127e6:	4604      	movle	r4, r0
   127e8:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   127ea:	f7ff fe93 	bl	12514 <z_nrf_rtc_timer_read>
   127ee:	4b10      	ldr	r3, [pc, #64]	; (12830 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   127f0:	490e      	ldr	r1, [pc, #56]	; (1282c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   127f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   127f6:	1a80      	subs	r0, r0, r2
		cyc = 0;
   127f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   127fc:	bf28      	it	cs
   127fe:	2400      	movcs	r4, #0
	cyc += unannounced;
   12800:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   12802:	428c      	cmp	r4, r1
   12804:	bf28      	it	cs
   12806:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   12808:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1280a:	490a      	ldr	r1, [pc, #40]	; (12834 <sys_clock_set_timeout+0x60>)
   1280c:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1280e:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   12812:	9001      	str	r0, [sp, #4]
   12814:	f143 0300 	adc.w	r3, r3, #0
   12818:	f7ff fe9e 	bl	12558 <compare_set>
}
   1281c:	b002      	add	sp, #8
   1281e:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   12820:	4c02      	ldr	r4, [pc, #8]	; (1282c <sys_clock_set_timeout+0x58>)
   12822:	e7e2      	b.n	127ea <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   12824:	2401      	movs	r4, #1
   12826:	e7e0      	b.n	127ea <sys_clock_set_timeout+0x16>
   12828:	007ffffe 	.word	0x007ffffe
   1282c:	007fffff 	.word	0x007fffff
   12830:	20000180 	.word	0x20000180
   12834:	00012471 	.word	0x00012471

00012838 <sys_clock_elapsed>:
{
   12838:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1283a:	f7ff fe6b 	bl	12514 <z_nrf_rtc_timer_read>
   1283e:	4b02      	ldr	r3, [pc, #8]	; (12848 <sys_clock_elapsed+0x10>)
   12840:	681b      	ldr	r3, [r3, #0]
}
   12842:	1ac0      	subs	r0, r0, r3
   12844:	bd08      	pop	{r3, pc}
   12846:	bf00      	nop
   12848:	20000180 	.word	0x20000180

0001284c <sys_clock_disable>:
{
   1284c:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1284e:	4c08      	ldr	r4, [pc, #32]	; (12870 <sys_clock_disable+0x24>)
   12850:	2301      	movs	r3, #1
   12852:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
   12854:	2011      	movs	r0, #17
   12856:	f7fe fd0f 	bl	11278 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1285a:	4b06      	ldr	r3, [pc, #24]	; (12874 <sys_clock_disable+0x28>)
   1285c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   12860:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   12864:	4b04      	ldr	r3, [pc, #16]	; (12878 <sys_clock_disable+0x2c>)
   12866:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1286a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1286e:	bd10      	pop	{r4, pc}
   12870:	40011000 	.word	0x40011000
   12874:	000f0003 	.word	0x000f0003
   12878:	e000e100 	.word	0xe000e100

0001287c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1287c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   12880:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   12884:	2a08      	cmp	r2, #8
   12886:	d106      	bne.n	12896 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   12888:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1288c:	2b05      	cmp	r3, #5
   1288e:	d802      	bhi.n	12896 <nrf52_errata_103+0x1a>
   12890:	4a02      	ldr	r2, [pc, #8]	; (1289c <nrf52_errata_103+0x20>)
   12892:	5cd0      	ldrb	r0, [r2, r3]
   12894:	4770      	bx	lr
                {
                    case 0x00ul:
                        return true;
                    case 0x01ul:
                        return false;
   12896:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
   12898:	4770      	bx	lr
   1289a:	bf00      	nop
   1289c:	0001553f 	.word	0x0001553f

000128a0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   128a0:	4a02      	ldr	r2, [pc, #8]	; (128ac <nvmc_wait+0xc>)
   128a2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   128a6:	2b00      	cmp	r3, #0
   128a8:	d0fb      	beq.n	128a2 <nvmc_wait+0x2>
}
   128aa:	4770      	bx	lr
   128ac:	4001e000 	.word	0x4001e000

000128b0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   128b0:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   128b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   128b6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   128ba:	2a08      	cmp	r2, #8
   128bc:	d14e      	bne.n	1295c <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   128be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   128c2:	2100      	movs	r1, #0
   128c4:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   128c8:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   128cc:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   128d0:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   128d4:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   128d8:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   128dc:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   128e0:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   128e4:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   128e8:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   128ec:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   128f0:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   128f4:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   128f8:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   128fc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   12900:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   12904:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   12908:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1290c:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   12910:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   12914:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   12918:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1291c:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   12920:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   12924:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   12928:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1292c:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   12930:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   12934:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   12938:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1293c:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   12940:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   12944:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   12948:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1294c:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   12950:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   12954:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   12958:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1295c:	f7ff ff8e 	bl	1287c <nrf52_errata_103>
   12960:	b118      	cbz	r0, 1296a <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   12962:	4b3a      	ldr	r3, [pc, #232]	; (12a4c <SystemInit+0x19c>)
   12964:	4a3a      	ldr	r2, [pc, #232]	; (12a50 <SystemInit+0x1a0>)
   12966:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1296a:	f7ff ff87 	bl	1287c <nrf52_errata_103>
   1296e:	b118      	cbz	r0, 12978 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   12970:	4b38      	ldr	r3, [pc, #224]	; (12a54 <SystemInit+0x1a4>)
   12972:	22fb      	movs	r2, #251	; 0xfb
   12974:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   12978:	f7ff ff80 	bl	1287c <nrf52_errata_103>
   1297c:	b170      	cbz	r0, 1299c <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1297e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12982:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12986:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1298a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1298e:	f022 020f 	bic.w	r2, r2, #15
   12992:	f003 030f 	and.w	r3, r3, #15
   12996:	4313      	orrs	r3, r2
   12998:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1299c:	f7ff ff6e 	bl	1287c <nrf52_errata_103>
   129a0:	b120      	cbz	r0, 129ac <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   129a2:	4b2d      	ldr	r3, [pc, #180]	; (12a58 <SystemInit+0x1a8>)
   129a4:	f44f 7200 	mov.w	r2, #512	; 0x200
   129a8:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   129ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   129b0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   129b4:	2b08      	cmp	r3, #8
   129b6:	d11a      	bne.n	129ee <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   129b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   129bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   129c0:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   129c2:	bf44      	itt	mi
   129c4:	f06f 0201 	mvnmi.w	r2, #1
   129c8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   129cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   129d0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   129d4:	2b05      	cmp	r3, #5
   129d6:	d802      	bhi.n	129de <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   129d8:	4a20      	ldr	r2, [pc, #128]	; (12a5c <SystemInit+0x1ac>)
   129da:	5cd3      	ldrb	r3, [r2, r3]
   129dc:	b13b      	cbz	r3, 129ee <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   129de:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   129e2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   129e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   129ea:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   129ee:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   129f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   129f6:	2a00      	cmp	r2, #0
   129f8:	db03      	blt.n	12a02 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   129fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   129fe:	2b00      	cmp	r3, #0
   12a00:	da22      	bge.n	12a48 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   12a02:	4917      	ldr	r1, [pc, #92]	; (12a60 <SystemInit+0x1b0>)
   12a04:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   12a06:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   12a0a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   12a0e:	2412      	movs	r4, #18
    nvmc_wait();
   12a10:	f7ff ff46 	bl	128a0 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   12a14:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   12a18:	f7ff ff42 	bl	128a0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   12a1c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   12a20:	f7ff ff3e 	bl	128a0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   12a24:	2300      	movs	r3, #0
   12a26:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   12a2a:	f7ff ff39 	bl	128a0 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   12a2e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12a32:	490c      	ldr	r1, [pc, #48]	; (12a64 <SystemInit+0x1b4>)
   12a34:	4b0c      	ldr	r3, [pc, #48]	; (12a68 <SystemInit+0x1b8>)
   12a36:	68ca      	ldr	r2, [r1, #12]
   12a38:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12a3c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12a3e:	60cb      	str	r3, [r1, #12]
   12a40:	f3bf 8f4f 	dsb	sy
    __NOP();
   12a44:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12a46:	e7fd      	b.n	12a44 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   12a48:	bd10      	pop	{r4, pc}
   12a4a:	bf00      	nop
   12a4c:	40005000 	.word	0x40005000
   12a50:	00038148 	.word	0x00038148
   12a54:	4000f000 	.word	0x4000f000
   12a58:	40029000 	.word	0x40029000
   12a5c:	00015539 	.word	0x00015539
   12a60:	4001e000 	.word	0x4001e000
   12a64:	e000ed00 	.word	0xe000ed00
   12a68:	05fa0004 	.word	0x05fa0004

00012a6c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   12a6c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   12a6e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   12a70:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12a72:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   12a76:	fab2 f382 	clz	r3, r2
   12a7a:	f1c3 031f 	rsb	r3, r3, #31
   12a7e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   12a80:	fa05 f403 	lsl.w	r4, r5, r3
   12a84:	ea22 0404 	bic.w	r4, r2, r4
   12a88:	e850 6f00 	ldrex	r6, [r0]
   12a8c:	4296      	cmp	r6, r2
   12a8e:	d104      	bne.n	12a9a <nrfx_flag32_alloc+0x2e>
   12a90:	e840 4c00 	strex	ip, r4, [r0]
   12a94:	f1bc 0f00 	cmp.w	ip, #0
   12a98:	d1f6      	bne.n	12a88 <nrfx_flag32_alloc+0x1c>
   12a9a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   12a9e:	d1e7      	bne.n	12a70 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   12aa0:	4801      	ldr	r0, [pc, #4]	; (12aa8 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   12aa2:	700b      	strb	r3, [r1, #0]
}
   12aa4:	bd70      	pop	{r4, r5, r6, pc}
   12aa6:	bf00      	nop
   12aa8:	0bad0000 	.word	0x0bad0000

00012aac <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   12aac:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   12aae:	6803      	ldr	r3, [r0, #0]
   12ab0:	40cb      	lsrs	r3, r1
   12ab2:	07db      	lsls	r3, r3, #31
   12ab4:	d414      	bmi.n	12ae0 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   12ab6:	2301      	movs	r3, #1
   12ab8:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   12aba:	6802      	ldr	r2, [r0, #0]
   12abc:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   12ac0:	ea43 0102 	orr.w	r1, r3, r2
   12ac4:	e850 4f00 	ldrex	r4, [r0]
   12ac8:	4294      	cmp	r4, r2
   12aca:	d104      	bne.n	12ad6 <nrfx_flag32_free+0x2a>
   12acc:	e840 1c00 	strex	ip, r1, [r0]
   12ad0:	f1bc 0f00 	cmp.w	ip, #0
   12ad4:	d1f6      	bne.n	12ac4 <nrfx_flag32_free+0x18>
   12ad6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   12ada:	d1ee      	bne.n	12aba <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   12adc:	4801      	ldr	r0, [pc, #4]	; (12ae4 <nrfx_flag32_free+0x38>)
}
   12ade:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   12ae0:	4801      	ldr	r0, [pc, #4]	; (12ae8 <nrfx_flag32_free+0x3c>)
   12ae2:	e7fc      	b.n	12ade <nrfx_flag32_free+0x32>
   12ae4:	0bad0000 	.word	0x0bad0000
   12ae8:	0bad0004 	.word	0x0bad0004

00012aec <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   12aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   12aee:	4604      	mov	r4, r0
   12af0:	b118      	cbz	r0, 12afa <clock_stop+0xe>
   12af2:	2801      	cmp	r0, #1
   12af4:	d022      	beq.n	12b3c <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   12af6:	b003      	add	sp, #12
   12af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   12afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12afe:	2202      	movs	r2, #2
   12b00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12b04:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   12b08:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12b0c:	2201      	movs	r2, #1
   12b0e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   12b10:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   12b12:	2301      	movs	r3, #1
   12b14:	f88d 3007 	strb.w	r3, [sp, #7]
   12b18:	f242 7510 	movw	r5, #10000	; 0x2710
   12b1c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
   12b20:	b1cc      	cbz	r4, 12b56 <clock_stop+0x6a>
   12b22:	2c01      	cmp	r4, #1
   12b24:	d1e7      	bne.n	12af6 <clock_stop+0xa>
            if (p_clk_src != NULL)
   12b26:	b3c7      	cbz	r7, 12b9a <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   12b28:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   12b2c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   12b30:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   12b32:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   12b36:	03da      	lsls	r2, r3, #15
   12b38:	d521      	bpl.n	12b7e <clock_stop+0x92>
   12b3a:	e016      	b.n	12b6a <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
   12b3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12b40:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   12b42:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12b46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   12b4a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12b4e:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   12b50:	f10d 0707 	add.w	r7, sp, #7
   12b54:	e7dd      	b.n	12b12 <clock_stop+0x26>
            if (p_clk_src != NULL)
   12b56:	b1b7      	cbz	r7, 12b86 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12b58:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   12b5c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   12b60:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12b62:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   12b66:	03d8      	lsls	r0, r3, #15
   12b68:	d5c5      	bpl.n	12af6 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   12b6a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12b6e:	2801      	cmp	r0, #1
   12b70:	d103      	bne.n	12b7a <clock_stop+0x8e>
   12b72:	f002 f810 	bl	14b96 <nrfx_busy_wait>
   12b76:	3d01      	subs	r5, #1
   12b78:	d1d2      	bne.n	12b20 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   12b7a:	2c01      	cmp	r4, #1
   12b7c:	d1bb      	bne.n	12af6 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
   12b7e:	4b0c      	ldr	r3, [pc, #48]	; (12bb0 <clock_stop+0xc4>)
   12b80:	2200      	movs	r2, #0
   12b82:	715a      	strb	r2, [r3, #5]
   12b84:	e7b7      	b.n	12af6 <clock_stop+0xa>
   12b86:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   12b8a:	03d9      	lsls	r1, r3, #15
   12b8c:	d5b3      	bpl.n	12af6 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   12b8e:	2001      	movs	r0, #1
   12b90:	f002 f801 	bl	14b96 <nrfx_busy_wait>
   12b94:	3d01      	subs	r5, #1
   12b96:	d1f6      	bne.n	12b86 <clock_stop+0x9a>
   12b98:	e7ad      	b.n	12af6 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   12b9a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   12b9e:	03db      	lsls	r3, r3, #15
   12ba0:	d5ed      	bpl.n	12b7e <clock_stop+0x92>
   12ba2:	2001      	movs	r0, #1
   12ba4:	f001 fff7 	bl	14b96 <nrfx_busy_wait>
   12ba8:	3d01      	subs	r5, #1
   12baa:	d1f6      	bne.n	12b9a <clock_stop+0xae>
   12bac:	e7e7      	b.n	12b7e <clock_stop+0x92>
   12bae:	bf00      	nop
   12bb0:	2000088c 	.word	0x2000088c

00012bb4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   12bb4:	4b04      	ldr	r3, [pc, #16]	; (12bc8 <nrfx_clock_init+0x14>)
   12bb6:	791a      	ldrb	r2, [r3, #4]
   12bb8:	b922      	cbnz	r2, 12bc4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   12bba:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   12bbc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   12bbe:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   12bc0:	4802      	ldr	r0, [pc, #8]	; (12bcc <nrfx_clock_init+0x18>)
   12bc2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   12bc4:	4802      	ldr	r0, [pc, #8]	; (12bd0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   12bc6:	4770      	bx	lr
   12bc8:	2000088c 	.word	0x2000088c
   12bcc:	0bad0000 	.word	0x0bad0000
   12bd0:	0bad000c 	.word	0x0bad000c

00012bd4 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   12bd4:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12bda:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   12bde:	b16a      	cbz	r2, 12bfc <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12be0:	2200      	movs	r2, #0
   12be2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   12be6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   12bea:	2201      	movs	r2, #1
   12bec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   12bf0:	4b11      	ldr	r3, [pc, #68]	; (12c38 <nrfx_power_clock_irq_handler+0x64>)
   12bf2:	7958      	ldrb	r0, [r3, #5]
   12bf4:	b910      	cbnz	r0, 12bfc <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   12bf6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   12bf8:	681b      	ldr	r3, [r3, #0]
   12bfa:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12bfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12c00:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   12c04:	b172      	cbz	r2, 12c24 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12c06:	2200      	movs	r2, #0
   12c08:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   12c0c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12c10:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12c14:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   12c18:	0792      	lsls	r2, r2, #30
   12c1a:	d104      	bne.n	12c26 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   12c1c:	2201      	movs	r2, #1
   12c1e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12c22:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   12c24:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   12c26:	2202      	movs	r2, #2
   12c28:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   12c2c:	4b02      	ldr	r3, [pc, #8]	; (12c38 <nrfx_power_clock_irq_handler+0x64>)
}
   12c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   12c32:	681b      	ldr	r3, [r3, #0]
   12c34:	2001      	movs	r0, #1
   12c36:	4718      	bx	r3
   12c38:	2000088c 	.word	0x2000088c

00012c3c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   12c3c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   12c3e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   12c42:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   12c44:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   12c46:	6002      	str	r2, [r0, #0]
}
   12c48:	4802      	ldr	r0, [pc, #8]	; (12c54 <nrf_gpio_pin_port_decode+0x18>)
   12c4a:	bf18      	it	ne
   12c4c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   12c50:	4770      	bx	lr
   12c52:	bf00      	nop
   12c54:	50000300 	.word	0x50000300

00012c58 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   12c58:	4b03      	ldr	r3, [pc, #12]	; (12c68 <pin_in_use_by_te+0x10>)
   12c5a:	3008      	adds	r0, #8
   12c5c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   12c60:	f3c0 1040 	ubfx	r0, r0, #5, #1
   12c64:	4770      	bx	lr
   12c66:	bf00      	nop
   12c68:	20000034 	.word	0x20000034

00012c6c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   12c6c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   12c6e:	f100 0308 	add.w	r3, r0, #8
   12c72:	4c0c      	ldr	r4, [pc, #48]	; (12ca4 <call_handler+0x38>)
   12c74:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   12c78:	05da      	lsls	r2, r3, #23
{
   12c7a:	4605      	mov	r5, r0
   12c7c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   12c7e:	d507      	bpl.n	12c90 <call_handler+0x24>
   12c80:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   12c84:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   12c88:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   12c8c:	6852      	ldr	r2, [r2, #4]
   12c8e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   12c90:	68a3      	ldr	r3, [r4, #8]
   12c92:	b12b      	cbz	r3, 12ca0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   12c94:	68e2      	ldr	r2, [r4, #12]
   12c96:	4631      	mov	r1, r6
   12c98:	4628      	mov	r0, r5
    }
}
   12c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   12c9e:	4718      	bx	r3
}
   12ca0:	bd70      	pop	{r4, r5, r6, pc}
   12ca2:	bf00      	nop
   12ca4:	20000034 	.word	0x20000034

00012ca8 <release_handler>:
{
   12ca8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   12caa:	4a12      	ldr	r2, [pc, #72]	; (12cf4 <release_handler+0x4c>)
   12cac:	3008      	adds	r0, #8
   12cae:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   12cb2:	05d9      	lsls	r1, r3, #23
   12cb4:	d51b      	bpl.n	12cee <release_handler+0x46>
   12cb6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   12cba:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   12cbe:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   12cc2:	f102 040e 	add.w	r4, r2, #14
   12cc6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   12cc8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   12ccc:	f413 7f80 	tst.w	r3, #256	; 0x100
   12cd0:	d003      	beq.n	12cda <release_handler+0x32>
   12cd2:	f3c3 2343 	ubfx	r3, r3, #9, #4
   12cd6:	4299      	cmp	r1, r3
   12cd8:	d009      	beq.n	12cee <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   12cda:	3001      	adds	r0, #1
   12cdc:	2830      	cmp	r0, #48	; 0x30
   12cde:	d1f3      	bne.n	12cc8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   12ce0:	2300      	movs	r3, #0
   12ce2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   12ce6:	4804      	ldr	r0, [pc, #16]	; (12cf8 <release_handler+0x50>)
}
   12ce8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   12cea:	f7ff bedf 	b.w	12aac <nrfx_flag32_free>
}
   12cee:	bc10      	pop	{r4}
   12cf0:	4770      	bx	lr
   12cf2:	bf00      	nop
   12cf4:	20000034 	.word	0x20000034
   12cf8:	200000a8 	.word	0x200000a8

00012cfc <pin_handler_trigger_uninit>:
{
   12cfc:	b538      	push	{r3, r4, r5, lr}
   12cfe:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   12d00:	f7ff ffaa 	bl	12c58 <pin_in_use_by_te>
   12d04:	4c09      	ldr	r4, [pc, #36]	; (12d2c <pin_handler_trigger_uninit+0x30>)
   12d06:	f102 0508 	add.w	r5, r2, #8
   12d0a:	b140      	cbz	r0, 12d1e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   12d0c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   12d10:	4907      	ldr	r1, [pc, #28]	; (12d30 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   12d12:	0b5b      	lsrs	r3, r3, #13
   12d14:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   12d18:	2000      	movs	r0, #0
   12d1a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   12d1e:	4610      	mov	r0, r2
   12d20:	f7ff ffc2 	bl	12ca8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   12d24:	2300      	movs	r3, #0
   12d26:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   12d2a:	bd38      	pop	{r3, r4, r5, pc}
   12d2c:	20000034 	.word	0x20000034
   12d30:	40006000 	.word	0x40006000

00012d34 <nrfx_gpiote_input_configure>:
{
   12d34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12d38:	4604      	mov	r4, r0
   12d3a:	4616      	mov	r6, r2
   12d3c:	461d      	mov	r5, r3
    if (p_input_config)
   12d3e:	b301      	cbz	r1, 12d82 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   12d40:	4f4e      	ldr	r7, [pc, #312]	; (12e7c <nrfx_gpiote_input_configure+0x148>)
   12d42:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   12d46:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   12d4a:	079b      	lsls	r3, r3, #30
   12d4c:	d502      	bpl.n	12d54 <nrfx_gpiote_input_configure+0x20>
   12d4e:	f7ff ff83 	bl	12c58 <pin_in_use_by_te>
   12d52:	bb10      	cbnz	r0, 12d9a <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   12d54:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   12d56:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   12d5a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   12d5e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   12d62:	f10d 020f 	add.w	r2, sp, #15
   12d66:	460b      	mov	r3, r1
   12d68:	4620      	mov	r0, r4
   12d6a:	f10d 010e 	add.w	r1, sp, #14
   12d6e:	f001 ff5f 	bl	14c30 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   12d72:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   12d76:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   12d7a:	f043 0301 	orr.w	r3, r3, #1
   12d7e:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   12d82:	b346      	cbz	r6, 12dd6 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   12d84:	4b3d      	ldr	r3, [pc, #244]	; (12e7c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   12d86:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   12d8a:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   12d8c:	f104 0708 	add.w	r7, r4, #8
   12d90:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   12d94:	0788      	lsls	r0, r1, #30
   12d96:	d502      	bpl.n	12d9e <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   12d98:	b1aa      	cbz	r2, 12dc6 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   12d9a:	4839      	ldr	r0, [pc, #228]	; (12e80 <nrfx_gpiote_input_configure+0x14c>)
   12d9c:	e01d      	b.n	12dda <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   12d9e:	f021 0120 	bic.w	r1, r1, #32
   12da2:	04c9      	lsls	r1, r1, #19
   12da4:	0cc9      	lsrs	r1, r1, #19
   12da6:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   12daa:	b162      	cbz	r2, 12dc6 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   12dac:	f1bc 0f03 	cmp.w	ip, #3
   12db0:	d8f3      	bhi.n	12d9a <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   12db2:	6872      	ldr	r2, [r6, #4]
   12db4:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   12db6:	f1bc 0f00 	cmp.w	ip, #0
   12dba:	d111      	bne.n	12de0 <nrfx_gpiote_input_configure+0xac>
   12dbc:	4a31      	ldr	r2, [pc, #196]	; (12e84 <nrfx_gpiote_input_configure+0x150>)
   12dbe:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   12dc2:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   12dc6:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   12dca:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   12dce:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   12dd2:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   12dd6:	bb45      	cbnz	r5, 12e2a <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   12dd8:	482b      	ldr	r0, [pc, #172]	; (12e88 <nrfx_gpiote_input_configure+0x154>)
}
   12dda:	b004      	add	sp, #16
   12ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   12de0:	00b2      	lsls	r2, r6, #2
   12de2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   12de6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   12dea:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   12dee:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   12df2:	f020 0003 	bic.w	r0, r0, #3
   12df6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   12dfa:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   12dfe:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   12e02:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   12e06:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12e0a:	0220      	lsls	r0, r4, #8
   12e0c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   12e10:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   12e14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   12e18:	ea40 000e 	orr.w	r0, r0, lr
   12e1c:	f041 0120 	orr.w	r1, r1, #32
   12e20:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   12e24:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   12e28:	e7cd      	b.n	12dc6 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   12e2a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   12e2e:	4620      	mov	r0, r4
   12e30:	f7ff ff3a 	bl	12ca8 <release_handler>
    if (!handler)
   12e34:	2e00      	cmp	r6, #0
   12e36:	d0cf      	beq.n	12dd8 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   12e38:	4d10      	ldr	r5, [pc, #64]	; (12e7c <nrfx_gpiote_input_configure+0x148>)
   12e3a:	e9d5 2300 	ldrd	r2, r3, [r5]
   12e3e:	4296      	cmp	r6, r2
   12e40:	d101      	bne.n	12e46 <nrfx_gpiote_input_configure+0x112>
   12e42:	429f      	cmp	r7, r3
   12e44:	d018      	beq.n	12e78 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   12e46:	4811      	ldr	r0, [pc, #68]	; (12e8c <nrfx_gpiote_input_configure+0x158>)
   12e48:	f10d 010f 	add.w	r1, sp, #15
   12e4c:	f7ff fe0e 	bl	12a6c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   12e50:	4b0d      	ldr	r3, [pc, #52]	; (12e88 <nrfx_gpiote_input_configure+0x154>)
   12e52:	4298      	cmp	r0, r3
   12e54:	d1c1      	bne.n	12dda <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   12e56:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   12e5a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   12e5e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   12e62:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   12e64:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   12e66:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   12e6a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   12e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   12e72:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   12e76:	e7af      	b.n	12dd8 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   12e78:	2200      	movs	r2, #0
   12e7a:	e7ee      	b.n	12e5a <nrfx_gpiote_input_configure+0x126>
   12e7c:	20000034 	.word	0x20000034
   12e80:	0bad0004 	.word	0x0bad0004
   12e84:	40006000 	.word	0x40006000
   12e88:	0bad0000 	.word	0x0bad0000
   12e8c:	200000a8 	.word	0x200000a8

00012e90 <nrfx_gpiote_output_configure>:
{
   12e90:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e92:	4604      	mov	r4, r0
   12e94:	b085      	sub	sp, #20
   12e96:	4615      	mov	r5, r2
    if (p_config)
   12e98:	b319      	cbz	r1, 12ee2 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   12e9a:	4e33      	ldr	r6, [pc, #204]	; (12f68 <nrfx_gpiote_output_configure+0xd8>)
   12e9c:	f100 0708 	add.w	r7, r0, #8
   12ea0:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   12ea4:	0793      	lsls	r3, r2, #30
   12ea6:	d403      	bmi.n	12eb0 <nrfx_gpiote_output_configure+0x20>
   12ea8:	f7ff fed6 	bl	12c58 <pin_in_use_by_te>
   12eac:	2800      	cmp	r0, #0
   12eae:	d158      	bne.n	12f62 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   12eb0:	f012 0f1c 	tst.w	r2, #28
   12eb4:	d002      	beq.n	12ebc <nrfx_gpiote_output_configure+0x2c>
   12eb6:	784b      	ldrb	r3, [r1, #1]
   12eb8:	2b01      	cmp	r3, #1
   12eba:	d052      	beq.n	12f62 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   12ebc:	2301      	movs	r3, #1
   12ebe:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   12ec2:	2300      	movs	r3, #0
   12ec4:	e9cd 1300 	strd	r1, r3, [sp]
   12ec8:	1c4a      	adds	r2, r1, #1
   12eca:	1c8b      	adds	r3, r1, #2
   12ecc:	4620      	mov	r0, r4
   12ece:	f10d 010f 	add.w	r1, sp, #15
   12ed2:	f001 fead 	bl	14c30 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   12ed6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   12eda:	f043 0303 	orr.w	r3, r3, #3
   12ede:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   12ee2:	b915      	cbnz	r5, 12eea <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   12ee4:	4821      	ldr	r0, [pc, #132]	; (12f6c <nrfx_gpiote_output_configure+0xdc>)
}
   12ee6:	b005      	add	sp, #20
   12ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   12eea:	4e1f      	ldr	r6, [pc, #124]	; (12f68 <nrfx_gpiote_output_configure+0xd8>)
   12eec:	f104 0708 	add.w	r7, r4, #8
   12ef0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   12ef4:	0783      	lsls	r3, r0, #30
   12ef6:	d534      	bpl.n	12f62 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   12ef8:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   12efc:	4661      	mov	r1, ip
   12efe:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   12f00:	f020 0020 	bic.w	r0, r0, #32
   12f04:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   12f08:	04c0      	lsls	r0, r0, #19
   12f0a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   12f0e:	0cc0      	lsrs	r0, r0, #19
   12f10:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   12f14:	2300      	movs	r3, #0
   12f16:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   12f1a:	786a      	ldrb	r2, [r5, #1]
   12f1c:	2a00      	cmp	r2, #0
   12f1e:	d0e1      	beq.n	12ee4 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   12f20:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   12f24:	78ad      	ldrb	r5, [r5, #2]
   12f26:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   12f2a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   12f2e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12f32:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   12f36:	0223      	lsls	r3, r4, #8
   12f38:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   12f3c:	0412      	lsls	r2, r2, #16
   12f3e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12f42:	ea43 030e 	orr.w	r3, r3, lr
   12f46:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   12f48:	052a      	lsls	r2, r5, #20
   12f4a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   12f4e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12f52:	4313      	orrs	r3, r2
   12f54:	f040 0020 	orr.w	r0, r0, #32
   12f58:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   12f5c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   12f60:	e7c0      	b.n	12ee4 <nrfx_gpiote_output_configure+0x54>
{
   12f62:	4803      	ldr	r0, [pc, #12]	; (12f70 <nrfx_gpiote_output_configure+0xe0>)
   12f64:	e7bf      	b.n	12ee6 <nrfx_gpiote_output_configure+0x56>
   12f66:	bf00      	nop
   12f68:	20000034 	.word	0x20000034
   12f6c:	0bad0000 	.word	0x0bad0000
   12f70:	0bad0004 	.word	0x0bad0004

00012f74 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   12f74:	4b01      	ldr	r3, [pc, #4]	; (12f7c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   12f76:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   12f7a:	4770      	bx	lr
   12f7c:	20000034 	.word	0x20000034

00012f80 <nrfx_gpiote_channel_get>:
{
   12f80:	b508      	push	{r3, lr}
   12f82:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   12f84:	f7ff fe68 	bl	12c58 <pin_in_use_by_te>
   12f88:	b138      	cbz	r0, 12f9a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   12f8a:	4b05      	ldr	r3, [pc, #20]	; (12fa0 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   12f8c:	4805      	ldr	r0, [pc, #20]	; (12fa4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   12f8e:	3208      	adds	r2, #8
   12f90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   12f94:	0b5b      	lsrs	r3, r3, #13
   12f96:	700b      	strb	r3, [r1, #0]
}
   12f98:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   12f9a:	4803      	ldr	r0, [pc, #12]	; (12fa8 <nrfx_gpiote_channel_get+0x28>)
   12f9c:	e7fc      	b.n	12f98 <nrfx_gpiote_channel_get+0x18>
   12f9e:	bf00      	nop
   12fa0:	20000034 	.word	0x20000034
   12fa4:	0bad0000 	.word	0x0bad0000
   12fa8:	0bad0004 	.word	0x0bad0004

00012fac <nrfx_gpiote_init>:
{
   12fac:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   12fae:	4c0f      	ldr	r4, [pc, #60]	; (12fec <nrfx_gpiote_init+0x40>)
   12fb0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   12fb4:	b9bd      	cbnz	r5, 12fe6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   12fb6:	2260      	movs	r2, #96	; 0x60
   12fb8:	4629      	mov	r1, r5
   12fba:	f104 0010 	add.w	r0, r4, #16
   12fbe:	f001 fc8f 	bl	148e0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   12fc2:	2006      	movs	r0, #6
   12fc4:	f7fe f94a 	bl	1125c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   12fc8:	4b09      	ldr	r3, [pc, #36]	; (12ff0 <nrfx_gpiote_init+0x44>)
    return err_code;
   12fca:	480a      	ldr	r0, [pc, #40]	; (12ff4 <nrfx_gpiote_init+0x48>)
   12fcc:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   12fd0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   12fd4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   12fd8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   12fdc:	2301      	movs	r3, #1
   12fde:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   12fe2:	6763      	str	r3, [r4, #116]	; 0x74
}
   12fe4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   12fe6:	4804      	ldr	r0, [pc, #16]	; (12ff8 <nrfx_gpiote_init+0x4c>)
   12fe8:	e7fc      	b.n	12fe4 <nrfx_gpiote_init+0x38>
   12fea:	bf00      	nop
   12fec:	20000034 	.word	0x20000034
   12ff0:	40006000 	.word	0x40006000
   12ff4:	0bad0000 	.word	0x0bad0000
   12ff8:	0bad0005 	.word	0x0bad0005

00012ffc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   12ffc:	4b03      	ldr	r3, [pc, #12]	; (1300c <nrfx_gpiote_is_init+0x10>)
   12ffe:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   13002:	3800      	subs	r0, #0
   13004:	bf18      	it	ne
   13006:	2001      	movne	r0, #1
   13008:	4770      	bx	lr
   1300a:	bf00      	nop
   1300c:	20000034 	.word	0x20000034

00013010 <nrfx_gpiote_channel_free>:
{
   13010:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   13012:	4801      	ldr	r0, [pc, #4]	; (13018 <nrfx_gpiote_channel_free+0x8>)
   13014:	f7ff bd4a 	b.w	12aac <nrfx_flag32_free>
   13018:	200000a4 	.word	0x200000a4

0001301c <nrfx_gpiote_channel_alloc>:
{
   1301c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1301e:	4801      	ldr	r0, [pc, #4]	; (13024 <nrfx_gpiote_channel_alloc+0x8>)
   13020:	f7ff bd24 	b.w	12a6c <nrfx_flag32_alloc>
   13024:	200000a4 	.word	0x200000a4

00013028 <nrfx_gpiote_trigger_enable>:
{
   13028:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1302a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1302c:	f7ff fe14 	bl	12c58 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   13030:	f104 0208 	add.w	r2, r4, #8
   13034:	4b1e      	ldr	r3, [pc, #120]	; (130b0 <nrfx_gpiote_trigger_enable+0x88>)
   13036:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1303a:	b1e8      	cbz	r0, 13078 <nrfx_gpiote_trigger_enable+0x50>
   1303c:	f013 0502 	ands.w	r5, r3, #2
   13040:	d11a      	bne.n	13078 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13042:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   13044:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   13046:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1304a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1304e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   13052:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13056:	6005      	str	r5, [r0, #0]
   13058:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1305a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1305e:	f040 0001 	orr.w	r0, r0, #1
   13062:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   13066:	b129      	cbz	r1, 13074 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   13068:	2201      	movs	r2, #1
   1306a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1306e:	4a11      	ldr	r2, [pc, #68]	; (130b4 <nrfx_gpiote_trigger_enable+0x8c>)
   13070:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   13074:	b003      	add	sp, #12
   13076:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   13078:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1307c:	2b04      	cmp	r3, #4
   1307e:	d012      	beq.n	130a6 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   13080:	2b05      	cmp	r3, #5
   13082:	d012      	beq.n	130aa <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13084:	a801      	add	r0, sp, #4
   13086:	9401      	str	r4, [sp, #4]
   13088:	f7ff fdd8 	bl	12c3c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1308c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1308e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   13092:	40d9      	lsrs	r1, r3
   13094:	f001 0101 	and.w	r1, r1, #1
   13098:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1309a:	4620      	mov	r0, r4
}
   1309c:	b003      	add	sp, #12
   1309e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   130a2:	f001 be0e 	b.w	14cc2 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   130a6:	2103      	movs	r1, #3
   130a8:	e7f7      	b.n	1309a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   130aa:	2102      	movs	r1, #2
   130ac:	e7f5      	b.n	1309a <nrfx_gpiote_trigger_enable+0x72>
   130ae:	bf00      	nop
   130b0:	20000034 	.word	0x20000034
   130b4:	40006000 	.word	0x40006000

000130b8 <nrfx_gpiote_trigger_disable>:
{
   130b8:	b508      	push	{r3, lr}
   130ba:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   130bc:	f7ff fdcc 	bl	12c58 <pin_in_use_by_te>
   130c0:	b1c0      	cbz	r0, 130f4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   130c2:	f102 0108 	add.w	r1, r2, #8
   130c6:	4b0e      	ldr	r3, [pc, #56]	; (13100 <nrfx_gpiote_trigger_disable+0x48>)
   130c8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   130cc:	0799      	lsls	r1, r3, #30
   130ce:	d411      	bmi.n	130f4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   130d0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   130d2:	2201      	movs	r2, #1
   130d4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   130d6:	009b      	lsls	r3, r3, #2
   130d8:	490a      	ldr	r1, [pc, #40]	; (13104 <nrfx_gpiote_trigger_disable+0x4c>)
   130da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   130de:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   130e2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   130e6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   130ea:	f022 0203 	bic.w	r2, r2, #3
   130ee:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   130f2:	bd08      	pop	{r3, pc}
   130f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   130f8:	2100      	movs	r1, #0
   130fa:	4610      	mov	r0, r2
   130fc:	f001 bde1 	b.w	14cc2 <nrf_gpio_cfg_sense_set>
   13100:	20000034 	.word	0x20000034
   13104:	40006000 	.word	0x40006000

00013108 <nrfx_gpiote_pin_uninit>:
{
   13108:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1310a:	4b0e      	ldr	r3, [pc, #56]	; (13144 <nrfx_gpiote_pin_uninit+0x3c>)
   1310c:	f100 0208 	add.w	r2, r0, #8
{
   13110:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   13112:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   13116:	07db      	lsls	r3, r3, #31
   13118:	d511      	bpl.n	1313e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1311a:	f7ff ffcd 	bl	130b8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1311e:	4620      	mov	r0, r4
   13120:	f7ff fdec 	bl	12cfc <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13124:	a801      	add	r0, sp, #4
   13126:	9401      	str	r4, [sp, #4]
   13128:	f7ff fd88 	bl	12c3c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1312c:	9b01      	ldr	r3, [sp, #4]
   1312e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   13132:	2202      	movs	r2, #2
   13134:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   13138:	4803      	ldr	r0, [pc, #12]	; (13148 <nrfx_gpiote_pin_uninit+0x40>)
}
   1313a:	b002      	add	sp, #8
   1313c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1313e:	4803      	ldr	r0, [pc, #12]	; (1314c <nrfx_gpiote_pin_uninit+0x44>)
   13140:	e7fb      	b.n	1313a <nrfx_gpiote_pin_uninit+0x32>
   13142:	bf00      	nop
   13144:	20000034 	.word	0x20000034
   13148:	0bad0000 	.word	0x0bad0000
   1314c:	0bad0004 	.word	0x0bad0004

00013150 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   13150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13154:	4b68      	ldr	r3, [pc, #416]	; (132f8 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   13156:	4869      	ldr	r0, [pc, #420]	; (132fc <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   13158:	4969      	ldr	r1, [pc, #420]	; (13300 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   1315a:	2600      	movs	r6, #0
{
   1315c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1315e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13160:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13162:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   13164:	b135      	cbz	r5, 13174 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   13166:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1316a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1316c:	bf1e      	ittt	ne
   1316e:	601c      	strne	r4, [r3, #0]
   13170:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   13172:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   13174:	3304      	adds	r3, #4
   13176:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   13178:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1317c:	d1f1      	bne.n	13162 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1317e:	f8df 917c 	ldr.w	r9, [pc, #380]	; 132fc <nrfx_gpiote_irq_handler+0x1ac>
   13182:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   13186:	2b00      	cmp	r3, #0
   13188:	f000 8099 	beq.w	132be <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   1318c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   13190:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   13194:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   13196:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1319a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1319e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   131a0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   131a4:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   131a8:	f10d 0a10 	add.w	sl, sp, #16
   131ac:	ea4f 1348 	mov.w	r3, r8, lsl #5
   131b0:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   131b2:	f04f 0b01 	mov.w	fp, #1
   131b6:	e049      	b.n	1324c <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   131b8:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   131ba:	4a52      	ldr	r2, [pc, #328]	; (13304 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   131bc:	fa94 f4a4 	rbit	r4, r4
   131c0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   131c4:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   131c6:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   131c8:	f104 0308 	add.w	r3, r4, #8
   131cc:	9403      	str	r4, [sp, #12]
   131ce:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   131d2:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   131d6:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   131da:	fa0b f202 	lsl.w	r2, fp, r2
   131de:	ea23 0302 	bic.w	r3, r3, r2
   131e2:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   131e6:	a803      	add	r0, sp, #12
   131e8:	f7ff fd28 	bl	12c3c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   131ec:	9b03      	ldr	r3, [sp, #12]
   131ee:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   131f2:	08b9      	lsrs	r1, r7, #2
   131f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   131f8:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   131fc:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   131fe:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   13200:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   13204:	d52c      	bpl.n	13260 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   13206:	4620      	mov	r0, r4
   13208:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1320a:	b2dd      	uxtb	r5, r3
   1320c:	f7ff fd2e 	bl	12c6c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13210:	a803      	add	r0, sp, #12
   13212:	9403      	str	r4, [sp, #12]
   13214:	f7ff fd12 	bl	12c3c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   13218:	9b03      	ldr	r3, [sp, #12]
   1321a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1321e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   13222:	f3c3 4301 	ubfx	r3, r3, #16, #2
   13226:	429d      	cmp	r5, r3
   13228:	d107      	bne.n	1323a <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1322a:	2100      	movs	r1, #0
   1322c:	4620      	mov	r0, r4
   1322e:	f001 fd48 	bl	14cc2 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   13232:	4629      	mov	r1, r5
   13234:	4620      	mov	r0, r4
   13236:	f001 fd44 	bl	14cc2 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1323a:	a803      	add	r0, sp, #12
   1323c:	9403      	str	r4, [sp, #12]
   1323e:	f7ff fcfd 	bl	12c3c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   13242:	9b03      	ldr	r3, [sp, #12]
   13244:	fa0b f303 	lsl.w	r3, fp, r3
   13248:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1324c:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   13250:	2c00      	cmp	r4, #0
   13252:	d1b1      	bne.n	131b8 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   13254:	f1b8 0f00 	cmp.w	r8, #0
   13258:	d11d      	bne.n	13296 <nrfx_gpiote_irq_handler+0x146>
   1325a:	f04f 0801 	mov.w	r8, #1
   1325e:	e7a5      	b.n	131ac <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   13260:	2b02      	cmp	r3, #2
   13262:	d10c      	bne.n	1327e <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   13264:	2103      	movs	r1, #3
   13266:	4620      	mov	r0, r4
   13268:	f001 fd2b 	bl	14cc2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1326c:	f005 0305 	and.w	r3, r5, #5
   13270:	2b01      	cmp	r3, #1
   13272:	d1e2      	bne.n	1323a <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   13274:	4639      	mov	r1, r7
   13276:	4620      	mov	r0, r4
   13278:	f7ff fcf8 	bl	12c6c <call_handler>
   1327c:	e7dd      	b.n	1323a <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1327e:	2102      	movs	r1, #2
   13280:	4620      	mov	r0, r4
   13282:	9301      	str	r3, [sp, #4]
   13284:	f001 fd1d 	bl	14cc2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   13288:	2d03      	cmp	r5, #3
   1328a:	d0f3      	beq.n	13274 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1328c:	9b01      	ldr	r3, [sp, #4]
   1328e:	2b03      	cmp	r3, #3
   13290:	d1d3      	bne.n	1323a <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   13292:	2d02      	cmp	r5, #2
   13294:	e7ed      	b.n	13272 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   13296:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1329a:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   1329e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   132a2:	4919      	ldr	r1, [pc, #100]	; (13308 <nrfx_gpiote_irq_handler+0x1b8>)
   132a4:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   132a8:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   132aa:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   132ae:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   132b2:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   132b4:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   132b6:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   132ba:	f47f af73 	bne.w	131a4 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   132be:	2401      	movs	r4, #1
    while (mask)
   132c0:	b916      	cbnz	r6, 132c8 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   132c2:	b007      	add	sp, #28
   132c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   132c8:	fa96 f3a6 	rbit	r3, r6
   132cc:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   132d0:	fa04 f203 	lsl.w	r2, r4, r3
   132d4:	009b      	lsls	r3, r3, #2
   132d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   132da:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   132de:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   132e2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   132e6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   132ea:	f3c0 2005 	ubfx	r0, r0, #8, #6
   132ee:	f3c1 4101 	ubfx	r1, r1, #16, #2
   132f2:	f7ff fcbb 	bl	12c6c <call_handler>
   132f6:	e7e3      	b.n	132c0 <nrfx_gpiote_irq_handler+0x170>
   132f8:	40006100 	.word	0x40006100
   132fc:	40006000 	.word	0x40006000
   13300:	40006120 	.word	0x40006120
   13304:	20000034 	.word	0x20000034
   13308:	50000300 	.word	0x50000300

0001330c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1330c:	4b10      	ldr	r3, [pc, #64]	; (13350 <z_sys_init_run_level+0x44>)
{
   1330e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   13310:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   13314:	3001      	adds	r0, #1
   13316:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1331a:	42a6      	cmp	r6, r4
   1331c:	d800      	bhi.n	13320 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   1331e:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   13320:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   13324:	b18d      	cbz	r5, 1334a <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   13326:	4628      	mov	r0, r5
   13328:	4798      	blx	r3
			if (rc != 0) {
   1332a:	b138      	cbz	r0, 1333c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1332c:	2800      	cmp	r0, #0
   1332e:	bfb8      	it	lt
   13330:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   13332:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   13334:	28ff      	cmp	r0, #255	; 0xff
   13336:	bfa8      	it	ge
   13338:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1333a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1333c:	68ea      	ldr	r2, [r5, #12]
   1333e:	7853      	ldrb	r3, [r2, #1]
   13340:	f043 0301 	orr.w	r3, r3, #1
   13344:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   13346:	3408      	adds	r4, #8
   13348:	e7e7      	b.n	1331a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   1334a:	4798      	blx	r3
   1334c:	e7fb      	b.n	13346 <z_sys_init_run_level+0x3a>
   1334e:	bf00      	nop
   13350:	00015374 	.word	0x00015374

00013354 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   13354:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   13356:	4b0a      	ldr	r3, [pc, #40]	; (13380 <bg_thread_main+0x2c>)
   13358:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1335a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1335c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1335e:	f7ff ffd5 	bl	1330c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   13362:	f000 ff47 	bl	141f4 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   13366:	2004      	movs	r0, #4
   13368:	f7ff ffd0 	bl	1330c <z_sys_init_run_level>

	z_init_static_threads();
   1336c:	f000 f930 	bl	135d0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   13370:	f7fd f830 	bl	103d4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   13374:	4a03      	ldr	r2, [pc, #12]	; (13384 <bg_thread_main+0x30>)
   13376:	7b13      	ldrb	r3, [r2, #12]
   13378:	f023 0301 	bic.w	r3, r3, #1
   1337c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1337e:	bd08      	pop	{r3, pc}
   13380:	20000aa1 	.word	0x20000aa1
   13384:	20000210 	.word	0x20000210

00013388 <z_bss_zero>:
{
   13388:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1338a:	4803      	ldr	r0, [pc, #12]	; (13398 <z_bss_zero+0x10>)
   1338c:	4a03      	ldr	r2, [pc, #12]	; (1339c <z_bss_zero+0x14>)
   1338e:	2100      	movs	r1, #0
   13390:	1a12      	subs	r2, r2, r0
   13392:	f001 fccc 	bl	14d2e <z_early_memset>
}
   13396:	bd08      	pop	{r3, pc}
   13398:	20000170 	.word	0x20000170
   1339c:	20000aa4 	.word	0x20000aa4

000133a0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   133a0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   133a2:	2300      	movs	r3, #0
{
   133a4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   133a6:	2201      	movs	r2, #1
   133a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   133ac:	4e13      	ldr	r6, [pc, #76]	; (133fc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   133ae:	4d14      	ldr	r5, [pc, #80]	; (13400 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   133b0:	9301      	str	r3, [sp, #4]
   133b2:	220f      	movs	r2, #15
   133b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   133b8:	4912      	ldr	r1, [pc, #72]	; (13404 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   133ba:	2314      	movs	r3, #20
   133bc:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   133c0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   133c4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   133c6:	f44f 70c0 	mov.w	r0, #384	; 0x180
   133ca:	fb00 1104 	mla	r1, r0, r4, r1
   133ce:	4b0e      	ldr	r3, [pc, #56]	; (13408 <z_init_cpu+0x68>)
   133d0:	9500      	str	r5, [sp, #0]
   133d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   133d6:	4630      	mov	r0, r6
   133d8:	f000 f8c8 	bl	1356c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   133dc:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   133de:	4a0b      	ldr	r2, [pc, #44]	; (1340c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   133e0:	60ee      	str	r6, [r5, #12]
   133e2:	f023 0304 	bic.w	r3, r3, #4
   133e6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   133e8:	f44f 6304 	mov.w	r3, #2112	; 0x840
   133ec:	fb04 3303 	mla	r3, r4, r3, r3
   133f0:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   133f2:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
   133f4:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   133f6:	b006      	add	sp, #24
   133f8:	bd70      	pop	{r4, r5, r6, pc}
   133fa:	bf00      	nop
   133fc:	20000190 	.word	0x20000190
   13400:	20000894 	.word	0x20000894
   13404:	20001300 	.word	0x20001300
   13408:	00013689 	.word	0x00013689
   1340c:	20000ac0 	.word	0x20000ac0

00013410 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   13410:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   13412:	2000      	movs	r0, #0
{
   13414:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   13416:	f7ff ff79 	bl	1330c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1341a:	4b2d      	ldr	r3, [pc, #180]	; (134d0 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1341c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   13420:	4d2c      	ldr	r5, [pc, #176]	; (134d4 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   13422:	4e2d      	ldr	r6, [pc, #180]	; (134d8 <z_cstart+0xc8>)
   13424:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   13426:	4f2d      	ldr	r7, [pc, #180]	; (134dc <z_cstart+0xcc>)
   13428:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1342c:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1342e:	2400      	movs	r4, #0
   13430:	23e0      	movs	r3, #224	; 0xe0
   13432:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   13436:	77ec      	strb	r4, [r5, #31]
   13438:	762c      	strb	r4, [r5, #24]
   1343a:	766c      	strb	r4, [r5, #25]
   1343c:	76ac      	strb	r4, [r5, #26]
   1343e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   13442:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13444:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   13448:	626b      	str	r3, [r5, #36]	; 0x24
   1344a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1344e:	f7fe f975 	bl	1173c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   13452:	f7fd fee3 	bl	1121c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   13456:	f04f 33ff 	mov.w	r3, #4294967295
   1345a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1345c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1345e:	f7fe faa7 	bl	119b0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   13462:	f7fe fa0d 	bl	11880 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   13466:	f240 1301 	movw	r3, #257	; 0x101
   1346a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1346e:	ab06      	add	r3, sp, #24
   13470:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   13472:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
   13476:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   13478:	f001 fc32 	bl	14ce0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1347c:	2001      	movs	r0, #1
   1347e:	f7ff ff45 	bl	1330c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   13482:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   13484:	4d16      	ldr	r5, [pc, #88]	; (134e0 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   13486:	f7ff ff41 	bl	1330c <z_sys_init_run_level>
	z_sched_init();
   1348a:	f000 fc4f 	bl	13d2c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1348e:	4b15      	ldr	r3, [pc, #84]	; (134e4 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   13490:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   13492:	9305      	str	r3, [sp, #20]
   13494:	2301      	movs	r3, #1
   13496:	4914      	ldr	r1, [pc, #80]	; (134e8 <z_cstart+0xd8>)
   13498:	9400      	str	r4, [sp, #0]
   1349a:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1349e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   134a2:	463b      	mov	r3, r7
   134a4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   134a8:	4628      	mov	r0, r5
   134aa:	f000 f85f 	bl	1356c <z_setup_new_thread>
   134ae:	7b6a      	ldrb	r2, [r5, #13]
   134b0:	4606      	mov	r6, r0
   134b2:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   134b6:	4628      	mov	r0, r5
   134b8:	736a      	strb	r2, [r5, #13]
   134ba:	f001 fcdf 	bl	14e7c <z_ready_thread>
	z_init_cpu(0);
   134be:	4620      	mov	r0, r4
   134c0:	f7ff ff6e 	bl	133a0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   134c4:	463a      	mov	r2, r7
   134c6:	4631      	mov	r1, r6
   134c8:	4628      	mov	r0, r5
   134ca:	f7fd ffb5 	bl	11438 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   134ce:	bf00      	nop
   134d0:	20001300 	.word	0x20001300
   134d4:	e000ed00 	.word	0xe000ed00
   134d8:	20000894 	.word	0x20000894
   134dc:	00013355 	.word	0x00013355
   134e0:	20000210 	.word	0x20000210
   134e4:	0001555c 	.word	0x0001555c
   134e8:	20001480 	.word	0x20001480

000134ec <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   134ec:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   134ee:	4c06      	ldr	r4, [pc, #24]	; (13508 <init_mem_slab_module+0x1c>)
   134f0:	4d06      	ldr	r5, [pc, #24]	; (1350c <init_mem_slab_module+0x20>)
	int rc = 0;
   134f2:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   134f4:	42ac      	cmp	r4, r5
   134f6:	d300      	bcc.n	134fa <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   134f8:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   134fa:	4620      	mov	r0, r4
   134fc:	f001 fc1b 	bl	14d36 <create_free_list>
		if (rc < 0) {
   13500:	2800      	cmp	r0, #0
   13502:	dbf9      	blt.n	134f8 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   13504:	341c      	adds	r4, #28
   13506:	e7f5      	b.n	134f4 <init_mem_slab_module+0x8>
   13508:	20000120 	.word	0x20000120
   1350c:	20000120 	.word	0x20000120

00013510 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   13510:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13512:	460c      	mov	r4, r1
	__asm__ volatile(
   13514:	f04f 0520 	mov.w	r5, #32
   13518:	f3ef 8111 	mrs	r1, BASEPRI
   1351c:	f385 8812 	msr	BASEPRI_MAX, r5
   13520:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   13524:	6945      	ldr	r5, [r0, #20]
   13526:	b15d      	cbz	r5, 13540 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   13528:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1352a:	682b      	ldr	r3, [r5, #0]
   1352c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1352e:	6983      	ldr	r3, [r0, #24]
   13530:	3301      	adds	r3, #1
   13532:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   13534:	2000      	movs	r0, #0
	__asm__ volatile(
   13536:	f381 8811 	msr	BASEPRI, r1
   1353a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1353e:	e011      	b.n	13564 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   13540:	ea52 0603 	orrs.w	r6, r2, r3
   13544:	d103      	bne.n	1354e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   13546:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   13548:	f06f 000b 	mvn.w	r0, #11
   1354c:	e7f3      	b.n	13536 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1354e:	e9cd 2300 	strd	r2, r3, [sp]
   13552:	4602      	mov	r2, r0
   13554:	3008      	adds	r0, #8
   13556:	f000 faf3 	bl	13b40 <z_pend_curr>
		if (result == 0) {
   1355a:	b918      	cbnz	r0, 13564 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1355c:	4b02      	ldr	r3, [pc, #8]	; (13568 <k_mem_slab_alloc+0x58>)
   1355e:	689b      	ldr	r3, [r3, #8]
   13560:	695b      	ldr	r3, [r3, #20]
   13562:	6023      	str	r3, [r4, #0]
}
   13564:	b002      	add	sp, #8
   13566:	bd70      	pop	{r4, r5, r6, pc}
   13568:	20000894 	.word	0x20000894

0001356c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1356c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   13570:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   13572:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   13574:	2604      	movs	r6, #4
   13576:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   13578:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1357a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1357c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   13580:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   13582:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   13584:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   13588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1358a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1358c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   13590:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   13592:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   13596:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
   1359a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1359c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1359e:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   135a0:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   135a4:	9202      	str	r2, [sp, #8]
   135a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   135a8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   135aa:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   135ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   135ae:	9200      	str	r2, [sp, #0]
   135b0:	4642      	mov	r2, r8
{
   135b2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   135b4:	f7fd ff0e 	bl	113d4 <arch_new_thread>
	if (!_current) {
   135b8:	4b04      	ldr	r3, [pc, #16]	; (135cc <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   135ba:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   135bc:	689b      	ldr	r3, [r3, #8]
   135be:	b103      	cbz	r3, 135c2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   135c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
   135c2:	6723      	str	r3, [r4, #112]	; 0x70
}
   135c4:	4640      	mov	r0, r8
   135c6:	b004      	add	sp, #16
   135c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   135cc:	20000894 	.word	0x20000894

000135d0 <z_init_static_threads>:
{
   135d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   135d4:	4c29      	ldr	r4, [pc, #164]	; (1367c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   135d6:	4d2a      	ldr	r5, [pc, #168]	; (13680 <z_init_static_threads+0xb0>)
{
   135d8:	b087      	sub	sp, #28
   135da:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   135dc:	42ae      	cmp	r6, r5
   135de:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   135e2:	d30f      	bcc.n	13604 <z_init_static_threads+0x34>
	k_sched_lock();
   135e4:	f000 fb72 	bl	13ccc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   135e8:	4c24      	ldr	r4, [pc, #144]	; (1367c <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   135ea:	f8df 9098 	ldr.w	r9, [pc, #152]	; 13684 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   135ee:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   135f2:	f240 37e7 	movw	r7, #999	; 0x3e7
   135f6:	42ac      	cmp	r4, r5
   135f8:	d320      	bcc.n	1363c <z_init_static_threads+0x6c>
}
   135fa:	b007      	add	sp, #28
   135fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   13600:	f000 bb78 	b.w	13cf4 <k_sched_unlock>
		z_setup_new_thread(
   13604:	f854 3c04 	ldr.w	r3, [r4, #-4]
   13608:	9305      	str	r3, [sp, #20]
   1360a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1360e:	9304      	str	r3, [sp, #16]
   13610:	f854 3c10 	ldr.w	r3, [r4, #-16]
   13614:	9303      	str	r3, [sp, #12]
   13616:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1361a:	9302      	str	r3, [sp, #8]
   1361c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   13620:	9301      	str	r3, [sp, #4]
   13622:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   13626:	9300      	str	r3, [sp, #0]
   13628:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   1362c:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   13630:	f7ff ff9c 	bl	1356c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   13634:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   13638:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1363a:	e7ce      	b.n	135da <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1363c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1363e:	1c5a      	adds	r2, r3, #1
   13640:	d00d      	beq.n	1365e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   13642:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13646:	2100      	movs	r1, #0
   13648:	4638      	mov	r0, r7
   1364a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1364e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   13652:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   13656:	d104      	bne.n	13662 <z_init_static_threads+0x92>
	z_sched_start(thread);
   13658:	4640      	mov	r0, r8
   1365a:	f000 fae7 	bl	13c2c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1365e:	342c      	adds	r4, #44	; 0x2c
   13660:	e7c9      	b.n	135f6 <z_init_static_threads+0x26>
   13662:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13666:	2300      	movs	r3, #0
   13668:	f7fc fd4a 	bl	10100 <__aeabi_uldivmod>
   1366c:	4602      	mov	r2, r0
   1366e:	460b      	mov	r3, r1
   13670:	f108 0018 	add.w	r0, r8, #24
   13674:	4649      	mov	r1, r9
   13676:	f000 fcc3 	bl	14000 <z_add_timeout>
   1367a:	e7f0      	b.n	1365e <z_init_static_threads+0x8e>
   1367c:	000151ec 	.word	0x000151ec
   13680:	000151ec 	.word	0x000151ec
   13684:	00014ee1 	.word	0x00014ee1

00013688 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   13688:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1368a:	4c0b      	ldr	r4, [pc, #44]	; (136b8 <idle+0x30>)
	return !z_sys_post_kernel;
   1368c:	4d0b      	ldr	r5, [pc, #44]	; (136bc <idle+0x34>)
	__asm__ volatile(
   1368e:	f04f 0220 	mov.w	r2, #32
   13692:	f3ef 8311 	mrs	r3, BASEPRI
   13696:	f382 8812 	msr	BASEPRI_MAX, r2
   1369a:	f3bf 8f6f 	isb	sy
   1369e:	f001 fc6b 	bl	14f78 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   136a2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   136a4:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   136a6:	b913      	cbnz	r3, 136ae <idle+0x26>
	arch_cpu_idle();
   136a8:	f7fd fdbe 	bl	11228 <arch_cpu_idle>
}
   136ac:	e7ef      	b.n	1368e <idle+0x6>
   136ae:	f7fd fbfb 	bl	10ea8 <pm_system_suspend>
   136b2:	2800      	cmp	r0, #0
   136b4:	d1eb      	bne.n	1368e <idle+0x6>
   136b6:	e7f7      	b.n	136a8 <idle+0x20>
   136b8:	20000894 	.word	0x20000894
   136bc:	20000aa1 	.word	0x20000aa1

000136c0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   136c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   136c4:	4604      	mov	r4, r0
   136c6:	4617      	mov	r7, r2
   136c8:	461e      	mov	r6, r3
   136ca:	f04f 0320 	mov.w	r3, #32
   136ce:	f3ef 8811 	mrs	r8, BASEPRI
   136d2:	f383 8812 	msr	BASEPRI_MAX, r3
   136d6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   136da:	68c3      	ldr	r3, [r0, #12]
   136dc:	4a33      	ldr	r2, [pc, #204]	; (137ac <z_impl_k_mutex_lock+0xec>)
   136de:	b17b      	cbz	r3, 13700 <z_impl_k_mutex_lock+0x40>
   136e0:	6880      	ldr	r0, [r0, #8]
   136e2:	6891      	ldr	r1, [r2, #8]
   136e4:	4288      	cmp	r0, r1
   136e6:	d019      	beq.n	1371c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   136e8:	ea57 0306 	orrs.w	r3, r7, r6
   136ec:	d118      	bne.n	13720 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   136ee:	f388 8811 	msr	BASEPRI, r8
   136f2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   136f6:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   136fa:	b002      	add	sp, #8
   136fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   13700:	6891      	ldr	r1, [r2, #8]
   13702:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   13706:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   13708:	3301      	adds	r3, #1
   1370a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1370c:	6893      	ldr	r3, [r2, #8]
   1370e:	60a3      	str	r3, [r4, #8]
   13710:	f388 8811 	msr	BASEPRI, r8
   13714:	f3bf 8f6f 	isb	sy
		return 0;
   13718:	2000      	movs	r0, #0
   1371a:	e7ee      	b.n	136fa <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   1371c:	6921      	ldr	r1, [r4, #16]
   1371e:	e7f2      	b.n	13706 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   13720:	f991 100e 	ldrsb.w	r1, [r1, #14]
   13724:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   13728:	4299      	cmp	r1, r3
   1372a:	bfa8      	it	ge
   1372c:	4619      	movge	r1, r3
   1372e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   13732:	4291      	cmp	r1, r2
   13734:	bfb8      	it	lt
   13736:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   13738:	428b      	cmp	r3, r1
   1373a:	dd2e      	ble.n	1379a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1373c:	f001 fb55 	bl	14dea <adjust_owner_prio.isra.0>
   13740:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   13742:	e9cd 7600 	strd	r7, r6, [sp]
   13746:	481a      	ldr	r0, [pc, #104]	; (137b0 <z_impl_k_mutex_lock+0xf0>)
   13748:	4622      	mov	r2, r4
   1374a:	4641      	mov	r1, r8
   1374c:	f000 f9f8 	bl	13b40 <z_pend_curr>
	if (got_mutex == 0) {
   13750:	2800      	cmp	r0, #0
   13752:	d0e1      	beq.n	13718 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   13754:	f04f 0320 	mov.w	r3, #32
   13758:	f3ef 8611 	mrs	r6, BASEPRI
   1375c:	f383 8812 	msr	BASEPRI_MAX, r3
   13760:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   13764:	68a0      	ldr	r0, [r4, #8]
   13766:	b1d0      	cbz	r0, 1379e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13768:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1376a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1376c:	429c      	cmp	r4, r3
   1376e:	d00a      	beq.n	13786 <z_impl_k_mutex_lock+0xc6>
   13770:	b14b      	cbz	r3, 13786 <z_impl_k_mutex_lock+0xc6>
   13772:	f993 300e 	ldrsb.w	r3, [r3, #14]
   13776:	4299      	cmp	r1, r3
   13778:	bfa8      	it	ge
   1377a:	4619      	movge	r1, r3
   1377c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   13780:	4299      	cmp	r1, r3
   13782:	bfb8      	it	lt
   13784:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   13786:	f001 fb30 	bl	14dea <adjust_owner_prio.isra.0>
   1378a:	b140      	cbz	r0, 1379e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1378c:	4808      	ldr	r0, [pc, #32]	; (137b0 <z_impl_k_mutex_lock+0xf0>)
   1378e:	4631      	mov	r1, r6
   13790:	f000 fa3a 	bl	13c08 <z_reschedule>
	return -EAGAIN;
   13794:	f06f 000a 	mvn.w	r0, #10
   13798:	e7af      	b.n	136fa <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   1379a:	2500      	movs	r5, #0
   1379c:	e7d1      	b.n	13742 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   1379e:	2d00      	cmp	r5, #0
   137a0:	d1f4      	bne.n	1378c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   137a2:	f386 8811 	msr	BASEPRI, r6
   137a6:	f3bf 8f6f 	isb	sy
   137aa:	e7f3      	b.n	13794 <z_impl_k_mutex_lock+0xd4>
   137ac:	20000894 	.word	0x20000894
   137b0:	20000aa2 	.word	0x20000aa2

000137b4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   137b4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   137b6:	6883      	ldr	r3, [r0, #8]
{
   137b8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   137ba:	b36b      	cbz	r3, 13818 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   137bc:	4a19      	ldr	r2, [pc, #100]	; (13824 <z_impl_k_mutex_unlock+0x70>)
   137be:	6892      	ldr	r2, [r2, #8]
   137c0:	4293      	cmp	r3, r2
   137c2:	d12c      	bne.n	1381e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   137c4:	68c3      	ldr	r3, [r0, #12]
   137c6:	2b01      	cmp	r3, #1
   137c8:	d903      	bls.n	137d2 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   137ca:	3b01      	subs	r3, #1
   137cc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   137ce:	2000      	movs	r0, #0
}
   137d0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   137d2:	f04f 0320 	mov.w	r3, #32
   137d6:	f3ef 8511 	mrs	r5, BASEPRI
   137da:	f383 8812 	msr	BASEPRI_MAX, r3
   137de:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   137e2:	6901      	ldr	r1, [r0, #16]
   137e4:	6880      	ldr	r0, [r0, #8]
   137e6:	f001 fb00 	bl	14dea <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   137ea:	4620      	mov	r0, r4
   137ec:	f001 fb7c 	bl	14ee8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   137f0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   137f2:	b158      	cbz	r0, 1380c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   137f4:	f990 200e 	ldrsb.w	r2, [r0, #14]
   137f8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   137fa:	2200      	movs	r2, #0
   137fc:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   137fe:	f001 fb3d 	bl	14e7c <z_ready_thread>
		z_reschedule(&lock, key);
   13802:	4809      	ldr	r0, [pc, #36]	; (13828 <z_impl_k_mutex_unlock+0x74>)
   13804:	4629      	mov	r1, r5
   13806:	f000 f9ff 	bl	13c08 <z_reschedule>
   1380a:	e7e0      	b.n	137ce <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   1380c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1380e:	f385 8811 	msr	BASEPRI, r5
   13812:	f3bf 8f6f 	isb	sy
   13816:	e7da      	b.n	137ce <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   13818:	f06f 0015 	mvn.w	r0, #21
   1381c:	e7d8      	b.n	137d0 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1381e:	f04f 30ff 	mov.w	r0, #4294967295
   13822:	e7d5      	b.n	137d0 <z_impl_k_mutex_unlock+0x1c>
   13824:	20000894 	.word	0x20000894
   13828:	20000aa2 	.word	0x20000aa2

0001382c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1382c:	b538      	push	{r3, r4, r5, lr}
   1382e:	4604      	mov	r4, r0
	__asm__ volatile(
   13830:	f04f 0320 	mov.w	r3, #32
   13834:	f3ef 8511 	mrs	r5, BASEPRI
   13838:	f383 8812 	msr	BASEPRI_MAX, r3
   1383c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   13840:	f001 fb52 	bl	14ee8 <z_unpend_first_thread>

	if (thread != NULL) {
   13844:	b148      	cbz	r0, 1385a <z_impl_k_sem_give+0x2e>
   13846:	2200      	movs	r2, #0
   13848:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1384a:	f001 fb17 	bl	14e7c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1384e:	4629      	mov	r1, r5
   13850:	4805      	ldr	r0, [pc, #20]	; (13868 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   13852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   13856:	f000 b9d7 	b.w	13c08 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1385a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1385e:	429a      	cmp	r2, r3
   13860:	bf18      	it	ne
   13862:	3301      	addne	r3, #1
   13864:	60a3      	str	r3, [r4, #8]
}
   13866:	e7f2      	b.n	1384e <z_impl_k_sem_give+0x22>
   13868:	20000aa2 	.word	0x20000aa2

0001386c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1386c:	b513      	push	{r0, r1, r4, lr}
   1386e:	f04f 0420 	mov.w	r4, #32
   13872:	f3ef 8111 	mrs	r1, BASEPRI
   13876:	f384 8812 	msr	BASEPRI_MAX, r4
   1387a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1387e:	6884      	ldr	r4, [r0, #8]
   13880:	b144      	cbz	r4, 13894 <z_impl_k_sem_take+0x28>
		sem->count--;
   13882:	3c01      	subs	r4, #1
   13884:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   13886:	f381 8811 	msr	BASEPRI, r1
   1388a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1388e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   13890:	b002      	add	sp, #8
   13892:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   13894:	ea52 0403 	orrs.w	r4, r2, r3
   13898:	d106      	bne.n	138a8 <z_impl_k_sem_take+0x3c>
   1389a:	f381 8811 	msr	BASEPRI, r1
   1389e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   138a2:	f06f 000f 	mvn.w	r0, #15
   138a6:	e7f3      	b.n	13890 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   138a8:	e9cd 2300 	strd	r2, r3, [sp]
   138ac:	4602      	mov	r2, r0
   138ae:	4802      	ldr	r0, [pc, #8]	; (138b8 <z_impl_k_sem_take+0x4c>)
   138b0:	f000 f946 	bl	13b40 <z_pend_curr>
	return ret;
   138b4:	e7ec      	b.n	13890 <z_impl_k_sem_take+0x24>
   138b6:	bf00      	nop
   138b8:	20000aa2 	.word	0x20000aa2

000138bc <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   138bc:	89c3      	ldrh	r3, [r0, #14]
   138be:	2b7f      	cmp	r3, #127	; 0x7f
   138c0:	d812      	bhi.n	138e8 <sliceable+0x2c>
	int ret = slice_ticks;
   138c2:	4b0a      	ldr	r3, [pc, #40]	; (138ec <sliceable+0x30>)
   138c4:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   138c6:	b163      	cbz	r3, 138e2 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   138c8:	4b09      	ldr	r3, [pc, #36]	; (138f0 <sliceable+0x34>)
   138ca:	f990 200e 	ldrsb.w	r2, [r0, #14]
   138ce:	681b      	ldr	r3, [r3, #0]
   138d0:	429a      	cmp	r2, r3
   138d2:	db09      	blt.n	138e8 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   138d4:	7b43      	ldrb	r3, [r0, #13]
   138d6:	06db      	lsls	r3, r3, #27
   138d8:	d106      	bne.n	138e8 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   138da:	4b06      	ldr	r3, [pc, #24]	; (138f4 <sliceable+0x38>)
   138dc:	1ac3      	subs	r3, r0, r3
   138de:	bf18      	it	ne
   138e0:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   138e2:	f003 0001 	and.w	r0, r3, #1
   138e6:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   138e8:	2300      	movs	r3, #0
   138ea:	e7fa      	b.n	138e2 <sliceable+0x26>
   138ec:	200008c0 	.word	0x200008c0
   138f0:	200008bc 	.word	0x200008bc
   138f4:	20000190 	.word	0x20000190

000138f8 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   138f8:	4b04      	ldr	r3, [pc, #16]	; (1390c <slice_timeout+0x14>)
   138fa:	1ac0      	subs	r0, r0, r3
   138fc:	4b04      	ldr	r3, [pc, #16]	; (13910 <slice_timeout+0x18>)
   138fe:	10c0      	asrs	r0, r0, #3
   13900:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   13902:	4b04      	ldr	r3, [pc, #16]	; (13914 <slice_timeout+0x1c>)
   13904:	2201      	movs	r2, #1
   13906:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   13908:	4770      	bx	lr
   1390a:	bf00      	nop
   1390c:	20000290 	.word	0x20000290
   13910:	aaaaaaab 	.word	0xaaaaaaab
   13914:	20000aa2 	.word	0x20000aa2

00013918 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   13918:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   1391a:	4b0e      	ldr	r3, [pc, #56]	; (13954 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   1391c:	4c0e      	ldr	r4, [pc, #56]	; (13958 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   1391e:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   13920:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   13924:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   13928:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   1392a:	4620      	mov	r0, r4
   1392c:	f001 fb0e 	bl	14f4c <z_abort_timeout>
	slice_expired[cpu] = false;
   13930:	4b0a      	ldr	r3, [pc, #40]	; (1395c <z_reset_time_slice+0x44>)
   13932:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   13934:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   13936:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   13938:	f7ff ffc0 	bl	138bc <sliceable>
   1393c:	b148      	cbz	r0, 13952 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   1393e:	4b08      	ldr	r3, [pc, #32]	; (13960 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   13940:	4908      	ldr	r1, [pc, #32]	; (13964 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   13942:	681a      	ldr	r2, [r3, #0]
   13944:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   13946:	4620      	mov	r0, r4
   13948:	17d3      	asrs	r3, r2, #31
	}
}
   1394a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   1394e:	f000 bb57 	b.w	14000 <z_add_timeout>
}
   13952:	bd70      	pop	{r4, r5, r6, pc}
   13954:	20000894 	.word	0x20000894
   13958:	20000290 	.word	0x20000290
   1395c:	20000aa2 	.word	0x20000aa2
   13960:	200008c0 	.word	0x200008c0
   13964:	000138f9 	.word	0x000138f9

00013968 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   13968:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1396a:	4d0d      	ldr	r5, [pc, #52]	; (139a0 <update_cache+0x38>)
   1396c:	462b      	mov	r3, r5
   1396e:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13972:	429c      	cmp	r4, r3
   13974:	d000      	beq.n	13978 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   13976:	b904      	cbnz	r4, 1397a <update_cache+0x12>
   13978:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1397a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1397c:	b938      	cbnz	r0, 1398e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   1397e:	7b5a      	ldrb	r2, [r3, #13]
   13980:	06d2      	lsls	r2, r2, #27
   13982:	d104      	bne.n	1398e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   13984:	69a2      	ldr	r2, [r4, #24]
   13986:	b912      	cbnz	r2, 1398e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   13988:	89da      	ldrh	r2, [r3, #14]
   1398a:	2a7f      	cmp	r2, #127	; 0x7f
   1398c:	d805      	bhi.n	1399a <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1398e:	429c      	cmp	r4, r3
   13990:	d002      	beq.n	13998 <update_cache+0x30>
			z_reset_time_slice(thread);
   13992:	4620      	mov	r0, r4
   13994:	f7ff ffc0 	bl	13918 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   13998:	4623      	mov	r3, r4
   1399a:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   1399c:	bd38      	pop	{r3, r4, r5, pc}
   1399e:	bf00      	nop
   139a0:	20000894 	.word	0x20000894

000139a4 <move_thread_to_end_of_prio_q>:
{
   139a4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   139a6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   139aa:	7b43      	ldrb	r3, [r0, #13]
   139ac:	2a00      	cmp	r2, #0
{
   139ae:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   139b0:	da04      	bge.n	139bc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   139b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   139b6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   139b8:	f001 fa26 	bl	14e08 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   139bc:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   139be:	4a15      	ldr	r2, [pc, #84]	; (13a14 <move_thread_to_end_of_prio_q+0x70>)
   139c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   139c4:	4610      	mov	r0, r2
   139c6:	734b      	strb	r3, [r1, #13]
   139c8:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   139cc:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   139ce:	4283      	cmp	r3, r0
   139d0:	bf08      	it	eq
   139d2:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   139d4:	b923      	cbnz	r3, 139e0 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   139d6:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   139da:	6021      	str	r1, [r4, #0]
	list->tail = node;
   139dc:	6211      	str	r1, [r2, #32]
}
   139de:	e00c      	b.n	139fa <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   139e0:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   139e4:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   139e8:	42b5      	cmp	r5, r6
   139ea:	d00e      	beq.n	13a0a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   139ec:	42ae      	cmp	r6, r5
   139ee:	dd0c      	ble.n	13a0a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   139f0:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   139f2:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   139f6:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   139f8:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   139fa:	6890      	ldr	r0, [r2, #8]
   139fc:	1a43      	subs	r3, r0, r1
   139fe:	4258      	negs	r0, r3
}
   13a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   13a04:	4158      	adcs	r0, r3
   13a06:	f7ff bfaf 	b.w	13968 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   13a0a:	429c      	cmp	r4, r3
   13a0c:	d0e3      	beq.n	139d6 <move_thread_to_end_of_prio_q+0x32>
   13a0e:	681b      	ldr	r3, [r3, #0]
   13a10:	e7e0      	b.n	139d4 <move_thread_to_end_of_prio_q+0x30>
   13a12:	bf00      	nop
   13a14:	20000894 	.word	0x20000894

00013a18 <ready_thread>:
{
   13a18:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   13a1a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   13a1e:	7b42      	ldrb	r2, [r0, #13]
   13a20:	2b00      	cmp	r3, #0
   13a22:	db29      	blt.n	13a78 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   13a24:	06d3      	lsls	r3, r2, #27
   13a26:	d127      	bne.n	13a78 <ready_thread+0x60>
	return node->next != NULL;
   13a28:	6983      	ldr	r3, [r0, #24]
   13a2a:	bb2b      	cbnz	r3, 13a78 <ready_thread+0x60>
	return list->head == list;
   13a2c:	4913      	ldr	r1, [pc, #76]	; (13a7c <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   13a2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   13a32:	7342      	strb	r2, [r0, #13]
   13a34:	460a      	mov	r2, r1
   13a36:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13a3a:	4294      	cmp	r4, r2
   13a3c:	bf18      	it	ne
   13a3e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   13a40:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13a42:	b923      	cbnz	r3, 13a4e <ready_thread+0x36>
	node->prev = tail;
   13a44:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   13a48:	6020      	str	r0, [r4, #0]
	list->tail = node;
   13a4a:	6208      	str	r0, [r1, #32]
}
   13a4c:	e00c      	b.n	13a68 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   13a4e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   13a52:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   13a56:	42b5      	cmp	r5, r6
   13a58:	d00a      	beq.n	13a70 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   13a5a:	42ae      	cmp	r6, r5
   13a5c:	dd08      	ble.n	13a70 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   13a5e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   13a60:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   13a64:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   13a66:	6058      	str	r0, [r3, #4]
}
   13a68:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   13a6a:	2000      	movs	r0, #0
   13a6c:	f7ff bf7c 	b.w	13968 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   13a70:	42a3      	cmp	r3, r4
   13a72:	d0e7      	beq.n	13a44 <ready_thread+0x2c>
   13a74:	681b      	ldr	r3, [r3, #0]
   13a76:	e7e4      	b.n	13a42 <ready_thread+0x2a>
}
   13a78:	bc70      	pop	{r4, r5, r6}
   13a7a:	4770      	bx	lr
   13a7c:	20000894 	.word	0x20000894

00013a80 <unready_thread>:
{
   13a80:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   13a82:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   13a86:	7b43      	ldrb	r3, [r0, #13]
   13a88:	2a00      	cmp	r2, #0
{
   13a8a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   13a8c:	da04      	bge.n	13a98 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   13a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   13a92:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   13a94:	f001 f9b8 	bl	14e08 <sys_dlist_remove>
	update_cache(thread == _current);
   13a98:	4b04      	ldr	r3, [pc, #16]	; (13aac <unready_thread+0x2c>)
   13a9a:	6898      	ldr	r0, [r3, #8]
   13a9c:	1a43      	subs	r3, r0, r1
   13a9e:	4258      	negs	r0, r3
   13aa0:	4158      	adcs	r0, r3
}
   13aa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   13aa6:	f7ff bf5f 	b.w	13968 <update_cache>
   13aaa:	bf00      	nop
   13aac:	20000894 	.word	0x20000894

00013ab0 <pend_locked>:
{
   13ab0:	b570      	push	{r4, r5, r6, lr}
   13ab2:	4615      	mov	r5, r2
   13ab4:	461c      	mov	r4, r3
   13ab6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   13ab8:	f001 f9b8 	bl	14e2c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13abc:	f1b4 3fff 	cmp.w	r4, #4294967295
   13ac0:	bf08      	it	eq
   13ac2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   13ac6:	d008      	beq.n	13ada <pend_locked+0x2a>
   13ac8:	462a      	mov	r2, r5
   13aca:	4623      	mov	r3, r4
   13acc:	f106 0018 	add.w	r0, r6, #24
   13ad0:	4902      	ldr	r1, [pc, #8]	; (13adc <pend_locked+0x2c>)
}
   13ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13ad6:	f000 ba93 	b.w	14000 <z_add_timeout>
   13ada:	bd70      	pop	{r4, r5, r6, pc}
   13adc:	00014ee1 	.word	0x00014ee1

00013ae0 <z_time_slice>:
{
   13ae0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   13ae2:	f04f 0320 	mov.w	r3, #32
   13ae6:	f3ef 8511 	mrs	r5, BASEPRI
   13aea:	f383 8812 	msr	BASEPRI_MAX, r3
   13aee:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   13af2:	4b10      	ldr	r3, [pc, #64]	; (13b34 <z_time_slice+0x54>)
	if (pending_current == curr) {
   13af4:	4a10      	ldr	r2, [pc, #64]	; (13b38 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   13af6:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   13af8:	6810      	ldr	r0, [r2, #0]
   13afa:	42a0      	cmp	r0, r4
   13afc:	d106      	bne.n	13b0c <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   13afe:	f7ff ff0b 	bl	13918 <z_reset_time_slice>
	__asm__ volatile(
   13b02:	f385 8811 	msr	BASEPRI, r5
   13b06:	f3bf 8f6f 	isb	sy
}
   13b0a:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   13b0c:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   13b0e:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   13b10:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   13b12:	4a0a      	ldr	r2, [pc, #40]	; (13b3c <z_time_slice+0x5c>)
   13b14:	5cd3      	ldrb	r3, [r2, r3]
   13b16:	2b00      	cmp	r3, #0
   13b18:	d0f3      	beq.n	13b02 <z_time_slice+0x22>
   13b1a:	4620      	mov	r0, r4
   13b1c:	f7ff fece 	bl	138bc <sliceable>
   13b20:	2800      	cmp	r0, #0
   13b22:	d0ee      	beq.n	13b02 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   13b24:	7b63      	ldrb	r3, [r4, #13]
   13b26:	06db      	lsls	r3, r3, #27
   13b28:	d102      	bne.n	13b30 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   13b2a:	4620      	mov	r0, r4
   13b2c:	f7ff ff3a 	bl	139a4 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   13b30:	4620      	mov	r0, r4
   13b32:	e7e4      	b.n	13afe <z_time_slice+0x1e>
   13b34:	20000894 	.word	0x20000894
   13b38:	200008b8 	.word	0x200008b8
   13b3c:	20000aa2 	.word	0x20000aa2

00013b40 <z_pend_curr>:
{
   13b40:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   13b42:	480c      	ldr	r0, [pc, #48]	; (13b74 <z_pend_curr+0x34>)
   13b44:	4d0c      	ldr	r5, [pc, #48]	; (13b78 <z_pend_curr+0x38>)
   13b46:	6886      	ldr	r6, [r0, #8]
   13b48:	602e      	str	r6, [r5, #0]
{
   13b4a:	460c      	mov	r4, r1
   13b4c:	4611      	mov	r1, r2
   13b4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   13b52:	f04f 0620 	mov.w	r6, #32
   13b56:	f3ef 8511 	mrs	r5, BASEPRI
   13b5a:	f386 8812 	msr	BASEPRI_MAX, r6
   13b5e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   13b62:	6880      	ldr	r0, [r0, #8]
   13b64:	f7ff ffa4 	bl	13ab0 <pend_locked>
	ret = arch_swap(key);
   13b68:	4620      	mov	r0, r4
}
   13b6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13b6e:	f7fd bbdd 	b.w	1132c <arch_swap>
   13b72:	bf00      	nop
   13b74:	20000894 	.word	0x20000894
   13b78:	200008b8 	.word	0x200008b8

00013b7c <z_set_prio>:
{
   13b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b7e:	4604      	mov	r4, r0
   13b80:	f04f 0320 	mov.w	r3, #32
   13b84:	f3ef 8611 	mrs	r6, BASEPRI
   13b88:	f383 8812 	msr	BASEPRI_MAX, r3
   13b8c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   13b90:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   13b92:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   13b94:	b249      	sxtb	r1, r1
   13b96:	d119      	bne.n	13bcc <z_set_prio+0x50>
	return node->next != NULL;
   13b98:	6985      	ldr	r5, [r0, #24]
   13b9a:	b9bd      	cbnz	r5, 13bcc <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   13b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   13ba0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   13ba2:	f001 f931 	bl	14e08 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   13ba6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   13ba8:	4a16      	ldr	r2, [pc, #88]	; (13c04 <z_set_prio+0x88>)
				thread->base.prio = prio;
   13baa:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   13bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13bb0:	7343      	strb	r3, [r0, #13]
   13bb2:	4613      	mov	r3, r2
   13bb4:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13bb8:	4298      	cmp	r0, r3
   13bba:	bf18      	it	ne
   13bbc:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   13bbe:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13bc0:	b95d      	cbnz	r5, 13bda <z_set_prio+0x5e>
	node->prev = tail;
   13bc2:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   13bc6:	6004      	str	r4, [r0, #0]
	list->tail = node;
   13bc8:	6214      	str	r4, [r2, #32]
}
   13bca:	e011      	b.n	13bf0 <z_set_prio+0x74>
			thread->base.prio = prio;
   13bcc:	73a1      	strb	r1, [r4, #14]
   13bce:	2000      	movs	r0, #0
	__asm__ volatile(
   13bd0:	f386 8811 	msr	BASEPRI, r6
   13bd4:	f3bf 8f6f 	isb	sy
}
   13bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   13bda:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   13bde:	42b9      	cmp	r1, r7
   13be0:	d00b      	beq.n	13bfa <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   13be2:	428f      	cmp	r7, r1
   13be4:	dd09      	ble.n	13bfa <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   13be6:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   13be8:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   13bec:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   13bee:	606c      	str	r4, [r5, #4]
			update_cache(1);
   13bf0:	2001      	movs	r0, #1
   13bf2:	f7ff feb9 	bl	13968 <update_cache>
   13bf6:	2001      	movs	r0, #1
   13bf8:	e7ea      	b.n	13bd0 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   13bfa:	42a8      	cmp	r0, r5
   13bfc:	d0e1      	beq.n	13bc2 <z_set_prio+0x46>
   13bfe:	682d      	ldr	r5, [r5, #0]
   13c00:	e7de      	b.n	13bc0 <z_set_prio+0x44>
   13c02:	bf00      	nop
   13c04:	20000894 	.word	0x20000894

00013c08 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   13c08:	b949      	cbnz	r1, 13c1e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13c0a:	f3ef 8005 	mrs	r0, IPSR
   13c0e:	b930      	cbnz	r0, 13c1e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   13c10:	4b05      	ldr	r3, [pc, #20]	; (13c28 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   13c12:	699a      	ldr	r2, [r3, #24]
   13c14:	689b      	ldr	r3, [r3, #8]
   13c16:	429a      	cmp	r2, r3
   13c18:	d001      	beq.n	13c1e <z_reschedule+0x16>
   13c1a:	f7fd bb87 	b.w	1132c <arch_swap>
   13c1e:	f381 8811 	msr	BASEPRI, r1
   13c22:	f3bf 8f6f 	isb	sy
}
   13c26:	4770      	bx	lr
   13c28:	20000894 	.word	0x20000894

00013c2c <z_sched_start>:
{
   13c2c:	b510      	push	{r4, lr}
	__asm__ volatile(
   13c2e:	f04f 0220 	mov.w	r2, #32
   13c32:	f3ef 8411 	mrs	r4, BASEPRI
   13c36:	f382 8812 	msr	BASEPRI_MAX, r2
   13c3a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   13c3e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   13c40:	0751      	lsls	r1, r2, #29
   13c42:	d404      	bmi.n	13c4e <z_sched_start+0x22>
	__asm__ volatile(
   13c44:	f384 8811 	msr	BASEPRI, r4
   13c48:	f3bf 8f6f 	isb	sy
}
   13c4c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13c4e:	f022 0204 	bic.w	r2, r2, #4
   13c52:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   13c54:	f7ff fee0 	bl	13a18 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   13c58:	4621      	mov	r1, r4
   13c5a:	4802      	ldr	r0, [pc, #8]	; (13c64 <z_sched_start+0x38>)
}
   13c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   13c60:	f7ff bfd2 	b.w	13c08 <z_reschedule>
   13c64:	20000aa3 	.word	0x20000aa3

00013c68 <z_impl_k_thread_suspend>:
{
   13c68:	b570      	push	{r4, r5, r6, lr}
   13c6a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   13c6c:	3018      	adds	r0, #24
   13c6e:	f001 f96d 	bl	14f4c <z_abort_timeout>
	__asm__ volatile(
   13c72:	f04f 0320 	mov.w	r3, #32
   13c76:	f3ef 8611 	mrs	r6, BASEPRI
   13c7a:	f383 8812 	msr	BASEPRI_MAX, r3
   13c7e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   13c82:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   13c86:	7b63      	ldrb	r3, [r4, #13]
   13c88:	2a00      	cmp	r2, #0
   13c8a:	da05      	bge.n	13c98 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   13c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   13c90:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   13c92:	4620      	mov	r0, r4
   13c94:	f001 f8b8 	bl	14e08 <sys_dlist_remove>
		update_cache(thread == _current);
   13c98:	4d0b      	ldr	r5, [pc, #44]	; (13cc8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   13c9a:	7b63      	ldrb	r3, [r4, #13]
   13c9c:	68a8      	ldr	r0, [r5, #8]
   13c9e:	f043 0310 	orr.w	r3, r3, #16
   13ca2:	7363      	strb	r3, [r4, #13]
   13ca4:	1b03      	subs	r3, r0, r4
   13ca6:	4258      	negs	r0, r3
   13ca8:	4158      	adcs	r0, r3
   13caa:	f7ff fe5d 	bl	13968 <update_cache>
	__asm__ volatile(
   13cae:	f386 8811 	msr	BASEPRI, r6
   13cb2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   13cb6:	68ab      	ldr	r3, [r5, #8]
   13cb8:	42a3      	cmp	r3, r4
   13cba:	d103      	bne.n	13cc4 <z_impl_k_thread_suspend+0x5c>
}
   13cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   13cc0:	f001 b93a 	b.w	14f38 <z_reschedule_unlocked>
}
   13cc4:	bd70      	pop	{r4, r5, r6, pc}
   13cc6:	bf00      	nop
   13cc8:	20000894 	.word	0x20000894

00013ccc <k_sched_lock>:
	__asm__ volatile(
   13ccc:	f04f 0320 	mov.w	r3, #32
   13cd0:	f3ef 8111 	mrs	r1, BASEPRI
   13cd4:	f383 8812 	msr	BASEPRI_MAX, r3
   13cd8:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   13cdc:	4b04      	ldr	r3, [pc, #16]	; (13cf0 <k_sched_lock+0x24>)
   13cde:	689a      	ldr	r2, [r3, #8]
   13ce0:	7bd3      	ldrb	r3, [r2, #15]
   13ce2:	3b01      	subs	r3, #1
   13ce4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   13ce6:	f381 8811 	msr	BASEPRI, r1
   13cea:	f3bf 8f6f 	isb	sy
}
   13cee:	4770      	bx	lr
   13cf0:	20000894 	.word	0x20000894

00013cf4 <k_sched_unlock>:
{
   13cf4:	b510      	push	{r4, lr}
	__asm__ volatile(
   13cf6:	f04f 0320 	mov.w	r3, #32
   13cfa:	f3ef 8411 	mrs	r4, BASEPRI
   13cfe:	f383 8812 	msr	BASEPRI_MAX, r3
   13d02:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   13d06:	4b08      	ldr	r3, [pc, #32]	; (13d28 <k_sched_unlock+0x34>)
   13d08:	689a      	ldr	r2, [r3, #8]
   13d0a:	7bd3      	ldrb	r3, [r2, #15]
   13d0c:	3301      	adds	r3, #1
   13d0e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   13d10:	2000      	movs	r0, #0
   13d12:	f7ff fe29 	bl	13968 <update_cache>
	__asm__ volatile(
   13d16:	f384 8811 	msr	BASEPRI, r4
   13d1a:	f3bf 8f6f 	isb	sy
}
   13d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   13d22:	f001 b909 	b.w	14f38 <z_reschedule_unlocked>
   13d26:	bf00      	nop
   13d28:	20000894 	.word	0x20000894

00013d2c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   13d2c:	4b02      	ldr	r3, [pc, #8]	; (13d38 <z_sched_init+0xc>)
   13d2e:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   13d32:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   13d36:	4770      	bx	lr
   13d38:	20000894 	.word	0x20000894

00013d3c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   13d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   13d3e:	f04f 0320 	mov.w	r3, #32
   13d42:	f3ef 8511 	mrs	r5, BASEPRI
   13d46:	f383 8812 	msr	BASEPRI_MAX, r3
   13d4a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   13d4e:	4919      	ldr	r1, [pc, #100]	; (13db4 <z_impl_k_yield+0x78>)
   13d50:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   13d52:	7b43      	ldrb	r3, [r0, #13]
   13d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   13d58:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   13d5a:	f001 f855 	bl	14e08 <sys_dlist_remove>
	}
	queue_thread(_current);
   13d5e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   13d60:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   13d62:	4608      	mov	r0, r1
   13d64:	f062 027f 	orn	r2, r2, #127	; 0x7f
   13d68:	735a      	strb	r2, [r3, #13]
   13d6a:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   13d6e:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13d70:	4282      	cmp	r2, r0
   13d72:	bf08      	it	eq
   13d74:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13d76:	b922      	cbnz	r2, 13d82 <z_impl_k_yield+0x46>
	node->prev = tail;
   13d78:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   13d7c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   13d7e:	620b      	str	r3, [r1, #32]
}
   13d80:	e00c      	b.n	13d9c <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   13d82:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   13d86:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   13d8a:	42be      	cmp	r6, r7
   13d8c:	d00e      	beq.n	13dac <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   13d8e:	42b7      	cmp	r7, r6
   13d90:	dd0c      	ble.n	13dac <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   13d92:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   13d94:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   13d98:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   13d9a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   13d9c:	2001      	movs	r0, #1
   13d9e:	f7ff fde3 	bl	13968 <update_cache>
   13da2:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   13da4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   13da8:	f7fd bac0 	b.w	1132c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   13dac:	42a2      	cmp	r2, r4
   13dae:	d0e3      	beq.n	13d78 <z_impl_k_yield+0x3c>
   13db0:	6812      	ldr	r2, [r2, #0]
   13db2:	e7e0      	b.n	13d76 <z_impl_k_yield+0x3a>
   13db4:	20000894 	.word	0x20000894

00013db8 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   13db8:	ea50 0301 	orrs.w	r3, r0, r1
{
   13dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13dc0:	4605      	mov	r5, r0
   13dc2:	460e      	mov	r6, r1
	if (ticks == 0) {
   13dc4:	d103      	bne.n	13dce <z_tick_sleep+0x16>
	z_impl_k_yield();
   13dc6:	f7ff ffb9 	bl	13d3c <z_impl_k_yield>
		k_yield();
		return 0;
   13dca:	2000      	movs	r0, #0
   13dcc:	e02c      	b.n	13e28 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   13dce:	1c83      	adds	r3, r0, #2
   13dd0:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   13dd4:	db2a      	blt.n	13e2c <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   13dd6:	f001 f8df 	bl	14f98 <sys_clock_tick_get_32>
   13dda:	182c      	adds	r4, r5, r0
   13ddc:	f04f 0320 	mov.w	r3, #32
   13de0:	f3ef 8811 	mrs	r8, BASEPRI
   13de4:	f383 8812 	msr	BASEPRI_MAX, r3
   13de8:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   13dec:	4f11      	ldr	r7, [pc, #68]	; (13e34 <z_tick_sleep+0x7c>)
   13dee:	4b12      	ldr	r3, [pc, #72]	; (13e38 <z_tick_sleep+0x80>)
   13df0:	68b8      	ldr	r0, [r7, #8]
   13df2:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   13df4:	f7ff fe44 	bl	13a80 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   13df8:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   13dfa:	4910      	ldr	r1, [pc, #64]	; (13e3c <z_tick_sleep+0x84>)
   13dfc:	462a      	mov	r2, r5
   13dfe:	4633      	mov	r3, r6
   13e00:	3018      	adds	r0, #24
   13e02:	f000 f8fd 	bl	14000 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   13e06:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   13e08:	7b53      	ldrb	r3, [r2, #13]
   13e0a:	f043 0310 	orr.w	r3, r3, #16
   13e0e:	7353      	strb	r3, [r2, #13]
   13e10:	4640      	mov	r0, r8
   13e12:	f7fd fa8b 	bl	1132c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   13e16:	f001 f8bf 	bl	14f98 <sys_clock_tick_get_32>
   13e1a:	1a20      	subs	r0, r4, r0
   13e1c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   13e20:	2801      	cmp	r0, #1
   13e22:	f173 0300 	sbcs.w	r3, r3, #0
   13e26:	dbd0      	blt.n	13dca <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   13e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   13e2c:	f06f 0401 	mvn.w	r4, #1
   13e30:	1a24      	subs	r4, r4, r0
   13e32:	e7d3      	b.n	13ddc <z_tick_sleep+0x24>
   13e34:	20000894 	.word	0x20000894
   13e38:	200008b8 	.word	0x200008b8
   13e3c:	00014ee1 	.word	0x00014ee1

00013e40 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13e40:	f1b1 3fff 	cmp.w	r1, #4294967295
   13e44:	bf08      	it	eq
   13e46:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   13e4a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13e4c:	d106      	bne.n	13e5c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   13e4e:	4b08      	ldr	r3, [pc, #32]	; (13e70 <z_impl_k_sleep+0x30>)
   13e50:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   13e52:	f7ff ff09 	bl	13c68 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   13e56:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   13e5a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   13e5c:	f7ff ffac 	bl	13db8 <z_tick_sleep>
   13e60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   13e64:	fb80 0303 	smull	r0, r3, r0, r3
   13e68:	0bc0      	lsrs	r0, r0, #15
   13e6a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   13e6e:	e7f4      	b.n	13e5a <z_impl_k_sleep+0x1a>
   13e70:	20000894 	.word	0x20000894

00013e74 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   13e74:	4b01      	ldr	r3, [pc, #4]	; (13e7c <z_impl_z_current_get+0x8>)
   13e76:	6898      	ldr	r0, [r3, #8]
   13e78:	4770      	bx	lr
   13e7a:	bf00      	nop
   13e7c:	20000894 	.word	0x20000894

00013e80 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   13e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e84:	4604      	mov	r4, r0
   13e86:	f04f 0320 	mov.w	r3, #32
   13e8a:	f3ef 8611 	mrs	r6, BASEPRI
   13e8e:	f383 8812 	msr	BASEPRI_MAX, r3
   13e92:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   13e96:	7b03      	ldrb	r3, [r0, #12]
   13e98:	07d9      	lsls	r1, r3, #31
   13e9a:	d50b      	bpl.n	13eb4 <z_thread_abort+0x34>
	__asm__ volatile(
   13e9c:	f386 8811 	msr	BASEPRI, r6
   13ea0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   13ea4:	4040      	eors	r0, r0
   13ea6:	f380 8811 	msr	BASEPRI, r0
   13eaa:	f04f 0004 	mov.w	r0, #4
   13eae:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   13eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   13eb4:	7b43      	ldrb	r3, [r0, #13]
   13eb6:	071a      	lsls	r2, r3, #28
   13eb8:	d504      	bpl.n	13ec4 <z_thread_abort+0x44>
   13eba:	f386 8811 	msr	BASEPRI, r6
   13ebe:	f3bf 8f6f 	isb	sy
   13ec2:	e7f5      	b.n	13eb0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   13ec4:	f023 0220 	bic.w	r2, r3, #32
   13ec8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   13ecc:	09d2      	lsrs	r2, r2, #7
   13ece:	d120      	bne.n	13f12 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   13ed0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   13ed2:	68a3      	ldr	r3, [r4, #8]
   13ed4:	b113      	cbz	r3, 13edc <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   13ed6:	4620      	mov	r0, r4
   13ed8:	f000 ff9e 	bl	14e18 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   13edc:	f104 0018 	add.w	r0, r4, #24
   13ee0:	f001 f834 	bl	14f4c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   13ee4:	f104 0758 	add.w	r7, r4, #88	; 0x58
   13ee8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   13eec:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13eee:	42bd      	cmp	r5, r7
   13ef0:	d000      	beq.n	13ef4 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   13ef2:	b9b5      	cbnz	r5, 13f22 <z_thread_abort+0xa2>
		update_cache(1);
   13ef4:	2001      	movs	r0, #1
   13ef6:	f7ff fd37 	bl	13968 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   13efa:	4b10      	ldr	r3, [pc, #64]	; (13f3c <z_thread_abort+0xbc>)
   13efc:	689b      	ldr	r3, [r3, #8]
   13efe:	42a3      	cmp	r3, r4
   13f00:	d1db      	bne.n	13eba <z_thread_abort+0x3a>
   13f02:	f3ef 8305 	mrs	r3, IPSR
   13f06:	2b00      	cmp	r3, #0
   13f08:	d1d7      	bne.n	13eba <z_thread_abort+0x3a>
   13f0a:	4630      	mov	r0, r6
   13f0c:	f7fd fa0e 	bl	1132c <arch_swap>
	return ret;
   13f10:	e7d3      	b.n	13eba <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   13f12:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   13f16:	f043 0308 	orr.w	r3, r3, #8
   13f1a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   13f1c:	f000 ff74 	bl	14e08 <sys_dlist_remove>
}
   13f20:	e7d7      	b.n	13ed2 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   13f22:	4628      	mov	r0, r5
   13f24:	f000 ff78 	bl	14e18 <unpend_thread_no_timeout>
   13f28:	f105 0018 	add.w	r0, r5, #24
   13f2c:	f001 f80e 	bl	14f4c <z_abort_timeout>
   13f30:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
   13f34:	4628      	mov	r0, r5
   13f36:	f7ff fd6f 	bl	13a18 <ready_thread>
   13f3a:	e7d7      	b.n	13eec <z_thread_abort+0x6c>
   13f3c:	20000894 	.word	0x20000894

00013f40 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   13f40:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   13f42:	4806      	ldr	r0, [pc, #24]	; (13f5c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   13f44:	4a06      	ldr	r2, [pc, #24]	; (13f60 <z_data_copy+0x20>)
   13f46:	4907      	ldr	r1, [pc, #28]	; (13f64 <z_data_copy+0x24>)
   13f48:	1a12      	subs	r2, r2, r0
   13f4a:	f000 fef2 	bl	14d32 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   13f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   13f52:	4a05      	ldr	r2, [pc, #20]	; (13f68 <z_data_copy+0x28>)
   13f54:	4905      	ldr	r1, [pc, #20]	; (13f6c <z_data_copy+0x2c>)
   13f56:	4806      	ldr	r0, [pc, #24]	; (13f70 <z_data_copy+0x30>)
   13f58:	f000 beeb 	b.w	14d32 <z_early_memcpy>
   13f5c:	20000000 	.word	0x20000000
   13f60:	20000170 	.word	0x20000170
   13f64:	00015594 	.word	0x00015594
   13f68:	00000000 	.word	0x00000000
   13f6c:	00015594 	.word	0x00015594
   13f70:	20000000 	.word	0x20000000

00013f74 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   13f74:	4b03      	ldr	r3, [pc, #12]	; (13f84 <elapsed+0x10>)
   13f76:	681b      	ldr	r3, [r3, #0]
   13f78:	b90b      	cbnz	r3, 13f7e <elapsed+0xa>
   13f7a:	f7fe bc5d 	b.w	12838 <sys_clock_elapsed>
}
   13f7e:	2000      	movs	r0, #0
   13f80:	4770      	bx	lr
   13f82:	bf00      	nop
   13f84:	200008c4 	.word	0x200008c4

00013f88 <next_timeout>:

static int32_t next_timeout(void)
{
   13f88:	b510      	push	{r4, lr}
	return list->head == list;
   13f8a:	4b0e      	ldr	r3, [pc, #56]	; (13fc4 <next_timeout+0x3c>)
   13f8c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13f8e:	429c      	cmp	r4, r3
   13f90:	d104      	bne.n	13f9c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   13f92:	f7ff ffef 	bl	13f74 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   13f96:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   13f9a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   13f9c:	f7ff ffea 	bl	13f74 <elapsed>
	if ((to == NULL) ||
   13fa0:	2c00      	cmp	r4, #0
   13fa2:	d0f8      	beq.n	13f96 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   13fa4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   13fa8:	1a1b      	subs	r3, r3, r0
   13faa:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   13fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   13fb2:	f172 0100 	sbcs.w	r1, r2, #0
   13fb6:	daee      	bge.n	13f96 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   13fb8:	2a00      	cmp	r2, #0
   13fba:	bfac      	ite	ge
   13fbc:	4618      	movge	r0, r3
   13fbe:	2000      	movlt	r0, #0
	return ret;
   13fc0:	e7eb      	b.n	13f9a <next_timeout+0x12>
   13fc2:	bf00      	nop
   13fc4:	200000b0 	.word	0x200000b0

00013fc8 <remove_timeout>:
{
   13fc8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13fca:	b170      	cbz	r0, 13fea <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   13fcc:	4b0b      	ldr	r3, [pc, #44]	; (13ffc <remove_timeout+0x34>)
   13fce:	685b      	ldr	r3, [r3, #4]
   13fd0:	4298      	cmp	r0, r3
   13fd2:	d00a      	beq.n	13fea <remove_timeout+0x22>
   13fd4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   13fd6:	b143      	cbz	r3, 13fea <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   13fd8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   13fdc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   13fe0:	1912      	adds	r2, r2, r4
   13fe2:	eb41 0105 	adc.w	r1, r1, r5
   13fe6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   13fea:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   13fee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   13ff0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   13ff2:	2300      	movs	r3, #0
	node->prev = NULL;
   13ff4:	e9c0 3300 	strd	r3, r3, [r0]
}
   13ff8:	bd30      	pop	{r4, r5, pc}
   13ffa:	bf00      	nop
   13ffc:	200000b0 	.word	0x200000b0

00014000 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14000:	f1b3 3fff 	cmp.w	r3, #4294967295
   14004:	bf08      	it	eq
   14006:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1400a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1400c:	4604      	mov	r4, r0
   1400e:	461d      	mov	r5, r3
   14010:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14012:	d05c      	beq.n	140ce <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   14014:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   14016:	f04f 0320 	mov.w	r3, #32
   1401a:	f3ef 8711 	mrs	r7, BASEPRI
   1401e:	f383 8812 	msr	BASEPRI_MAX, r3
   14022:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   14026:	3201      	adds	r2, #1
   14028:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   1402c:	da24      	bge.n	14078 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1402e:	492d      	ldr	r1, [pc, #180]	; (140e4 <z_add_timeout+0xe4>)
   14030:	e9d1 2000 	ldrd	r2, r0, [r1]
   14034:	f06f 0301 	mvn.w	r3, #1
   14038:	1a9b      	subs	r3, r3, r2
   1403a:	f04f 32ff 	mov.w	r2, #4294967295
   1403e:	eb62 0000 	sbc.w	r0, r2, r0
   14042:	1b9e      	subs	r6, r3, r6
   14044:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   14048:	2e01      	cmp	r6, #1
   1404a:	f170 0300 	sbcs.w	r3, r0, #0
   1404e:	da01      	bge.n	14054 <z_add_timeout+0x54>
   14050:	2601      	movs	r6, #1
   14052:	2000      	movs	r0, #0
   14054:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   14058:	4e23      	ldr	r6, [pc, #140]	; (140e8 <z_add_timeout+0xe8>)
   1405a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   1405e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14060:	45b4      	cmp	ip, r6
   14062:	bf08      	it	eq
   14064:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   14068:	f1bc 0f00 	cmp.w	ip, #0
   1406c:	d10d      	bne.n	1408a <z_add_timeout+0x8a>
	node->prev = tail;
   1406e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   14072:	602c      	str	r4, [r5, #0]
	list->tail = node;
   14074:	6074      	str	r4, [r6, #4]
}
   14076:	e01c      	b.n	140b2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   14078:	f7ff ff7c 	bl	13f74 <elapsed>
   1407c:	3601      	adds	r6, #1
   1407e:	f145 0500 	adc.w	r5, r5, #0
   14082:	1836      	adds	r6, r6, r0
   14084:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   14088:	e7e4      	b.n	14054 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   1408a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   1408e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   14092:	4293      	cmp	r3, r2
   14094:	eb71 0e00 	sbcs.w	lr, r1, r0
   14098:	da1a      	bge.n	140d0 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   1409a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   1409c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   140a0:	eb60 0001 	sbc.w	r0, r0, r1
   140a4:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   140a8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   140ac:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   140ae:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   140b2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   140b4:	42b3      	cmp	r3, r6
   140b6:	d006      	beq.n	140c6 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   140b8:	429c      	cmp	r4, r3
   140ba:	d104      	bne.n	140c6 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   140bc:	f7ff ff64 	bl	13f88 <next_timeout>
   140c0:	2100      	movs	r1, #0
   140c2:	f7fe fb87 	bl	127d4 <sys_clock_set_timeout>
	__asm__ volatile(
   140c6:	f387 8811 	msr	BASEPRI, r7
   140ca:	f3bf 8f6f 	isb	sy
		}
	}
}
   140ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   140d0:	1a9b      	subs	r3, r3, r2
   140d2:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   140d6:	45ac      	cmp	ip, r5
   140d8:	e9c4 3104 	strd	r3, r1, [r4, #16]
   140dc:	d0c7      	beq.n	1406e <z_add_timeout+0x6e>
   140de:	f8dc c000 	ldr.w	ip, [ip]
   140e2:	e7c1      	b.n	14068 <z_add_timeout+0x68>
   140e4:	200002a8 	.word	0x200002a8
   140e8:	200000b0 	.word	0x200000b0

000140ec <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   140ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   140f0:	f04f 0320 	mov.w	r3, #32
   140f4:	f3ef 8c11 	mrs	ip, BASEPRI
   140f8:	f383 8812 	msr	BASEPRI_MAX, r3
   140fc:	f3bf 8f6f 	isb	sy
	return list->head == list;
   14100:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 141b4 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   14104:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 141b8 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   14108:	4f2c      	ldr	r7, [pc, #176]	; (141bc <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   1410a:	f8c9 0000 	str.w	r0, [r9]
   1410e:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   14112:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14114:	4550      	cmp	r0, sl
   14116:	bf08      	it	eq
   14118:	2000      	moveq	r0, #0
   1411a:	2500      	movs	r5, #0
		curr_tick += dt;
   1411c:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   14120:	f8d9 3000 	ldr.w	r3, [r9]
   14124:	46e0      	mov	r8, ip
   14126:	b380      	cbz	r0, 1418a <sys_clock_announce+0x9e>
   14128:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   1412c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   14130:	42b3      	cmp	r3, r6
   14132:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   14136:	da05      	bge.n	14144 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   14138:	1af6      	subs	r6, r6, r3
   1413a:	eb6c 040e 	sbc.w	r4, ip, lr
   1413e:	e9c0 6404 	strd	r6, r4, [r0, #16]
   14142:	e022      	b.n	1418a <sys_clock_announce+0x9e>
		curr_tick += dt;
   14144:	18b2      	adds	r2, r6, r2
   14146:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   1414a:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   1414e:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   14152:	f7ff ff39 	bl	13fc8 <remove_timeout>
	__asm__ volatile(
   14156:	f388 8811 	msr	BASEPRI, r8
   1415a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1415e:	6883      	ldr	r3, [r0, #8]
   14160:	4798      	blx	r3
	__asm__ volatile(
   14162:	f04f 0320 	mov.w	r3, #32
   14166:	f3ef 8811 	mrs	r8, BASEPRI
   1416a:	f383 8812 	msr	BASEPRI_MAX, r3
   1416e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   14172:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   14176:	f8da 0000 	ldr.w	r0, [sl]
   1417a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1417c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   1417e:	46c4      	mov	ip, r8
   14180:	f8c9 3000 	str.w	r3, [r9]
   14184:	d1ca      	bne.n	1411c <sys_clock_announce+0x30>
		curr_tick += dt;
   14186:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   1418a:	189a      	adds	r2, r3, r2
   1418c:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   14190:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   14192:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   14196:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   1419a:	f7ff fef5 	bl	13f88 <next_timeout>
   1419e:	4621      	mov	r1, r4
   141a0:	f7fe fb18 	bl	127d4 <sys_clock_set_timeout>
	__asm__ volatile(
   141a4:	f388 8811 	msr	BASEPRI, r8
   141a8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   141ac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   141b0:	f7ff bc96 	b.w	13ae0 <z_time_slice>
   141b4:	200000b0 	.word	0x200000b0
   141b8:	200008c4 	.word	0x200008c4
   141bc:	200002a8 	.word	0x200002a8

000141c0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   141c0:	b510      	push	{r4, lr}
	__asm__ volatile(
   141c2:	f04f 0320 	mov.w	r3, #32
   141c6:	f3ef 8411 	mrs	r4, BASEPRI
   141ca:	f383 8812 	msr	BASEPRI_MAX, r3
   141ce:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   141d2:	f7ff fecf 	bl	13f74 <elapsed>
   141d6:	4a06      	ldr	r2, [pc, #24]	; (141f0 <sys_clock_tick_get+0x30>)
   141d8:	4603      	mov	r3, r0
   141da:	e9d2 0100 	ldrd	r0, r1, [r2]
   141de:	1818      	adds	r0, r3, r0
   141e0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   141e4:	f384 8811 	msr	BASEPRI, r4
   141e8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   141ec:	bd10      	pop	{r4, pc}
   141ee:	bf00      	nop
   141f0:	200002a8 	.word	0x200002a8

000141f4 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   141f4:	4801      	ldr	r0, [pc, #4]	; (141fc <boot_banner+0x8>)
   141f6:	f000 b9f5 	b.w	145e4 <printk>
   141fa:	bf00      	nop
   141fc:	00015564 	.word	0x00015564

00014200 <nrf_cc3xx_platform_init_no_rng>:
   14200:	b510      	push	{r4, lr}
   14202:	4c0a      	ldr	r4, [pc, #40]	; (1422c <nrf_cc3xx_platform_init_no_rng+0x2c>)
   14204:	6823      	ldr	r3, [r4, #0]
   14206:	b11b      	cbz	r3, 14210 <nrf_cc3xx_platform_init_no_rng+0x10>
   14208:	2301      	movs	r3, #1
   1420a:	6023      	str	r3, [r4, #0]
   1420c:	2000      	movs	r0, #0
   1420e:	bd10      	pop	{r4, pc}
   14210:	f000 f8ea 	bl	143e8 <CC_LibInitNoRng>
   14214:	2800      	cmp	r0, #0
   14216:	d0f7      	beq.n	14208 <nrf_cc3xx_platform_init_no_rng+0x8>
   14218:	3801      	subs	r0, #1
   1421a:	2806      	cmp	r0, #6
   1421c:	d803      	bhi.n	14226 <nrf_cc3xx_platform_init_no_rng+0x26>
   1421e:	4b04      	ldr	r3, [pc, #16]	; (14230 <nrf_cc3xx_platform_init_no_rng+0x30>)
   14220:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   14224:	bd10      	pop	{r4, pc}
   14226:	4803      	ldr	r0, [pc, #12]	; (14234 <nrf_cc3xx_platform_init_no_rng+0x34>)
   14228:	bd10      	pop	{r4, pc}
   1422a:	bf00      	nop
   1422c:	200008c8 	.word	0x200008c8
   14230:	0001538c 	.word	0x0001538c
   14234:	ffff8ffe 	.word	0xffff8ffe

00014238 <nrf_cc3xx_platform_abort>:
   14238:	f3bf 8f4f 	dsb	sy
   1423c:	4905      	ldr	r1, [pc, #20]	; (14254 <nrf_cc3xx_platform_abort+0x1c>)
   1423e:	4b06      	ldr	r3, [pc, #24]	; (14258 <nrf_cc3xx_platform_abort+0x20>)
   14240:	68ca      	ldr	r2, [r1, #12]
   14242:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14246:	4313      	orrs	r3, r2
   14248:	60cb      	str	r3, [r1, #12]
   1424a:	f3bf 8f4f 	dsb	sy
   1424e:	bf00      	nop
   14250:	e7fd      	b.n	1424e <nrf_cc3xx_platform_abort+0x16>
   14252:	bf00      	nop
   14254:	e000ed00 	.word	0xe000ed00
   14258:	05fa0004 	.word	0x05fa0004

0001425c <CC_PalAbort>:
   1425c:	b410      	push	{r4}
   1425e:	4b09      	ldr	r3, [pc, #36]	; (14284 <CC_PalAbort+0x28>)
   14260:	4909      	ldr	r1, [pc, #36]	; (14288 <CC_PalAbort+0x2c>)
   14262:	4c0a      	ldr	r4, [pc, #40]	; (1428c <CC_PalAbort+0x30>)
   14264:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   14268:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1426c:	6849      	ldr	r1, [r1, #4]
   1426e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   14272:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   14276:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1427a:	2300      	movs	r3, #0
   1427c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   14280:	bc10      	pop	{r4}
   14282:	4708      	bx	r1
   14284:	5002b000 	.word	0x5002b000
   14288:	200000b8 	.word	0x200000b8
   1428c:	5002a000 	.word	0x5002a000

00014290 <nrf_cc3xx_platform_set_abort>:
   14290:	e9d0 1200 	ldrd	r1, r2, [r0]
   14294:	4b01      	ldr	r3, [pc, #4]	; (1429c <nrf_cc3xx_platform_set_abort+0xc>)
   14296:	e9c3 1200 	strd	r1, r2, [r3]
   1429a:	4770      	bx	lr
   1429c:	200000b8 	.word	0x200000b8

000142a0 <mutex_free>:
   142a0:	b510      	push	{r4, lr}
   142a2:	4604      	mov	r4, r0
   142a4:	b150      	cbz	r0, 142bc <mutex_free+0x1c>
   142a6:	6863      	ldr	r3, [r4, #4]
   142a8:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   142ac:	d005      	beq.n	142ba <mutex_free+0x1a>
   142ae:	4a06      	ldr	r2, [pc, #24]	; (142c8 <mutex_free+0x28>)
   142b0:	4293      	cmp	r3, r2
   142b2:	d002      	beq.n	142ba <mutex_free+0x1a>
   142b4:	2300      	movs	r3, #0
   142b6:	6023      	str	r3, [r4, #0]
   142b8:	6062      	str	r2, [r4, #4]
   142ba:	bd10      	pop	{r4, pc}
   142bc:	4b03      	ldr	r3, [pc, #12]	; (142cc <mutex_free+0x2c>)
   142be:	4804      	ldr	r0, [pc, #16]	; (142d0 <mutex_free+0x30>)
   142c0:	685b      	ldr	r3, [r3, #4]
   142c2:	4798      	blx	r3
   142c4:	e7ef      	b.n	142a6 <mutex_free+0x6>
   142c6:	bf00      	nop
   142c8:	a95c5f2c 	.word	0xa95c5f2c
   142cc:	200000b8 	.word	0x200000b8
   142d0:	000153a8 	.word	0x000153a8

000142d4 <mutex_lock>:
   142d4:	b1c8      	cbz	r0, 1430a <mutex_lock+0x36>
   142d6:	6843      	ldr	r3, [r0, #4]
   142d8:	4a0d      	ldr	r2, [pc, #52]	; (14310 <mutex_lock+0x3c>)
   142da:	4293      	cmp	r3, r2
   142dc:	d013      	beq.n	14306 <mutex_lock+0x32>
   142de:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   142e2:	d00e      	beq.n	14302 <mutex_lock+0x2e>
   142e4:	2301      	movs	r3, #1
   142e6:	e850 2f00 	ldrex	r2, [r0]
   142ea:	4619      	mov	r1, r3
   142ec:	e840 1c00 	strex	ip, r1, [r0]
   142f0:	f09c 0f00 	teq	ip, #0
   142f4:	d1f7      	bne.n	142e6 <mutex_lock+0x12>
   142f6:	2a01      	cmp	r2, #1
   142f8:	d0f5      	beq.n	142e6 <mutex_lock+0x12>
   142fa:	f3bf 8f5f 	dmb	sy
   142fe:	2000      	movs	r0, #0
   14300:	4770      	bx	lr
   14302:	4804      	ldr	r0, [pc, #16]	; (14314 <mutex_lock+0x40>)
   14304:	4770      	bx	lr
   14306:	4804      	ldr	r0, [pc, #16]	; (14318 <mutex_lock+0x44>)
   14308:	4770      	bx	lr
   1430a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1430e:	4770      	bx	lr
   14310:	a95c5f2c 	.word	0xa95c5f2c
   14314:	ffff8fe9 	.word	0xffff8fe9
   14318:	ffff8fea 	.word	0xffff8fea

0001431c <mutex_unlock>:
   1431c:	b180      	cbz	r0, 14340 <mutex_unlock+0x24>
   1431e:	6843      	ldr	r3, [r0, #4]
   14320:	4a09      	ldr	r2, [pc, #36]	; (14348 <mutex_unlock+0x2c>)
   14322:	4293      	cmp	r3, r2
   14324:	d00a      	beq.n	1433c <mutex_unlock+0x20>
   14326:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1432a:	d005      	beq.n	14338 <mutex_unlock+0x1c>
   1432c:	f3bf 8f5f 	dmb	sy
   14330:	2300      	movs	r3, #0
   14332:	6003      	str	r3, [r0, #0]
   14334:	4618      	mov	r0, r3
   14336:	4770      	bx	lr
   14338:	4804      	ldr	r0, [pc, #16]	; (1434c <mutex_unlock+0x30>)
   1433a:	4770      	bx	lr
   1433c:	4804      	ldr	r0, [pc, #16]	; (14350 <mutex_unlock+0x34>)
   1433e:	4770      	bx	lr
   14340:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14344:	4770      	bx	lr
   14346:	bf00      	nop
   14348:	a95c5f2c 	.word	0xa95c5f2c
   1434c:	ffff8fe9 	.word	0xffff8fe9
   14350:	ffff8fea 	.word	0xffff8fea

00014354 <mutex_init>:
   14354:	b510      	push	{r4, lr}
   14356:	4604      	mov	r4, r0
   14358:	b120      	cbz	r0, 14364 <mutex_init+0x10>
   1435a:	4b04      	ldr	r3, [pc, #16]	; (1436c <mutex_init+0x18>)
   1435c:	6063      	str	r3, [r4, #4]
   1435e:	2200      	movs	r2, #0
   14360:	6022      	str	r2, [r4, #0]
   14362:	bd10      	pop	{r4, pc}
   14364:	4802      	ldr	r0, [pc, #8]	; (14370 <mutex_init+0x1c>)
   14366:	f7ff ff79 	bl	1425c <CC_PalAbort>
   1436a:	e7f6      	b.n	1435a <mutex_init+0x6>
   1436c:	3a00003a 	.word	0x3a00003a
   14370:	000153d0 	.word	0x000153d0

00014374 <nrf_cc3xx_platform_set_mutexes>:
   14374:	b570      	push	{r4, r5, r6, lr}
   14376:	e9d0 2300 	ldrd	r2, r3, [r0]
   1437a:	4c17      	ldr	r4, [pc, #92]	; (143d8 <nrf_cc3xx_platform_set_mutexes+0x64>)
   1437c:	4d17      	ldr	r5, [pc, #92]	; (143dc <nrf_cc3xx_platform_set_mutexes+0x68>)
   1437e:	6063      	str	r3, [r4, #4]
   14380:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   14384:	e9c4 3002 	strd	r3, r0, [r4, #8]
   14388:	6022      	str	r2, [r4, #0]
   1438a:	6848      	ldr	r0, [r1, #4]
   1438c:	f8d1 c000 	ldr.w	ip, [r1]
   14390:	4b13      	ldr	r3, [pc, #76]	; (143e0 <nrf_cc3xx_platform_set_mutexes+0x6c>)
   14392:	e9c3 c000 	strd	ip, r0, [r3]
   14396:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
   1439a:	f8d1 c008 	ldr.w	ip, [r1, #8]
   1439e:	f8c3 c008 	str.w	ip, [r3, #8]
   143a2:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
   143a6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   143aa:	6909      	ldr	r1, [r1, #16]
   143ac:	f8c3 c00c 	str.w	ip, [r3, #12]
   143b0:	6119      	str	r1, [r3, #16]
   143b2:	d010      	beq.n	143d6 <nrf_cc3xx_platform_set_mutexes+0x62>
   143b4:	490b      	ldr	r1, [pc, #44]	; (143e4 <nrf_cc3xx_platform_set_mutexes+0x70>)
   143b6:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   143ba:	2300      	movs	r3, #0
   143bc:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   143c0:	f505 708a 	add.w	r0, r5, #276	; 0x114
   143c4:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   143c8:	4790      	blx	r2
   143ca:	6823      	ldr	r3, [r4, #0]
   143cc:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   143d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   143d4:	4718      	bx	r3
   143d6:	bd70      	pop	{r4, r5, r6, pc}
   143d8:	200000d4 	.word	0x200000d4
   143dc:	200008e0 	.word	0x200008e0
   143e0:	200000c0 	.word	0x200000c0
   143e4:	a95c5f2c 	.word	0xa95c5f2c

000143e8 <CC_LibInitNoRng>:
   143e8:	b538      	push	{r3, r4, r5, lr}
   143ea:	f000 f82f 	bl	1444c <CC_HalInit>
   143ee:	b120      	cbz	r0, 143fa <CC_LibInitNoRng+0x12>
   143f0:	2403      	movs	r4, #3
   143f2:	f000 f863 	bl	144bc <CC_PalTerminate>
   143f6:	4620      	mov	r0, r4
   143f8:	bd38      	pop	{r3, r4, r5, pc}
   143fa:	f000 f831 	bl	14460 <CC_PalInit>
   143fe:	b998      	cbnz	r0, 14428 <CC_LibInitNoRng+0x40>
   14400:	f000 f8ac 	bl	1455c <CC_PalPowerSaveModeSelect>
   14404:	b998      	cbnz	r0, 1442e <CC_LibInitNoRng+0x46>
   14406:	4d0f      	ldr	r5, [pc, #60]	; (14444 <CC_LibInitNoRng+0x5c>)
   14408:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
   1440c:	0e1b      	lsrs	r3, r3, #24
   1440e:	2bf0      	cmp	r3, #240	; 0xf0
   14410:	d108      	bne.n	14424 <CC_LibInitNoRng+0x3c>
   14412:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
   14416:	4b0c      	ldr	r3, [pc, #48]	; (14448 <CC_LibInitNoRng+0x60>)
   14418:	429a      	cmp	r2, r3
   1441a:	d00a      	beq.n	14432 <CC_LibInitNoRng+0x4a>
   1441c:	2407      	movs	r4, #7
   1441e:	f000 f817 	bl	14450 <CC_HalTerminate>
   14422:	e7e6      	b.n	143f2 <CC_LibInitNoRng+0xa>
   14424:	2406      	movs	r4, #6
   14426:	e7fa      	b.n	1441e <CC_LibInitNoRng+0x36>
   14428:	2404      	movs	r4, #4
   1442a:	4620      	mov	r0, r4
   1442c:	bd38      	pop	{r3, r4, r5, pc}
   1442e:	2400      	movs	r4, #0
   14430:	e7f5      	b.n	1441e <CC_LibInitNoRng+0x36>
   14432:	2001      	movs	r0, #1
   14434:	f000 f892 	bl	1455c <CC_PalPowerSaveModeSelect>
   14438:	4604      	mov	r4, r0
   1443a:	2800      	cmp	r0, #0
   1443c:	d1f7      	bne.n	1442e <CC_LibInitNoRng+0x46>
   1443e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
   14442:	e7d8      	b.n	143f6 <CC_LibInitNoRng+0xe>
   14444:	5002b000 	.word	0x5002b000
   14448:	20e00000 	.word	0x20e00000

0001444c <CC_HalInit>:
   1444c:	2000      	movs	r0, #0
   1444e:	4770      	bx	lr

00014450 <CC_HalTerminate>:
   14450:	2000      	movs	r0, #0
   14452:	4770      	bx	lr

00014454 <CC_HalMaskInterrupt>:
   14454:	4b01      	ldr	r3, [pc, #4]	; (1445c <CC_HalMaskInterrupt+0x8>)
   14456:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   1445a:	4770      	bx	lr
   1445c:	5002b000 	.word	0x5002b000

00014460 <CC_PalInit>:
   14460:	b510      	push	{r4, lr}
   14462:	4811      	ldr	r0, [pc, #68]	; (144a8 <CC_PalInit+0x48>)
   14464:	f000 f848 	bl	144f8 <CC_PalMutexCreate>
   14468:	b100      	cbz	r0, 1446c <CC_PalInit+0xc>
   1446a:	bd10      	pop	{r4, pc}
   1446c:	480f      	ldr	r0, [pc, #60]	; (144ac <CC_PalInit+0x4c>)
   1446e:	f000 f843 	bl	144f8 <CC_PalMutexCreate>
   14472:	2800      	cmp	r0, #0
   14474:	d1f9      	bne.n	1446a <CC_PalInit+0xa>
   14476:	4c0e      	ldr	r4, [pc, #56]	; (144b0 <CC_PalInit+0x50>)
   14478:	4620      	mov	r0, r4
   1447a:	f000 f83d 	bl	144f8 <CC_PalMutexCreate>
   1447e:	2800      	cmp	r0, #0
   14480:	d1f3      	bne.n	1446a <CC_PalInit+0xa>
   14482:	4b0c      	ldr	r3, [pc, #48]	; (144b4 <CC_PalInit+0x54>)
   14484:	480c      	ldr	r0, [pc, #48]	; (144b8 <CC_PalInit+0x58>)
   14486:	601c      	str	r4, [r3, #0]
   14488:	f000 f836 	bl	144f8 <CC_PalMutexCreate>
   1448c:	4601      	mov	r1, r0
   1448e:	2800      	cmp	r0, #0
   14490:	d1eb      	bne.n	1446a <CC_PalInit+0xa>
   14492:	f000 f82d 	bl	144f0 <CC_PalDmaInit>
   14496:	4604      	mov	r4, r0
   14498:	b108      	cbz	r0, 1449e <CC_PalInit+0x3e>
   1449a:	4620      	mov	r0, r4
   1449c:	bd10      	pop	{r4, pc}
   1449e:	f000 f83f 	bl	14520 <CC_PalPowerSaveModeInit>
   144a2:	4620      	mov	r0, r4
   144a4:	e7fa      	b.n	1449c <CC_PalInit+0x3c>
   144a6:	bf00      	nop
   144a8:	20000114 	.word	0x20000114
   144ac:	20000110 	.word	0x20000110
   144b0:	2000010c 	.word	0x2000010c
   144b4:	20000104 	.word	0x20000104
   144b8:	20000108 	.word	0x20000108

000144bc <CC_PalTerminate>:
   144bc:	b508      	push	{r3, lr}
   144be:	4808      	ldr	r0, [pc, #32]	; (144e0 <CC_PalTerminate+0x24>)
   144c0:	f000 f824 	bl	1450c <CC_PalMutexDestroy>
   144c4:	4807      	ldr	r0, [pc, #28]	; (144e4 <CC_PalTerminate+0x28>)
   144c6:	f000 f821 	bl	1450c <CC_PalMutexDestroy>
   144ca:	4807      	ldr	r0, [pc, #28]	; (144e8 <CC_PalTerminate+0x2c>)
   144cc:	f000 f81e 	bl	1450c <CC_PalMutexDestroy>
   144d0:	4806      	ldr	r0, [pc, #24]	; (144ec <CC_PalTerminate+0x30>)
   144d2:	f000 f81b 	bl	1450c <CC_PalMutexDestroy>
   144d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   144da:	f000 b80b 	b.w	144f4 <CC_PalDmaTerminate>
   144de:	bf00      	nop
   144e0:	20000114 	.word	0x20000114
   144e4:	20000110 	.word	0x20000110
   144e8:	2000010c 	.word	0x2000010c
   144ec:	20000108 	.word	0x20000108

000144f0 <CC_PalDmaInit>:
   144f0:	2000      	movs	r0, #0
   144f2:	4770      	bx	lr

000144f4 <CC_PalDmaTerminate>:
   144f4:	4770      	bx	lr
   144f6:	bf00      	nop

000144f8 <CC_PalMutexCreate>:
   144f8:	b508      	push	{r3, lr}
   144fa:	4b03      	ldr	r3, [pc, #12]	; (14508 <CC_PalMutexCreate+0x10>)
   144fc:	6802      	ldr	r2, [r0, #0]
   144fe:	681b      	ldr	r3, [r3, #0]
   14500:	6810      	ldr	r0, [r2, #0]
   14502:	4798      	blx	r3
   14504:	2000      	movs	r0, #0
   14506:	bd08      	pop	{r3, pc}
   14508:	200000d4 	.word	0x200000d4

0001450c <CC_PalMutexDestroy>:
   1450c:	b508      	push	{r3, lr}
   1450e:	4b03      	ldr	r3, [pc, #12]	; (1451c <CC_PalMutexDestroy+0x10>)
   14510:	6802      	ldr	r2, [r0, #0]
   14512:	685b      	ldr	r3, [r3, #4]
   14514:	6810      	ldr	r0, [r2, #0]
   14516:	4798      	blx	r3
   14518:	2000      	movs	r0, #0
   1451a:	bd08      	pop	{r3, pc}
   1451c:	200000d4 	.word	0x200000d4

00014520 <CC_PalPowerSaveModeInit>:
   14520:	b570      	push	{r4, r5, r6, lr}
   14522:	4c09      	ldr	r4, [pc, #36]	; (14548 <CC_PalPowerSaveModeInit+0x28>)
   14524:	4d09      	ldr	r5, [pc, #36]	; (1454c <CC_PalPowerSaveModeInit+0x2c>)
   14526:	6920      	ldr	r0, [r4, #16]
   14528:	68ab      	ldr	r3, [r5, #8]
   1452a:	4798      	blx	r3
   1452c:	b118      	cbz	r0, 14536 <CC_PalPowerSaveModeInit+0x16>
   1452e:	4b08      	ldr	r3, [pc, #32]	; (14550 <CC_PalPowerSaveModeInit+0x30>)
   14530:	4808      	ldr	r0, [pc, #32]	; (14554 <CC_PalPowerSaveModeInit+0x34>)
   14532:	685b      	ldr	r3, [r3, #4]
   14534:	4798      	blx	r3
   14536:	4a08      	ldr	r2, [pc, #32]	; (14558 <CC_PalPowerSaveModeInit+0x38>)
   14538:	68eb      	ldr	r3, [r5, #12]
   1453a:	6920      	ldr	r0, [r4, #16]
   1453c:	2100      	movs	r1, #0
   1453e:	6011      	str	r1, [r2, #0]
   14540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14544:	4718      	bx	r3
   14546:	bf00      	nop
   14548:	200000c0 	.word	0x200000c0
   1454c:	200000d4 	.word	0x200000d4
   14550:	200000b8 	.word	0x200000b8
   14554:	000153f4 	.word	0x000153f4
   14558:	200008dc 	.word	0x200008dc

0001455c <CC_PalPowerSaveModeSelect>:
   1455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1455e:	4d1a      	ldr	r5, [pc, #104]	; (145c8 <CC_PalPowerSaveModeSelect+0x6c>)
   14560:	4e1a      	ldr	r6, [pc, #104]	; (145cc <CC_PalPowerSaveModeSelect+0x70>)
   14562:	4604      	mov	r4, r0
   14564:	68b2      	ldr	r2, [r6, #8]
   14566:	6928      	ldr	r0, [r5, #16]
   14568:	4790      	blx	r2
   1456a:	b9e8      	cbnz	r0, 145a8 <CC_PalPowerSaveModeSelect+0x4c>
   1456c:	4f18      	ldr	r7, [pc, #96]	; (145d0 <CC_PalPowerSaveModeSelect+0x74>)
   1456e:	683b      	ldr	r3, [r7, #0]
   14570:	b14c      	cbz	r4, 14586 <CC_PalPowerSaveModeSelect+0x2a>
   14572:	b1a3      	cbz	r3, 1459e <CC_PalPowerSaveModeSelect+0x42>
   14574:	2b01      	cmp	r3, #1
   14576:	d019      	beq.n	145ac <CC_PalPowerSaveModeSelect+0x50>
   14578:	3b01      	subs	r3, #1
   1457a:	603b      	str	r3, [r7, #0]
   1457c:	6928      	ldr	r0, [r5, #16]
   1457e:	68f3      	ldr	r3, [r6, #12]
   14580:	4798      	blx	r3
   14582:	2000      	movs	r0, #0
   14584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14586:	b943      	cbnz	r3, 1459a <CC_PalPowerSaveModeSelect+0x3e>
   14588:	4a12      	ldr	r2, [pc, #72]	; (145d4 <CC_PalPowerSaveModeSelect+0x78>)
   1458a:	2101      	movs	r1, #1
   1458c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   14590:	4911      	ldr	r1, [pc, #68]	; (145d8 <CC_PalPowerSaveModeSelect+0x7c>)
   14592:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   14596:	2a00      	cmp	r2, #0
   14598:	d1fb      	bne.n	14592 <CC_PalPowerSaveModeSelect+0x36>
   1459a:	3301      	adds	r3, #1
   1459c:	603b      	str	r3, [r7, #0]
   1459e:	68f3      	ldr	r3, [r6, #12]
   145a0:	6928      	ldr	r0, [r5, #16]
   145a2:	4798      	blx	r3
   145a4:	2000      	movs	r0, #0
   145a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145a8:	480c      	ldr	r0, [pc, #48]	; (145dc <CC_PalPowerSaveModeSelect+0x80>)
   145aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145ac:	4a0a      	ldr	r2, [pc, #40]	; (145d8 <CC_PalPowerSaveModeSelect+0x7c>)
   145ae:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   145b2:	2b00      	cmp	r3, #0
   145b4:	d1fb      	bne.n	145ae <CC_PalPowerSaveModeSelect+0x52>
   145b6:	4a07      	ldr	r2, [pc, #28]	; (145d4 <CC_PalPowerSaveModeSelect+0x78>)
   145b8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   145bc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   145c0:	f7ff ff48 	bl	14454 <CC_HalMaskInterrupt>
   145c4:	683b      	ldr	r3, [r7, #0]
   145c6:	e7d7      	b.n	14578 <CC_PalPowerSaveModeSelect+0x1c>
   145c8:	200000c0 	.word	0x200000c0
   145cc:	200000d4 	.word	0x200000d4
   145d0:	200008dc 	.word	0x200008dc
   145d4:	5002a000 	.word	0x5002a000
   145d8:	5002b000 	.word	0x5002b000
   145dc:	ffff8fe9 	.word	0xffff8fe9

000145e0 <arch_printk_char_out>:
}
   145e0:	2000      	movs	r0, #0
   145e2:	4770      	bx	lr

000145e4 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   145e4:	b40f      	push	{r0, r1, r2, r3}
   145e6:	b507      	push	{r0, r1, r2, lr}
   145e8:	a904      	add	r1, sp, #16
   145ea:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   145ee:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   145f0:	f7fb ff08 	bl	10404 <vprintk>

	va_end(ap);
}
   145f4:	b003      	add	sp, #12
   145f6:	f85d eb04 	ldr.w	lr, [sp], #4
   145fa:	b004      	add	sp, #16
   145fc:	4770      	bx	lr

000145fe <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   145fe:	4604      	mov	r4, r0
   14600:	b508      	push	{r3, lr}
   14602:	4608      	mov	r0, r1
   14604:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   14606:	461a      	mov	r2, r3
   14608:	47a0      	blx	r4
	return z_impl_z_current_get();
   1460a:	f7ff fc33 	bl	13e74 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1460e:	f7fd f921 	bl	11854 <z_impl_k_thread_abort>

00014612 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   14612:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   14614:	f013 0307 	ands.w	r3, r3, #7
   14618:	d105      	bne.n	14626 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1461a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1461c:	2b00      	cmp	r3, #0
   1461e:	bf0c      	ite	eq
   14620:	2000      	moveq	r0, #0
   14622:	2003      	movne	r0, #3
   14624:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   14626:	2b02      	cmp	r3, #2
   14628:	d105      	bne.n	14636 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1462a:	8b40      	ldrh	r0, [r0, #26]
   1462c:	fab0 f080 	clz	r0, r0
   14630:	0940      	lsrs	r0, r0, #5
   14632:	0080      	lsls	r0, r0, #2
   14634:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   14636:	2b01      	cmp	r3, #1
   14638:	d105      	bne.n	14646 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1463a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1463c:	2b00      	cmp	r3, #0
   1463e:	bf0c      	ite	eq
   14640:	2000      	moveq	r0, #0
   14642:	2005      	movne	r0, #5
   14644:	4770      	bx	lr
	int evt = EVT_NOP;
   14646:	2000      	movs	r0, #0
}
   14648:	4770      	bx	lr

0001464a <validate_args>:
{
   1464a:	b510      	push	{r4, lr}
   1464c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1464e:	b100      	cbz	r0, 14652 <validate_args+0x8>
   14650:	b911      	cbnz	r1, 14658 <validate_args+0xe>
		return -EINVAL;
   14652:	f06f 0015 	mvn.w	r0, #21
}
   14656:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   14658:	1d08      	adds	r0, r1, #4
   1465a:	f000 f895 	bl	14788 <sys_notify_validate>
	if ((rv == 0)
   1465e:	2800      	cmp	r0, #0
   14660:	d1f9      	bne.n	14656 <validate_args+0xc>
	    && ((cli->notify.flags
   14662:	68a3      	ldr	r3, [r4, #8]
   14664:	2b03      	cmp	r3, #3
   14666:	d9f6      	bls.n	14656 <validate_args+0xc>
   14668:	e7f3      	b.n	14652 <validate_args+0x8>

0001466a <notify_one>:
{
   1466a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1466e:	460d      	mov	r5, r1
   14670:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   14672:	4619      	mov	r1, r3
   14674:	1d28      	adds	r0, r5, #4
{
   14676:	4690      	mov	r8, r2
   14678:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1467a:	f000 f896 	bl	147aa <sys_notify_finalize>
	if (cb) {
   1467e:	4604      	mov	r4, r0
   14680:	b138      	cbz	r0, 14692 <notify_one+0x28>
		cb(mgr, cli, state, res);
   14682:	4633      	mov	r3, r6
   14684:	4642      	mov	r2, r8
   14686:	4629      	mov	r1, r5
   14688:	4638      	mov	r0, r7
   1468a:	46a4      	mov	ip, r4
}
   1468c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   14690:	4760      	bx	ip
}
   14692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014696 <transition_complete>:
{
   14696:	b410      	push	{r4}
	__asm__ volatile(
   14698:	f04f 0420 	mov.w	r4, #32
   1469c:	f3ef 8211 	mrs	r2, BASEPRI
   146a0:	f384 8812 	msr	BASEPRI_MAX, r4
   146a4:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   146a8:	6141      	str	r1, [r0, #20]
}
   146aa:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   146ac:	2101      	movs	r1, #1
   146ae:	f7fb beb7 	b.w	10420 <process_event>

000146b2 <onoff_manager_init>:
{
   146b2:	b538      	push	{r3, r4, r5, lr}
   146b4:	460c      	mov	r4, r1
	if ((mgr == NULL)
   146b6:	4605      	mov	r5, r0
   146b8:	b158      	cbz	r0, 146d2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   146ba:	b151      	cbz	r1, 146d2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   146bc:	680b      	ldr	r3, [r1, #0]
   146be:	b143      	cbz	r3, 146d2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   146c0:	684b      	ldr	r3, [r1, #4]
   146c2:	b133      	cbz	r3, 146d2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   146c4:	221c      	movs	r2, #28
   146c6:	2100      	movs	r1, #0
   146c8:	f000 f90a 	bl	148e0 <memset>
   146cc:	612c      	str	r4, [r5, #16]
	return 0;
   146ce:	2000      	movs	r0, #0
}
   146d0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   146d2:	f06f 0015 	mvn.w	r0, #21
   146d6:	e7fb      	b.n	146d0 <onoff_manager_init+0x1e>

000146d8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   146d8:	b570      	push	{r4, r5, r6, lr}
   146da:	4605      	mov	r5, r0
   146dc:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   146de:	f7ff ffb4 	bl	1464a <validate_args>

	if (rv < 0) {
   146e2:	1e04      	subs	r4, r0, #0
   146e4:	db15      	blt.n	14712 <onoff_request+0x3a>
   146e6:	f04f 0320 	mov.w	r3, #32
   146ea:	f3ef 8211 	mrs	r2, BASEPRI
   146ee:	f383 8812 	msr	BASEPRI_MAX, r3
   146f2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   146f6:	8b6b      	ldrh	r3, [r5, #26]
   146f8:	8b2c      	ldrh	r4, [r5, #24]
   146fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   146fe:	428b      	cmp	r3, r1
   14700:	f004 0407 	and.w	r4, r4, #7
   14704:	d107      	bne.n	14716 <onoff_request+0x3e>
	__asm__ volatile(
   14706:	f382 8811 	msr	BASEPRI, r2
   1470a:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   1470e:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   14712:	4620      	mov	r0, r4
   14714:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   14716:	2c02      	cmp	r4, #2
   14718:	d10c      	bne.n	14734 <onoff_request+0x5c>
		mgr->refs += 1U;
   1471a:	3301      	adds	r3, #1
   1471c:	836b      	strh	r3, [r5, #26]
   1471e:	f382 8811 	msr	BASEPRI, r2
   14722:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   14726:	2300      	movs	r3, #0
   14728:	4622      	mov	r2, r4
   1472a:	4631      	mov	r1, r6
   1472c:	4628      	mov	r0, r5
   1472e:	f7ff ff9c 	bl	1466a <notify_one>
   14732:	e7ee      	b.n	14712 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   14734:	2c06      	cmp	r4, #6
   14736:	d814      	bhi.n	14762 <onoff_request+0x8a>
   14738:	e8df f004 	tbb	[pc, r4]
   1473c:	13131304 	.word	0x13131304
   14740:	1a04      	.short	0x1a04
   14742:	04          	.byte	0x04
   14743:	00          	.byte	0x00
	parent->next = child;
   14744:	2300      	movs	r3, #0
   14746:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   14748:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1474a:	b93b      	cbnz	r3, 1475c <onoff_request+0x84>
	list->head = node;
   1474c:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   14750:	b9ac      	cbnz	r4, 1477e <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   14752:	2102      	movs	r1, #2
   14754:	4628      	mov	r0, r5
   14756:	f7fb fe63 	bl	10420 <process_event>
   1475a:	e7da      	b.n	14712 <onoff_request+0x3a>
	parent->next = child;
   1475c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1475e:	606e      	str	r6, [r5, #4]
}
   14760:	e7f6      	b.n	14750 <onoff_request+0x78>
   14762:	f382 8811 	msr	BASEPRI, r2
   14766:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   1476a:	f06f 0404 	mvn.w	r4, #4
   1476e:	e7d0      	b.n	14712 <onoff_request+0x3a>
   14770:	f382 8811 	msr	BASEPRI, r2
   14774:	f3bf 8f6f 	isb	sy
   14778:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1477c:	e7c9      	b.n	14712 <onoff_request+0x3a>
   1477e:	f382 8811 	msr	BASEPRI, r2
   14782:	f3bf 8f6f 	isb	sy
		if (notify) {
   14786:	e7c4      	b.n	14712 <onoff_request+0x3a>

00014788 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   14788:	4603      	mov	r3, r0
   1478a:	b158      	cbz	r0, 147a4 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1478c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1478e:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   14792:	2a01      	cmp	r2, #1
   14794:	d003      	beq.n	1479e <sys_notify_validate+0x16>
   14796:	2a03      	cmp	r2, #3
   14798:	d104      	bne.n	147a4 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   1479a:	6802      	ldr	r2, [r0, #0]
   1479c:	b112      	cbz	r2, 147a4 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   1479e:	2000      	movs	r0, #0
   147a0:	6098      	str	r0, [r3, #8]
   147a2:	4770      	bx	lr
   147a4:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   147a8:	4770      	bx	lr

000147aa <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   147aa:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   147ac:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   147ae:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   147b2:	2a03      	cmp	r2, #3
   147b4:	f04f 0200 	mov.w	r2, #0
{
   147b8:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   147ba:	bf0c      	ite	eq
   147bc:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   147be:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   147c0:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   147c2:	4770      	bx	lr

000147c4 <encode_uint>:
{
   147c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147c8:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   147ca:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   147cc:	2b6f      	cmp	r3, #111	; 0x6f
{
   147ce:	4680      	mov	r8, r0
   147d0:	460f      	mov	r7, r1
   147d2:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   147d4:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   147d8:	d029      	beq.n	1482e <encode_uint+0x6a>
   147da:	d824      	bhi.n	14826 <encode_uint+0x62>
		return 10;
   147dc:	2b58      	cmp	r3, #88	; 0x58
   147de:	bf0c      	ite	eq
   147e0:	2610      	moveq	r6, #16
   147e2:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   147e4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   147e8:	4632      	mov	r2, r6
   147ea:	2300      	movs	r3, #0
   147ec:	4640      	mov	r0, r8
   147ee:	4639      	mov	r1, r7
   147f0:	f7fb fc86 	bl	10100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   147f4:	2a09      	cmp	r2, #9
   147f6:	b2d4      	uxtb	r4, r2
   147f8:	d81e      	bhi.n	14838 <encode_uint+0x74>
   147fa:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   147fc:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   147fe:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   14800:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14804:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   14808:	d301      	bcc.n	1480e <encode_uint+0x4a>
   1480a:	45d1      	cmp	r9, sl
   1480c:	d811      	bhi.n	14832 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1480e:	782b      	ldrb	r3, [r5, #0]
   14810:	069b      	lsls	r3, r3, #26
   14812:	d505      	bpl.n	14820 <encode_uint+0x5c>
		if (radix == 8) {
   14814:	2e08      	cmp	r6, #8
   14816:	d115      	bne.n	14844 <encode_uint+0x80>
			conv->altform_0 = true;
   14818:	78ab      	ldrb	r3, [r5, #2]
   1481a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1481e:	70ab      	strb	r3, [r5, #2]
}
   14820:	4648      	mov	r0, r9
   14822:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   14826:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   1482a:	2b70      	cmp	r3, #112	; 0x70
   1482c:	e7d7      	b.n	147de <encode_uint+0x1a>
	switch (specifier) {
   1482e:	2608      	movs	r6, #8
   14830:	e7d8      	b.n	147e4 <encode_uint+0x20>
		value /= radix;
   14832:	4680      	mov	r8, r0
   14834:	460f      	mov	r7, r1
   14836:	e7d7      	b.n	147e8 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   14838:	f1bb 0f19 	cmp.w	fp, #25
   1483c:	bf94      	ite	ls
   1483e:	3437      	addls	r4, #55	; 0x37
   14840:	3457      	addhi	r4, #87	; 0x57
   14842:	e7db      	b.n	147fc <encode_uint+0x38>
		} else if (radix == 16) {
   14844:	2e10      	cmp	r6, #16
   14846:	d1eb      	bne.n	14820 <encode_uint+0x5c>
			conv->altform_0c = true;
   14848:	78ab      	ldrb	r3, [r5, #2]
   1484a:	f043 0310 	orr.w	r3, r3, #16
   1484e:	e7e6      	b.n	1481e <encode_uint+0x5a>

00014850 <outs>:
{
   14850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14854:	4607      	mov	r7, r0
   14856:	4688      	mov	r8, r1
   14858:	4615      	mov	r5, r2
   1485a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1485c:	4614      	mov	r4, r2
   1485e:	42b4      	cmp	r4, r6
   14860:	d305      	bcc.n	1486e <outs+0x1e>
   14862:	b10e      	cbz	r6, 14868 <outs+0x18>
	return (int)count;
   14864:	1b60      	subs	r0, r4, r5
   14866:	e008      	b.n	1487a <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   14868:	7823      	ldrb	r3, [r4, #0]
   1486a:	2b00      	cmp	r3, #0
   1486c:	d0fa      	beq.n	14864 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   1486e:	f814 0b01 	ldrb.w	r0, [r4], #1
   14872:	4641      	mov	r1, r8
   14874:	47b8      	blx	r7
		if (rc < 0) {
   14876:	2800      	cmp	r0, #0
   14878:	daf1      	bge.n	1485e <outs+0xe>
}
   1487a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001487e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_BOSSA, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_BOSSA_LEGACY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1487e:	4770      	bx	lr

00014880 <abort_function>:
{
   14880:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   14882:	2000      	movs	r0, #0
   14884:	f7fc fa8c 	bl	10da0 <sys_reboot>

00014888 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14888:	f000 ba36 	b.w	14cf8 <z_fatal_error>

0001488c <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1488c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1488e:	6800      	ldr	r0, [r0, #0]
   14890:	f000 ba32 	b.w	14cf8 <z_fatal_error>

00014894 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   14894:	2100      	movs	r1, #0
   14896:	2001      	movs	r0, #1
   14898:	f7ff bff6 	b.w	14888 <z_arm_fatal_error>

0001489c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1489c:	b508      	push	{r3, lr}
	handler();
   1489e:	f7fc fd25 	bl	112ec <z_SysNmiOnReset>
	z_arm_int_exit();
}
   148a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   148a6:	f7fc bdfd 	b.w	114a4 <z_arm_exc_exit>

000148aa <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   148aa:	4603      	mov	r3, r0
	size_t n = 0;
   148ac:	2000      	movs	r0, #0

	while (*s != '\0') {
   148ae:	5c1a      	ldrb	r2, [r3, r0]
   148b0:	b902      	cbnz	r2, 148b4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   148b2:	4770      	bx	lr
		n++;
   148b4:	3001      	adds	r0, #1
   148b6:	e7fa      	b.n	148ae <strlen+0x4>

000148b8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   148b8:	4603      	mov	r3, r0
	size_t n = 0;
   148ba:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   148bc:	5c1a      	ldrb	r2, [r3, r0]
   148be:	b10a      	cbz	r2, 148c4 <strnlen+0xc>
   148c0:	4288      	cmp	r0, r1
   148c2:	d100      	bne.n	148c6 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   148c4:	4770      	bx	lr
		n++;
   148c6:	3001      	adds	r0, #1
   148c8:	e7f8      	b.n	148bc <strnlen+0x4>

000148ca <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   148ca:	b510      	push	{r4, lr}
   148cc:	1e43      	subs	r3, r0, #1
   148ce:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   148d0:	4291      	cmp	r1, r2
   148d2:	d100      	bne.n	148d6 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   148d4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   148d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   148da:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   148de:	e7f7      	b.n	148d0 <memcpy+0x6>

000148e0 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   148e0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   148e2:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   148e4:	4603      	mov	r3, r0
	while (n > 0) {
   148e6:	4293      	cmp	r3, r2
   148e8:	d100      	bne.n	148ec <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   148ea:	4770      	bx	lr
		*(d_byte++) = c_byte;
   148ec:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   148f0:	e7f9      	b.n	148e6 <memset+0x6>

000148f2 <_stdout_hook_default>:
}
   148f2:	f04f 30ff 	mov.w	r0, #4294967295
   148f6:	4770      	bx	lr

000148f8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   148f8:	2806      	cmp	r0, #6
   148fa:	d108      	bne.n	1490e <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   148fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14900:	2201      	movs	r2, #1
   14902:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   14906:	f3bf 8f4f 	dsb	sy
        __WFE();
   1490a:	bf20      	wfe
    while (true)
   1490c:	e7fd      	b.n	1490a <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   1490e:	4770      	bx	lr

00014910 <pm_state_exit_post_ops>:
   14910:	2300      	movs	r3, #0
   14912:	f383 8811 	msr	BASEPRI, r3
   14916:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1491a:	4770      	bx	lr

0001491c <gpio_pin_configure_dt>:
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
   1491c:	b4f0      	push	{r4, r5, r6, r7}
   1491e:	4603      	mov	r3, r0
   14920:	460a      	mov	r2, r1
	return gpio_pin_configure(spec->port,
				  spec->pin,
   14922:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   14924:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
   14926:	6800      	ldr	r0, [r0, #0]
   14928:	4313      	orrs	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   1492a:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
   1492c:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   1492e:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   14930:	d506      	bpl.n	14940 <gpio_pin_configure_dt+0x24>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   14932:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   14936:	d003      	beq.n	14940 <gpio_pin_configure_dt+0x24>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   14938:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1493a:	bf48      	it	mi
   1493c:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   14940:	6834      	ldr	r4, [r6, #0]
   14942:	2501      	movs	r5, #1
   14944:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   14946:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1494a:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1494c:	bf4c      	ite	mi
   1494e:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   14950:	43ac      	bicpl	r4, r5
   14952:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   14954:	683b      	ldr	r3, [r7, #0]
}
   14956:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   14958:	4718      	bx	r3

0001495a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1495a:	6903      	ldr	r3, [r0, #16]
   1495c:	b2c9      	uxtb	r1, r1
   1495e:	220c      	movs	r2, #12
   14960:	fb01 3302 	mla	r3, r1, r2, r3
   14964:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   14966:	f000 0007 	and.w	r0, r0, #7
   1496a:	4770      	bx	lr

0001496c <set_on_state>:
	__asm__ volatile(
   1496c:	f04f 0320 	mov.w	r3, #32
   14970:	f3ef 8211 	mrs	r2, BASEPRI
   14974:	f383 8812 	msr	BASEPRI_MAX, r3
   14978:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1497c:	6803      	ldr	r3, [r0, #0]
   1497e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14982:	f043 0302 	orr.w	r3, r3, #2
   14986:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   14988:	f382 8811 	msr	BASEPRI, r2
   1498c:	f3bf 8f6f 	isb	sy
}
   14990:	4770      	bx	lr

00014992 <stop>:
{
   14992:	b570      	push	{r4, r5, r6, lr}
   14994:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   14996:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   14998:	f04f 0420 	mov.w	r4, #32
   1499c:	f3ef 8511 	mrs	r5, BASEPRI
   149a0:	f384 8812 	msr	BASEPRI_MAX, r4
   149a4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   149a8:	260c      	movs	r6, #12
   149aa:	fb06 3401 	mla	r4, r6, r1, r3
   149ae:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   149b0:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   149b4:	d008      	beq.n	149c8 <stop+0x36>
   149b6:	42a2      	cmp	r2, r4
   149b8:	d006      	beq.n	149c8 <stop+0x36>
	__asm__ volatile(
   149ba:	f385 8811 	msr	BASEPRI, r5
   149be:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   149c2:	f04f 30ff 	mov.w	r0, #4294967295
}
   149c6:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   149c8:	fb06 3301 	mla	r3, r6, r1, r3
   149cc:	2201      	movs	r2, #1
   149ce:	641a      	str	r2, [r3, #64]	; 0x40
   149d0:	f385 8811 	msr	BASEPRI, r5
   149d4:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   149d8:	6843      	ldr	r3, [r0, #4]
   149da:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   149de:	685b      	ldr	r3, [r3, #4]
   149e0:	4798      	blx	r3
	return 0;
   149e2:	2000      	movs	r0, #0
   149e4:	e7ef      	b.n	149c6 <stop+0x34>

000149e6 <api_stop>:
	return stop(dev, subsys, CTX_API);
   149e6:	2280      	movs	r2, #128	; 0x80
   149e8:	f7ff bfd3 	b.w	14992 <stop>

000149ec <async_start>:
{
   149ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   149ee:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   149f0:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   149f2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   149f4:	f04f 0520 	mov.w	r5, #32
   149f8:	f3ef 8611 	mrs	r6, BASEPRI
   149fc:	f385 8812 	msr	BASEPRI_MAX, r5
   14a00:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   14a04:	250c      	movs	r5, #12
   14a06:	fb05 4401 	mla	r4, r5, r1, r4
   14a0a:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   14a0c:	f005 0c07 	and.w	ip, r5, #7
   14a10:	f1bc 0f01 	cmp.w	ip, #1
   14a14:	d10c      	bne.n	14a30 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   14a16:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   14a18:	f386 8811 	msr	BASEPRI, r6
   14a1c:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   14a20:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   14a24:	6843      	ldr	r3, [r0, #4]
   14a26:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   14a2a:	4798      	blx	r3
	return 0;
   14a2c:	2000      	movs	r0, #0
}
   14a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   14a30:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   14a34:	42af      	cmp	r7, r5
   14a36:	f386 8811 	msr	BASEPRI, r6
   14a3a:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   14a3e:	bf0c      	ite	eq
   14a40:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   14a44:	f04f 30ff 	movne.w	r0, #4294967295
   14a48:	e7f1      	b.n	14a2e <async_start+0x42>

00014a4a <api_start>:
{
   14a4a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   14a4c:	2480      	movs	r4, #128	; 0x80
   14a4e:	9400      	str	r4, [sp, #0]
   14a50:	f7ff ffcc 	bl	149ec <async_start>
}
   14a54:	b002      	add	sp, #8
   14a56:	bd10      	pop	{r4, pc}

00014a58 <onoff_started_callback>:
{
   14a58:	b410      	push	{r4}
	return &data->mgr[type];
   14a5a:	6900      	ldr	r0, [r0, #16]
   14a5c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   14a5e:	241c      	movs	r4, #28
   14a60:	fb03 0004 	mla	r0, r3, r4, r0
   14a64:	2100      	movs	r1, #0
}
   14a66:	bc10      	pop	{r4}
	notify(mgr, 0);
   14a68:	4710      	bx	r2

00014a6a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   14a6a:	2000      	movs	r0, #0
   14a6c:	f000 b8a2 	b.w	14bb4 <nrfx_clock_start>

00014a70 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   14a70:	2000      	movs	r0, #0
   14a72:	f000 b8db 	b.w	14c2c <nrfx_clock_stop>

00014a76 <blocking_start_callback>:
{
   14a76:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   14a78:	f7fe bed8 	b.w	1382c <z_impl_k_sem_give>

00014a7c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14a7c:	6843      	ldr	r3, [r0, #4]
   14a7e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   14a80:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   14a84:	600b      	str	r3, [r1, #0]
}
   14a86:	2000      	movs	r0, #0
   14a88:	4770      	bx	lr

00014a8a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14a8a:	6843      	ldr	r3, [r0, #4]
   14a8c:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   14a8e:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   14a92:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   14a96:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   14a9a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   14a9e:	2000      	movs	r0, #0
   14aa0:	4770      	bx	lr

00014aa2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14aa2:	6843      	ldr	r3, [r0, #4]
   14aa4:	685b      	ldr	r3, [r3, #4]
}
   14aa6:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   14aa8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   14aac:	4770      	bx	lr

00014aae <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14aae:	6843      	ldr	r3, [r0, #4]
   14ab0:	685b      	ldr	r3, [r3, #4]
}
   14ab2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   14ab4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   14ab8:	4770      	bx	lr

00014aba <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14aba:	6843      	ldr	r3, [r0, #4]
   14abc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   14abe:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   14ac2:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   14ac6:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   14ac8:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   14acc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   14ad0:	2000      	movs	r0, #0
   14ad2:	4770      	bx	lr

00014ad4 <gpio_nrfx_manage_callback>:
{
   14ad4:	b510      	push	{r4, lr}
	return port->data;
   14ad6:	6903      	ldr	r3, [r0, #16]
	return list->head;
   14ad8:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   14ada:	b1f8      	cbz	r0, 14b1c <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14adc:	4288      	cmp	r0, r1
   14ade:	d119      	bne.n	14b14 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   14ae0:	689c      	ldr	r4, [r3, #8]
	return node->next;
   14ae2:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   14ae4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   14ae6:	42a1      	cmp	r1, r4
   14ae8:	d100      	bne.n	14aec <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   14aea:	6098      	str	r0, [r3, #8]
	parent->next = child;
   14aec:	2000      	movs	r0, #0
   14aee:	6008      	str	r0, [r1, #0]
	if (set) {
   14af0:	b12a      	cbz	r2, 14afe <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   14af2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   14af4:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   14af6:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   14af8:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   14afa:	b902      	cbnz	r2, 14afe <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   14afc:	6099      	str	r1, [r3, #8]
	return 0;
   14afe:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   14b00:	e010      	b.n	14b24 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14b02:	4281      	cmp	r1, r0
   14b04:	d106      	bne.n	14b14 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   14b06:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   14b08:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   14b0a:	6898      	ldr	r0, [r3, #8]
   14b0c:	4281      	cmp	r1, r0
   14b0e:	d1ed      	bne.n	14aec <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   14b10:	609c      	str	r4, [r3, #8]
}
   14b12:	e7eb      	b.n	14aec <gpio_nrfx_manage_callback+0x18>
	return node->next;
   14b14:	4604      	mov	r4, r0
   14b16:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14b18:	2800      	cmp	r0, #0
   14b1a:	d1f2      	bne.n	14b02 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   14b1c:	2a00      	cmp	r2, #0
   14b1e:	d1e8      	bne.n	14af2 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   14b20:	f06f 0015 	mvn.w	r0, #21
}
   14b24:	bd10      	pop	{r4, pc}

00014b26 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   14b26:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   14b28:	6843      	ldr	r3, [r0, #4]
   14b2a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   14b2c:	7a05      	ldrb	r5, [r0, #8]
   14b2e:	6844      	ldr	r4, [r0, #4]
   14b30:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   14b34:	42a3      	cmp	r3, r4
   14b36:	d302      	bcc.n	14b3e <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   14b38:	f06f 0001 	mvn.w	r0, #1
}
   14b3c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   14b3e:	795c      	ldrb	r4, [r3, #5]
   14b40:	428c      	cmp	r4, r1
   14b42:	d001      	beq.n	14b48 <pinctrl_lookup_state+0x22>
		(*state)++;
   14b44:	3308      	adds	r3, #8
   14b46:	e7f0      	b.n	14b2a <pinctrl_lookup_state+0x4>
			return 0;
   14b48:	2000      	movs	r0, #0
   14b4a:	e7f7      	b.n	14b3c <pinctrl_lookup_state+0x16>

00014b4c <uart_nrfx_config_get>:
	struct uart_nrfx_data *data = dev->data;
   14b4c:	6902      	ldr	r2, [r0, #16]
{
   14b4e:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   14b50:	e892 0003 	ldmia.w	r2, {r0, r1}
   14b54:	e883 0003 	stmia.w	r3, {r0, r1}
}
   14b58:	2000      	movs	r0, #0
   14b5a:	4770      	bx	lr

00014b5c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   14b5c:	4770      	bx	lr

00014b5e <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   14b5e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   14b62:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14b64:	b29b      	uxth	r3, r3
   14b66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14b6a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   14b6e:	2200      	movs	r2, #0
   14b70:	601a      	str	r2, [r3, #0]
   14b72:	681b      	ldr	r3, [r3, #0]
}
   14b74:	4770      	bx	lr

00014b76 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   14b76:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   14b78:	2000      	movs	r0, #0
   14b7a:	f7fc ff63 	bl	11a44 <sys_arch_reboot>

00014b7e <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   14b7e:	f7ff bb3f 	b.w	14200 <nrf_cc3xx_platform_init_no_rng>

00014b82 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
   14b82:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   14b84:	f7fc fa5e 	bl	11044 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   14b88:	f7fc fb32 	bl	111f0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
   14b8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   14b90:	f7ff bb36 	b.w	14200 <nrf_cc3xx_platform_init_no_rng>

00014b94 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   14b94:	4700      	bx	r0

00014b96 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   14b96:	f000 ba03 	b.w	14fa0 <z_impl_k_busy_wait>

00014b9a <nrfx_clock_enable>:
{
   14b9a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   14b9c:	2000      	movs	r0, #0
   14b9e:	f7fc fb7f 	bl	112a0 <arch_irq_is_enabled>
   14ba2:	b908      	cbnz	r0, 14ba8 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   14ba4:	f7fc fb5a 	bl	1125c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   14ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14bac:	2200      	movs	r2, #0
   14bae:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   14bb2:	bd08      	pop	{r3, pc}

00014bb4 <nrfx_clock_start>:
{
   14bb4:	b508      	push	{r3, lr}
    switch (domain)
   14bb6:	b110      	cbz	r0, 14bbe <nrfx_clock_start+0xa>
   14bb8:	2801      	cmp	r0, #1
   14bba:	d02c      	beq.n	14c16 <nrfx_clock_start+0x62>
}
   14bbc:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   14bc2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14bc6:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   14bca:	03c8      	lsls	r0, r1, #15
   14bcc:	d40b      	bmi.n	14be6 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   14bce:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   14bd2:	07d9      	lsls	r1, r3, #31
   14bd4:	d50f      	bpl.n	14bf6 <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   14bd6:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   14bda:	079b      	lsls	r3, r3, #30
   14bdc:	d408      	bmi.n	14bf0 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
   14bde:	2302      	movs	r3, #2
   14be0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   14be4:	e7ea      	b.n	14bbc <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   14be6:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   14bea:	2b01      	cmp	r3, #1
   14bec:	d004      	beq.n	14bf8 <nrfx_clock_start+0x44>
   14bee:	b113      	cbz	r3, 14bf6 <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   14bf0:	2000      	movs	r0, #0
   14bf2:	f7fd ff7b 	bl	12aec <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   14bf6:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
   14bf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   14bfc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c00:	2300      	movs	r3, #0
   14c02:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   14c06:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   14c0a:	2302      	movs	r3, #2
   14c0c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c10:	2301      	movs	r3, #1
   14c12:	6093      	str	r3, [r2, #8]
}
   14c14:	e7d2      	b.n	14bbc <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14c1a:	2200      	movs	r2, #0
   14c1c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14c20:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   14c24:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c28:	6018      	str	r0, [r3, #0]
}
   14c2a:	e7c7      	b.n	14bbc <nrfx_clock_start+0x8>

00014c2c <nrfx_clock_stop>:
    clock_stop(domain);
   14c2c:	f7fd bf5e 	b.w	12aec <clock_stop>

00014c30 <nrf_gpio_reconfigure>:
{
   14c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14c32:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14c34:	a801      	add	r0, sp, #4
{
   14c36:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   14c3a:	4616      	mov	r6, r2
   14c3c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14c3e:	f7fd fffd 	bl	12c3c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14c42:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14c44:	f1b6 0c00 	subs.w	ip, r6, #0
   14c48:	bf18      	it	ne
   14c4a:	f04f 0c01 	movne.w	ip, #1
   14c4e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   14c52:	1e0b      	subs	r3, r1, #0
   14c54:	bf18      	it	ne
   14c56:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14c58:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   14c5a:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14c5e:	bf14      	ite	ne
   14c60:	f04f 0c0c 	movne.w	ip, #12
   14c64:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   14c68:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   14c6a:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   14c6e:	bf14      	ite	ne
   14c70:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   14c74:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   14c78:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   14c7a:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14c7e:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   14c82:	bf14      	ite	ne
   14c84:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   14c88:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   14c8c:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   14c90:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14c94:	b101      	cbz	r1, 14c98 <nrf_gpio_reconfigure+0x68>
   14c96:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14c98:	b10e      	cbz	r6, 14c9e <nrf_gpio_reconfigure+0x6e>
   14c9a:	7836      	ldrb	r6, [r6, #0]
   14c9c:	0076      	lsls	r6, r6, #1
   14c9e:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14ca0:	b10d      	cbz	r5, 14ca6 <nrf_gpio_reconfigure+0x76>
   14ca2:	782d      	ldrb	r5, [r5, #0]
   14ca4:	00ad      	lsls	r5, r5, #2
   14ca6:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   14ca8:	b10c      	cbz	r4, 14cae <nrf_gpio_reconfigure+0x7e>
   14caa:	7824      	ldrb	r4, [r4, #0]
   14cac:	0224      	lsls	r4, r4, #8
   14cae:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   14cb0:	b10f      	cbz	r7, 14cb6 <nrf_gpio_reconfigure+0x86>
   14cb2:	783f      	ldrb	r7, [r7, #0]
   14cb4:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14cb6:	430c      	orrs	r4, r1
   14cb8:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   14cba:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   14cbe:	b003      	add	sp, #12
   14cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014cc2 <nrf_gpio_cfg_sense_set>:
{
   14cc2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   14cc4:	f10d 030f 	add.w	r3, sp, #15
   14cc8:	9301      	str	r3, [sp, #4]
   14cca:	2300      	movs	r3, #0
{
   14ccc:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   14cd0:	9300      	str	r3, [sp, #0]
   14cd2:	461a      	mov	r2, r3
   14cd4:	4619      	mov	r1, r3
   14cd6:	f7ff ffab 	bl	14c30 <nrf_gpio_reconfigure>
}
   14cda:	b005      	add	sp, #20
   14cdc:	f85d fb04 	ldr.w	pc, [sp], #4

00014ce0 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   14ce0:	4770      	bx	lr

00014ce2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   14ce2:	b140      	cbz	r0, 14cf6 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   14ce4:	68c3      	ldr	r3, [r0, #12]
   14ce6:	7858      	ldrb	r0, [r3, #1]
   14ce8:	f010 0001 	ands.w	r0, r0, #1
   14cec:	bf1e      	ittt	ne
   14cee:	7818      	ldrbne	r0, [r3, #0]
   14cf0:	fab0 f080 	clzne	r0, r0
   14cf4:	0940      	lsrne	r0, r0, #5
}
   14cf6:	4770      	bx	lr

00014cf8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14cfa:	4605      	mov	r5, r0
   14cfc:	460e      	mov	r6, r1
	__asm__ volatile(
   14cfe:	f04f 0320 	mov.w	r3, #32
   14d02:	f3ef 8711 	mrs	r7, BASEPRI
   14d06:	f383 8812 	msr	BASEPRI_MAX, r3
   14d0a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   14d0e:	f7ff f8b1 	bl	13e74 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   14d12:	4631      	mov	r1, r6
   14d14:	4604      	mov	r4, r0
   14d16:	4628      	mov	r0, r5
   14d18:	f7ff ff2d 	bl	14b76 <k_sys_fatal_error_handler>
	__asm__ volatile(
   14d1c:	f387 8811 	msr	BASEPRI, r7
   14d20:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   14d24:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   14d26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14d2a:	f7fc bd93 	b.w	11854 <z_impl_k_thread_abort>

00014d2e <z_early_memset>:
	(void) memset(dst, c, n);
   14d2e:	f7ff bdd7 	b.w	148e0 <memset>

00014d32 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   14d32:	f7ff bdca 	b.w	148ca <memcpy>

00014d36 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   14d36:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   14d3a:	4313      	orrs	r3, r2
   14d3c:	f013 0303 	ands.w	r3, r3, #3
   14d40:	d10c      	bne.n	14d5c <create_free_list+0x26>
	slab->free_list = NULL;
   14d42:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   14d44:	6881      	ldr	r1, [r0, #8]
   14d46:	4299      	cmp	r1, r3
   14d48:	d801      	bhi.n	14d4e <create_free_list+0x18>
	return 0;
   14d4a:	2000      	movs	r0, #0
   14d4c:	4770      	bx	lr
		*(char **)p = slab->free_list;
   14d4e:	6941      	ldr	r1, [r0, #20]
   14d50:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   14d52:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   14d54:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   14d56:	3301      	adds	r3, #1
		p += slab->block_size;
   14d58:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   14d5a:	e7f3      	b.n	14d44 <create_free_list+0xe>
		return -EINVAL;
   14d5c:	f06f 0015 	mvn.w	r0, #21
}
   14d60:	4770      	bx	lr

00014d62 <k_mem_slab_init>:
{
   14d62:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   14d64:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
   14d68:	2300      	movs	r3, #0
	slab->buffer = buffer;
   14d6a:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   14d6c:	6183      	str	r3, [r0, #24]
{
   14d6e:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   14d70:	f7ff ffe1 	bl	14d36 <create_free_list>
	if (rc < 0) {
   14d74:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
   14d76:	bfa8      	it	ge
   14d78:	e9c4 4400 	strdge	r4, r4, [r4]
}
   14d7c:	bd10      	pop	{r4, pc}

00014d7e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   14d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d80:	4604      	mov	r4, r0
   14d82:	460d      	mov	r5, r1
	__asm__ volatile(
   14d84:	f04f 0320 	mov.w	r3, #32
   14d88:	f3ef 8611 	mrs	r6, BASEPRI
   14d8c:	f383 8812 	msr	BASEPRI_MAX, r3
   14d90:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   14d94:	6947      	ldr	r7, [r0, #20]
   14d96:	b977      	cbnz	r7, 14db6 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   14d98:	f000 f8a6 	bl	14ee8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   14d9c:	b158      	cbz	r0, 14db6 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   14d9e:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   14da0:	6142      	str	r2, [r0, #20]
   14da2:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
   14da4:	f000 f86a 	bl	14e7c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   14da8:	4631      	mov	r1, r6
   14daa:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   14dae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   14db2:	f7fe bf29 	b.w	13c08 <z_reschedule>
	**(char ***) mem = slab->free_list;
   14db6:	682b      	ldr	r3, [r5, #0]
   14db8:	6962      	ldr	r2, [r4, #20]
   14dba:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   14dbc:	682b      	ldr	r3, [r5, #0]
   14dbe:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   14dc0:	69a3      	ldr	r3, [r4, #24]
   14dc2:	3b01      	subs	r3, #1
   14dc4:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   14dc6:	f386 8811 	msr	BASEPRI, r6
   14dca:	f3bf 8f6f 	isb	sy
}
   14dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014dd0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14dd0:	f3ef 8005 	mrs	r0, IPSR
}
   14dd4:	3800      	subs	r0, #0
   14dd6:	bf18      	it	ne
   14dd8:	2001      	movne	r0, #1
   14dda:	4770      	bx	lr

00014ddc <z_pm_save_idle_exit>:
{
   14ddc:	b508      	push	{r3, lr}
	pm_system_resume();
   14dde:	f7fc f827 	bl	10e30 <pm_system_resume>
}
   14de2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   14de6:	f7ff beb9 	b.w	14b5c <sys_clock_idle_exit>

00014dea <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   14dea:	f990 300e 	ldrsb.w	r3, [r0, #14]
   14dee:	428b      	cmp	r3, r1
   14df0:	d001      	beq.n	14df6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   14df2:	f7fe bec3 	b.w	13b7c <z_set_prio>
}
   14df6:	2000      	movs	r0, #0
   14df8:	4770      	bx	lr

00014dfa <z_impl_k_mutex_init>:
{
   14dfa:	4603      	mov	r3, r0
	mutex->owner = NULL;
   14dfc:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   14dfe:	e9c3 0002 	strd	r0, r0, [r3, #8]
   14e02:	e9c3 3300 	strd	r3, r3, [r3]
}
   14e06:	4770      	bx	lr

00014e08 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   14e08:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   14e0c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   14e0e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   14e10:	2300      	movs	r3, #0
	node->prev = NULL;
   14e12:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   14e16:	4770      	bx	lr

00014e18 <unpend_thread_no_timeout>:
{
   14e18:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   14e1a:	f7ff fff5 	bl	14e08 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14e1e:	7b43      	ldrb	r3, [r0, #13]
   14e20:	f023 0302 	bic.w	r3, r3, #2
   14e24:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   14e26:	2300      	movs	r3, #0
   14e28:	6083      	str	r3, [r0, #8]
}
   14e2a:	bd08      	pop	{r3, pc}

00014e2c <add_to_waitq_locked>:
{
   14e2c:	b538      	push	{r3, r4, r5, lr}
   14e2e:	4604      	mov	r4, r0
   14e30:	460d      	mov	r5, r1
	unready_thread(thread);
   14e32:	f7fe fe25 	bl	13a80 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   14e36:	7b63      	ldrb	r3, [r4, #13]
   14e38:	f043 0302 	orr.w	r3, r3, #2
   14e3c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   14e3e:	b1e5      	cbz	r5, 14e7a <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   14e40:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   14e42:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14e44:	429d      	cmp	r5, r3
   14e46:	d109      	bne.n	14e5c <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   14e48:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   14e4a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   14e4e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   14e50:	606c      	str	r4, [r5, #4]
}
   14e52:	e012      	b.n	14e7a <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   14e54:	686a      	ldr	r2, [r5, #4]
   14e56:	4293      	cmp	r3, r2
   14e58:	d0f6      	beq.n	14e48 <add_to_waitq_locked+0x1c>
   14e5a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14e5c:	2b00      	cmp	r3, #0
   14e5e:	d0f3      	beq.n	14e48 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   14e60:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   14e64:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   14e68:	428a      	cmp	r2, r1
   14e6a:	d0f3      	beq.n	14e54 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   14e6c:	4291      	cmp	r1, r2
   14e6e:	ddf1      	ble.n	14e54 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   14e70:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   14e72:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   14e76:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   14e78:	605c      	str	r4, [r3, #4]
}
   14e7a:	bd38      	pop	{r3, r4, r5, pc}

00014e7c <z_ready_thread>:
{
   14e7c:	b510      	push	{r4, lr}
	__asm__ volatile(
   14e7e:	f04f 0320 	mov.w	r3, #32
   14e82:	f3ef 8411 	mrs	r4, BASEPRI
   14e86:	f383 8812 	msr	BASEPRI_MAX, r3
   14e8a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   14e8e:	f7fe fdc3 	bl	13a18 <ready_thread>
	__asm__ volatile(
   14e92:	f384 8811 	msr	BASEPRI, r4
   14e96:	f3bf 8f6f 	isb	sy
}
   14e9a:	bd10      	pop	{r4, pc}

00014e9c <z_sched_wake_thread>:
{
   14e9c:	b538      	push	{r3, r4, r5, lr}
   14e9e:	4604      	mov	r4, r0
	__asm__ volatile(
   14ea0:	f04f 0320 	mov.w	r3, #32
   14ea4:	f3ef 8511 	mrs	r5, BASEPRI
   14ea8:	f383 8812 	msr	BASEPRI_MAX, r3
   14eac:	f3bf 8f6f 	isb	sy
		if (!killed) {
   14eb0:	7b43      	ldrb	r3, [r0, #13]
   14eb2:	f013 0f28 	tst.w	r3, #40	; 0x28
   14eb6:	d10b      	bne.n	14ed0 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   14eb8:	6883      	ldr	r3, [r0, #8]
   14eba:	b10b      	cbz	r3, 14ec0 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   14ebc:	f7ff ffac 	bl	14e18 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14ec0:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   14ec2:	b951      	cbnz	r1, 14eda <z_sched_wake_thread+0x3e>
   14ec4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   14ec8:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   14eca:	4620      	mov	r0, r4
   14ecc:	f7fe fda4 	bl	13a18 <ready_thread>
	__asm__ volatile(
   14ed0:	f385 8811 	msr	BASEPRI, r5
   14ed4:	f3bf 8f6f 	isb	sy
}
   14ed8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   14eda:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   14ede:	e7f3      	b.n	14ec8 <z_sched_wake_thread+0x2c>

00014ee0 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   14ee0:	2101      	movs	r1, #1
   14ee2:	3818      	subs	r0, #24
   14ee4:	f7ff bfda 	b.w	14e9c <z_sched_wake_thread>

00014ee8 <z_unpend_first_thread>:
{
   14ee8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   14eea:	f04f 0320 	mov.w	r3, #32
   14eee:	f3ef 8511 	mrs	r5, BASEPRI
   14ef2:	f383 8812 	msr	BASEPRI_MAX, r3
   14ef6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   14efa:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14efc:	42a0      	cmp	r0, r4
   14efe:	d00d      	beq.n	14f1c <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   14f00:	b134      	cbz	r4, 14f10 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   14f02:	4620      	mov	r0, r4
   14f04:	f7ff ff88 	bl	14e18 <unpend_thread_no_timeout>
   14f08:	f104 0018 	add.w	r0, r4, #24
   14f0c:	f000 f81e 	bl	14f4c <z_abort_timeout>
	__asm__ volatile(
   14f10:	f385 8811 	msr	BASEPRI, r5
   14f14:	f3bf 8f6f 	isb	sy
}
   14f18:	4620      	mov	r0, r4
   14f1a:	bd38      	pop	{r3, r4, r5, pc}
   14f1c:	2400      	movs	r4, #0
   14f1e:	e7f7      	b.n	14f10 <z_unpend_first_thread+0x28>

00014f20 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   14f20:	4603      	mov	r3, r0
   14f22:	b920      	cbnz	r0, 14f2e <z_reschedule_irqlock+0xe>
   14f24:	f3ef 8205 	mrs	r2, IPSR
   14f28:	b90a      	cbnz	r2, 14f2e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   14f2a:	f7fc b9ff 	b.w	1132c <arch_swap>
   14f2e:	f383 8811 	msr	BASEPRI, r3
   14f32:	f3bf 8f6f 	isb	sy
}
   14f36:	4770      	bx	lr

00014f38 <z_reschedule_unlocked>:
	__asm__ volatile(
   14f38:	f04f 0320 	mov.w	r3, #32
   14f3c:	f3ef 8011 	mrs	r0, BASEPRI
   14f40:	f383 8812 	msr	BASEPRI_MAX, r3
   14f44:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   14f48:	f7ff bfea 	b.w	14f20 <z_reschedule_irqlock>

00014f4c <z_abort_timeout>:
{
   14f4c:	b510      	push	{r4, lr}
   14f4e:	f04f 0220 	mov.w	r2, #32
   14f52:	f3ef 8411 	mrs	r4, BASEPRI
   14f56:	f382 8812 	msr	BASEPRI_MAX, r2
   14f5a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   14f5e:	6803      	ldr	r3, [r0, #0]
   14f60:	b13b      	cbz	r3, 14f72 <z_abort_timeout+0x26>
			remove_timeout(to);
   14f62:	f7ff f831 	bl	13fc8 <remove_timeout>
			ret = 0;
   14f66:	2000      	movs	r0, #0
	__asm__ volatile(
   14f68:	f384 8811 	msr	BASEPRI, r4
   14f6c:	f3bf 8f6f 	isb	sy
}
   14f70:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   14f72:	f06f 0015 	mvn.w	r0, #21
   14f76:	e7f7      	b.n	14f68 <z_abort_timeout+0x1c>

00014f78 <z_get_next_timeout_expiry>:
{
   14f78:	b510      	push	{r4, lr}
	__asm__ volatile(
   14f7a:	f04f 0320 	mov.w	r3, #32
   14f7e:	f3ef 8411 	mrs	r4, BASEPRI
   14f82:	f383 8812 	msr	BASEPRI_MAX, r3
   14f86:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   14f8a:	f7fe fffd 	bl	13f88 <next_timeout>
	__asm__ volatile(
   14f8e:	f384 8811 	msr	BASEPRI, r4
   14f92:	f3bf 8f6f 	isb	sy
}
   14f96:	bd10      	pop	{r4, pc}

00014f98 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   14f98:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   14f9a:	f7ff f911 	bl	141c0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   14f9e:	bd08      	pop	{r3, pc}

00014fa0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   14fa0:	b108      	cbz	r0, 14fa6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   14fa2:	f7fc bd65 	b.w	11a70 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   14fa6:	4770      	bx	lr

00014fa8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   14fa8:	4770      	bx	lr
	...
